[{"F:\\MTS-ReactJs\\mts-v2\\src\\index.js":"1","F:\\MTS-ReactJs\\mts-v2\\src\\reportWebVitals.js":"2","F:\\MTS-ReactJs\\mts-v2\\src\\components\\Header\\index.jsx":"3","F:\\MTS-ReactJs\\mts-v2\\src\\components\\NotFound\\index.jsx":"4","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\index.jsx":"5","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Home\\index.jsx":"6","F:\\MTS-ReactJs\\mts-v2\\src\\App\\App.js":"7","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\AddEdit\\index.jsx":"8","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\Table\\index.jsx":"9","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\index.jsx":"10","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\StudentSide.jsx":"11","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\AccountSide.jsx":"12","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\HomeSide.jsx":"13","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TeamSide.jsx":"14","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TeacherSide.jsx":"15","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TopicSide.jsx":"16","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\NotiProfileSide.jsx":"17","F:\\MTS-ReactJs\\mts-v2\\src\\components\\Loader\\index.jsx":"18","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\Info\\index.jsx":"19","F:\\MTS-ReactJs\\mts-v2\\src\\utils\\converter.js":"20","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Login\\index.jsx":"21","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\pages\\Table\\index.jsx":"22","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Input\\index.jsx":"23","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Button\\index.jsx":"24","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Notification\\index.jsx":"25","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Popup\\index.jsx":"26","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\ConfirmDialog\\index.jsx":"27","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\ButtonIcon\\index.jsx":"28","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\RadioGroup\\index.jsx":"29","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\DatePicker\\index.jsx":"30","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Select\\index.jsx":"31","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\index.jsx":"32","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\Info\\index.jsx":"33","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\Table\\index.jsx":"34","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\AddEdit\\index.jsx":"35","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Checkbox\\index.jsx":"36","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\index.jsx":"37","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\pages\\AddEdit\\index.jsx":"38","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\components\\Deadline\\index.jsx":"39","F:\\MTS-ReactJs\\mts-v2\\src\\app\\App.js":"40","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\index.jsx":"41","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\AddEdit\\index.jsx":"42","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\Table\\index.jsx":"43","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBarForUser\\index.jsx":"44","F:\\MTS-ReactJs\\mts-v2\\src\\routes\\User\\index.jsx":"45","F:\\MTS-ReactJs\\mts-v2\\src\\routes\\Admin\\index.jsx":"46","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Use\\useFormCustom.jsx":"47","F:\\MTS-ReactJs\\mts-v2\\src\\api\\Handle\\handleApi.js":"48","F:\\MTS-ReactJs\\mts-v2\\src\\api\\Handle\\executeError.js":"49","F:\\MTS-ReactJs\\mts-v2\\src\\utils\\getObject.js":"50","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\Views\\index.jsx":"51","F:\\MTS-ReactJs\\mts-v2\\src\\api\\Login\\loginAPI.js":"52","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Account\\index.jsx":"53","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Account\\pages\\Table\\index.jsx":"54","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Account\\pages\\Update\\index.jsx":"55","F:\\MTS-ReactJs\\mts-v2\\src\\api\\Account\\index.js":"56","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Use\\useTableCustom.jsx":"57","F:\\MTS-ReactJs\\mts-v2\\src\\styles\\Form\\index.jsx":"58","F:\\MTS-ReactJs\\mts-v2\\src\\styles\\Info\\index.jsx":"59","F:\\MTS-ReactJs\\mts-v2\\src\\styles\\Login\\index.jsx":"60","F:\\MTS-ReactJs\\mts-v2\\src\\styles\\SelectTopic\\index.jsx":"61","F:\\MTS-ReactJs\\mts-v2\\src\\styles\\Table\\index.jsx":"62","F:\\MTS-ReactJs\\mts-v2\\src\\styles\\Color\\index.js":"63","F:\\MTS-ReactJs\\mts-v2\\src\\constants\\InitialValues\\index.js":"64","F:\\MTS-ReactJs\\mts-v2\\src\\constants\\Type\\type.js":"65","F:\\MTS-ReactJs\\mts-v2\\src\\api\\URL\\index.js":"66","F:\\MTS-ReactJs\\mts-v2\\src\\api\\Topic\\index.js":"67","F:\\MTS-ReactJs\\mts-v2\\src\\api\\Team\\index.js":"68","F:\\MTS-ReactJs\\mts-v2\\src\\api\\Teacher\\index.js":"69","F:\\MTS-ReactJs\\mts-v2\\src\\api\\GetListForSelect\\facultyList.js":"70","F:\\MTS-ReactJs\\mts-v2\\src\\api\\GetListForSelect\\typeTopicListAPI.js":"71","F:\\MTS-ReactJs\\mts-v2\\src\\api\\GetListForSelect\\positionList.js":"72","F:\\MTS-ReactJs\\mts-v2\\src\\api\\GetListForSelect\\academyList.js":"73","F:\\MTS-ReactJs\\mts-v2\\src\\api\\GetListForSelect\\topicListAPI.js":"74","F:\\MTS-ReactJs\\mts-v2\\src\\api\\Student\\index.js":"75","F:\\MTS-ReactJs\\mts-v2\\src\\styles\\Side\\index.jsx":"76"},{"size":478,"mtime":1612624921304,"results":"77","hashOfConfig":"78"},{"size":362,"mtime":499162500000,"results":"79","hashOfConfig":"78"},{"size":4692,"mtime":1613072620324,"results":"80","hashOfConfig":"78"},{"size":350,"mtime":1611891067957,"results":"81","hashOfConfig":"78"},{"size":976,"mtime":1612749091124,"results":"82","hashOfConfig":"78"},{"size":336,"mtime":1611927046554,"results":"83","hashOfConfig":"78"},{"size":875,"mtime":1612628540611,"results":"84","hashOfConfig":"78"},{"size":11710,"mtime":1613073877143,"results":"85","hashOfConfig":"78"},{"size":7281,"mtime":1613072881812,"results":"86","hashOfConfig":"78"},{"size":652,"mtime":1612541712194,"results":"87","hashOfConfig":"78"},{"size":2506,"mtime":1613073245535,"results":"88","hashOfConfig":"78"},{"size":2357,"mtime":1613073281730,"results":"89","hashOfConfig":"78"},{"size":713,"mtime":1613072620324,"results":"90","hashOfConfig":"78"},{"size":2402,"mtime":1613073281730,"results":"91","hashOfConfig":"78"},{"size":2397,"mtime":1613073281730,"results":"92","hashOfConfig":"78"},{"size":2459,"mtime":1613073281730,"results":"93","hashOfConfig":"78"},{"size":4676,"mtime":1613073354234,"results":"94","hashOfConfig":"78"},{"size":791,"mtime":1612170899960,"results":"95","hashOfConfig":"78"},{"size":3429,"mtime":1613072881812,"results":"96","hashOfConfig":"78"},{"size":1823,"mtime":1612929432177,"results":"97","hashOfConfig":"78"},{"size":4375,"mtime":1613072620324,"results":"98","hashOfConfig":"78"},{"size":7430,"mtime":1613072818346,"results":"99","hashOfConfig":"78"},{"size":818,"mtime":1612714959393,"results":"100","hashOfConfig":"78"},{"size":872,"mtime":1612709235287,"results":"101","hashOfConfig":"78"},{"size":1001,"mtime":1612176107875,"results":"102","hashOfConfig":"78"},{"size":1338,"mtime":1612176868306,"results":"103","hashOfConfig":"78"},{"size":1522,"mtime":1612183677279,"results":"104","hashOfConfig":"78"},{"size":665,"mtime":1612709157898,"results":"105","hashOfConfig":"78"},{"size":1231,"mtime":1612020005178,"results":"106","hashOfConfig":"78"},{"size":1291,"mtime":1612621346307,"results":"107","hashOfConfig":"78"},{"size":1488,"mtime":1612808580579,"results":"108","hashOfConfig":"78"},{"size":968,"mtime":1612624903112,"results":"109","hashOfConfig":"78"},{"size":3592,"mtime":1613072818346,"results":"110","hashOfConfig":"78"},{"size":7351,"mtime":1613072818346,"results":"111","hashOfConfig":"78"},{"size":12860,"mtime":1613072881812,"results":"112","hashOfConfig":"78"},{"size":984,"mtime":1613072620324,"results":"113","hashOfConfig":"78"},{"size":1147,"mtime":1612964452946,"results":"114","hashOfConfig":"78"},{"size":6702,"mtime":1613072881812,"results":"115","hashOfConfig":"78"},{"size":4868,"mtime":1612719025933,"results":"116","hashOfConfig":"78"},{"size":875,"mtime":1612628540611,"results":"117","hashOfConfig":"78"},{"size":950,"mtime":1612886996348,"results":"118","hashOfConfig":"78"},{"size":7317,"mtime":1613072881812,"results":"119","hashOfConfig":"78"},{"size":7512,"mtime":1613072818346,"results":"120","hashOfConfig":"78"},{"size":2541,"mtime":1613072620324,"results":"121","hashOfConfig":"78"},{"size":1284,"mtime":1612839704518,"results":"122","hashOfConfig":"78"},{"size":1477,"mtime":1612969106919,"results":"123","hashOfConfig":"78"},{"size":3768,"mtime":1613072881812,"results":"124","hashOfConfig":"78"},{"size":773,"mtime":1612863137990,"results":"125","hashOfConfig":"78"},{"size":0,"mtime":1612790390579,"results":"126","hashOfConfig":"78"},{"size":3500,"mtime":1612869762221,"results":"127","hashOfConfig":"78"},{"size":5097,"mtime":1613072818346,"results":"128","hashOfConfig":"78"},{"size":1117,"mtime":1612935426334,"results":"129","hashOfConfig":"78"},{"size":915,"mtime":1612969056170,"results":"130","hashOfConfig":"78"},{"size":8274,"mtime":1613072881812,"results":"131","hashOfConfig":"78"},{"size":0,"mtime":1612800660312,"results":"132","hashOfConfig":"78"},{"size":2341,"mtime":1613072527871,"results":"133","hashOfConfig":"78"},{"size":3924,"mtime":1613072620324,"results":"134","hashOfConfig":"78"},{"size":641,"mtime":1613072641962,"results":"135","hashOfConfig":"78"},{"size":739,"mtime":1613072620324,"results":"136","hashOfConfig":"78"},{"size":712,"mtime":1613072620323,"results":"137","hashOfConfig":"78"},{"size":511,"mtime":1613072197043,"results":"138","hashOfConfig":"78"},{"size":297,"mtime":1613072103812,"results":"139","hashOfConfig":"78"},{"size":1128,"mtime":1613072619721,"results":"140","hashOfConfig":"78"},{"size":1674,"mtime":1613072702576,"results":"141","hashOfConfig":"78"},{"size":134,"mtime":1613072748919,"results":"142","hashOfConfig":"78"},{"size":301,"mtime":1613072780010,"results":"143","hashOfConfig":"78"},{"size":2621,"mtime":1613072800807,"results":"144","hashOfConfig":"78"},{"size":2859,"mtime":1613072808640,"results":"145","hashOfConfig":"78"},{"size":2194,"mtime":1613072816076,"results":"146","hashOfConfig":"78"},{"size":523,"mtime":1612779174120,"results":"147","hashOfConfig":"78"},{"size":539,"mtime":1613072847718,"results":"148","hashOfConfig":"78"},{"size":532,"mtime":1612801183454,"results":"149","hashOfConfig":"78"},{"size":525,"mtime":1612801083591,"results":"150","hashOfConfig":"78"},{"size":518,"mtime":1612863919908,"results":"151","hashOfConfig":"78"},{"size":2194,"mtime":1613072827595,"results":"152","hashOfConfig":"78"},{"size":299,"mtime":1613073132700,"results":"153","hashOfConfig":"78"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},"3c2w8d",{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"156"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"156"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"156"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"156"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"246","usedDeprecatedRules":"156"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"156"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"156"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"156"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"264"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"156"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\MTS-ReactJs\\mts-v2\\src\\index.js",[],["320","321"],"F:\\MTS-ReactJs\\mts-v2\\src\\reportWebVitals.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\Header\\index.jsx",["322"],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\NotFound\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Home\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\App\\App.js",[],["323","324"],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\AddEdit\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\Table\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\StudentSide.jsx",["325"],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\AccountSide.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\HomeSide.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TeamSide.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TeacherSide.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TopicSide.jsx",["326"],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\NotiProfileSide.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\Loader\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\Info\\index.jsx",["327"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Avatar, Grid, ListItem, ListItemAvatar, ListItemText, Paper } from \"@material-ui/core\";\r\nimport DateRangeIcon from '@material-ui/icons/DateRange';\r\nimport PhoneIphoneIcon from '@material-ui/icons/PhoneIphone';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport ClassIcon from '@material-ui/icons/Class';\r\nimport ContactsIcon from '@material-ui/icons/Contacts';\r\nimport WcIcon from '@material-ui/icons/Wc';\r\nimport { SET_BACKGROUND_COLOR_PRIMARY } from \"styles/Color\";\r\nimport studentApi from \"api/Student/studentApi\";\r\nimport Notification from \"custom-fields/Notification\";\r\nimport { formatDate } from \"utils/converter\";\r\nimport { useInfoStyles } from \"styles/Info\";\r\n\r\n\r\nexport default function InfoPage() {\r\n\r\n    const classes = useInfoStyles();\r\n    const { studentId } = useParams();\r\n    const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' })\r\n    const [studentInfo, setStudentInfo] = useState({});\r\n\r\n    const fetchData = async () => {\r\n        studentApi.info(studentId).then(res=>{\r\n            res.errorMessage\r\n            ? setNotify({\r\n                isOpen: true,\r\n                message: res.errorMessage,\r\n                type: 'error'\r\n            })\r\n            : setStudentInfo(res.result);            \r\n        });\r\n    };\r\n\r\n    useEffect(() => { fetchData(); }, []);\r\n    \r\n    const renderRow = (icon, title, info) =>{\r\n        return(\r\n            <ListItem className={classes.left}>\r\n                <ListItemAvatar>\r\n                    <Avatar style={SET_BACKGROUND_COLOR_PRIMARY}>\r\n                    {icon}\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={title} secondary={info} />\r\n            </ListItem>\r\n        );\r\n    }\r\n\r\n    const renderRowRight = (icon, title, info) =>{\r\n        return(\r\n            <ListItem className={classes.right}>\r\n                <ListItemAvatar>\r\n                    <Avatar style={SET_BACKGROUND_COLOR_PRIMARY}>\r\n                    {icon}\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={title} secondary={info} />\r\n            </ListItem>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n        <Grid container className={classes.grid}>\r\n            <Grid item xs={12} sm={4}>\r\n                <Paper elevation={4} className={classes.pager}>\r\n                    \r\n                    <h1 className={classes.title}>Student Info</h1>\r\n                    {renderRow(<ContactsIcon/>, \"Code\", studentInfo.code)}\r\n                    {renderRowRight(<PersonIcon />, \"Name\", studentInfo.name)}\r\n                    {renderRow(<WcIcon />, \"Gender\", studentInfo.gender)}\r\n                    {renderRowRight(<DateRangeIcon />, \"Birthday\", formatDate(studentInfo.birthday))}\r\n                    {renderRow(<EmailIcon />, \"Email\", studentInfo.email)}\r\n                    {renderRowRight(<PhoneIphoneIcon />, \"Phone\", studentInfo.phone)}\r\n                    {renderRow(<ClassIcon />, \"Faculty\", studentInfo.facultyName)}\r\n                </Paper>\r\n                \r\n            </Grid>\r\n        </Grid>\r\n        <Notification\r\n            notify={notify}\r\n            setNotify={setNotify}\r\n        />\r\n        </div>\r\n        \r\n    );\r\n}","F:\\MTS-ReactJs\\mts-v2\\src\\utils\\converter.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Login\\index.jsx",["328","329","330","331"],"import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Avatar, Checkbox, FormControlLabel, FormGroup, Grid, Paper, Typography } from \"@material-ui/core\";\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport { SET_BACKGROUND_COLOR_PRIMARY } from \"styles/Color/color\";\r\nimport Input from \"custom-fields/Input\";\r\nimport Button from \"custom-fields/Button\";\r\nimport { useLoginStyles } from \"styles/Login\";\r\n\r\n\r\nexport default function Login(props) {\r\n\r\n    const classes = useLoginStyles();\r\n    const [account, setAccount] = useState({\"username\": \"\", \"password\": \"\"});\r\n    const [error, setError] = useState(false);\r\n    const {history} = props;\r\n\r\n    const handleInputChange = e => {\r\n        const { name, value } = e.target\r\n        setAccount({\r\n            ...account,\r\n            [name]: value\r\n        })\r\n    }\r\n    const handleLogin = e => {\r\n        if(account.username == \"admin\" && account.password ==\"admin\"){\r\n            setError(false);\r\n            history.push('/admin');\r\n        }\r\n        if(account.username == \"hau.197ct31311\" && account.password ==\"197ct31311\"){\r\n            history.push('/mts')\r\n        }else{\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    // const handleLogin = e => {\r\n    //     const url = 'http://localhost:8090/login';  \r\n    //     axios.post(url, account).then(res=>{\r\n    //         console.log(res.status);\r\n    //     }).catch(error=>{\r\n    //         console.log(error)\r\n    //     })\r\n    // }\r\n\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n        <Grid container className={classes.grid} align='center'>\r\n            <Grid item xs={12} sm={3}>\r\n               \r\n                <h1 className={classes.text}>MTS</h1>\r\n                <Paper elevation={10} className={classes.pager}>\r\n            \r\n                    <Avatar style={SET_BACKGROUND_COLOR_PRIMARY}><LockOutlinedIcon/></Avatar>\r\n                    <h2 className={classes.text}>Login</h2>\r\n                    <FormGroup>\r\n                        <Input\r\n                            variant=\"standard\"\r\n                            label='Username'\r\n                            name=\"username\"\r\n                            value={account.username}\r\n                            onChange={handleInputChange}\r\n                            placeholder='Enter username'\r\n                            fullWidth\r\n                            required\r\n                            error={error ? \"incorrect\" : null}\r\n                        >\r\n                        </Input>\r\n                        <br/>\r\n                        <Input\r\n                            variant=\"standard\"\r\n                            name=\"password\"\r\n                            placeholder='Enter password' \r\n                            label='Password' \r\n                            value={account.password}\r\n                            onChange={handleInputChange}\r\n                            type='password' \r\n                            fullWidth \r\n                            required\r\n                            error={error ? \"incorrect\" : null}\r\n                        >\r\n                        </Input>\r\n\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    name=\"checked\"\r\n                                    color=\"default\"\r\n                                />\r\n                            }\r\n                            label=\"Remember me\"\r\n                        />\r\n                        <br/>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            text=\"Login\"\r\n                            startIcon={<ExitToAppIcon />}\r\n                            onClick={handleLogin}\r\n                            background = {SET_BACKGROUND_COLOR_PRIMARY}\r\n                        />\r\n                        <br/>\r\n                        <Typography >\r\n                            <Link to=\"#\" className={classes.link}>\r\n                                Forgot password ?\r\n                            </Link>\r\n                        </Typography>\r\n                    </FormGroup>\r\n\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n        </div>\r\n        \r\n    );\r\n}","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\pages\\Table\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Input\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Button\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Notification\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Popup\\index.jsx",[],["332","333"],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\ConfirmDialog\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\ButtonIcon\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\RadioGroup\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\DatePicker\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Select\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\Info\\index.jsx",["334","335"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Avatar, Grid, ListItem, ListItemAvatar, ListItemText, Paper } from \"@material-ui/core\";\r\nimport DateRangeIcon from '@material-ui/icons/DateRange';\r\nimport PhoneIphoneIcon from '@material-ui/icons/PhoneIphone';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport ClassIcon from '@material-ui/icons/Class';\r\nimport ContactsIcon from '@material-ui/icons/Contacts';\r\nimport WcIcon from '@material-ui/icons/Wc';\r\nimport WorkOutlineIcon from '@material-ui/icons/WorkOutline';\r\nimport SchoolIcon from '@material-ui/icons/School';\r\nimport { SET_BACKGROUND_COLOR_PRIMARY } from \"styles/Color/color\";\r\nimport teacherApi from \"api/Teacher/teacherApi\";\r\nimport { useInfoStyles } from \"styles/Info\";\r\nimport { formatDate } from \"utils/converter\";\r\n\r\nexport default function InfoPage() {\r\n\r\n    const classes = useInfoStyles();\r\n    const { teacherId } = useParams();\r\n    const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' })\r\n    const [teacherInfo, setTeacherInfo] = useState({});\r\n\r\n    const fetchData = async () => {\r\n        teacherApi.info(teacherId).then(res=>{\r\n            res.errorMessage\r\n            ? setNotify({\r\n                isOpen: true,\r\n                message: res.errorMessage,\r\n                type: 'error'\r\n            })\r\n            : setTeacherInfo(res.result);            \r\n        });\r\n    };\r\n\r\n    useEffect(() => { fetchData(); }, []);\r\n    \r\n    const renderRow = (icon, title, info) =>{\r\n        return(\r\n            <ListItem className={classes.left}>\r\n                <ListItemAvatar>\r\n                    <Avatar style={SET_BACKGROUND_COLOR_PRIMARY}>\r\n                    {icon}\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={title} secondary={info} />\r\n            </ListItem>\r\n        );\r\n    }\r\n\r\n    const renderRowRight = (icon, title, info) =>{\r\n        return(\r\n            <ListItem className={classes.right}>\r\n                <ListItemAvatar>\r\n                    <Avatar style={SET_BACKGROUND_COLOR_PRIMARY}>\r\n                    {icon}\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={title} secondary={info} />\r\n            </ListItem>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n        <Grid container className={classes.grid}>\r\n            <Grid item xs={12} sm={4}>\r\n                <Paper elevation={4} className={classes.pager}>\r\n                    \r\n                    <h1 className={classes.title}>Teacher Info</h1>\r\n                    {renderRow(<ContactsIcon/>, \"Code\", teacherInfo.code)}\r\n                    {renderRowRight(<PersonIcon />, \"Name\", teacherInfo.name)}\r\n                    {renderRow(<WcIcon />, \"Gender\", teacherInfo.gender)}\r\n                    {renderRowRight(<DateRangeIcon />, \"Birthday\", formatDate(teacherInfo.birthday))}\r\n                    {renderRow(<EmailIcon />, \"Email\", teacherInfo.email)}\r\n                    {renderRowRight(<PhoneIphoneIcon />, \"Phone\", teacherInfo.phone)}\r\n                    {renderRow(<SchoolIcon />, \"Academy\", teacherInfo.academyName)}\r\n                    {renderRowRight(<WorkOutlineIcon />, \"Position\", teacherInfo.positionName)}\r\n                    {renderRow(<ClassIcon />, \"Faculty\", teacherInfo.facultyName)}\r\n                    \r\n                </Paper>\r\n                \r\n            </Grid>\r\n        </Grid>\r\n        </div>\r\n        \r\n    );\r\n}","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\Table\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\AddEdit\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Checkbox\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\pages\\AddEdit\\index.jsx",["336","337"],"import React from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { FormGroup, FormLabel, Grid } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\nimport Input from 'custom-fields/Input';\r\nimport { SET_BACKGROUND_COLOR_PRIMARY_DARK } from 'styles/Color/color';\r\nimport Button from 'custom-fields/Button';\r\nimport { useFormCustom } from 'custom-fields/Use/useFormCustom';\r\nimport { TYPE } from 'constants/type';\r\nimport { initialFValuesTopicDefault } from 'constants/initialValues';\r\nimport Notification from 'custom-fields/Notification';\r\nimport DatePicker from 'custom-fields/DatePicker';\r\nimport Select from 'custom-fields/Select';\r\nimport TypeTopicListAPI from 'api/Select/typeTopicList';\r\nimport { useFormStyles } from 'styles/Form';\r\n\r\n\r\nexport default function AddEditPage(props) {\r\n\r\n    const classes = useFormStyles();\r\n    const {history} = props;\r\n    const { topicId } = useParams();\r\n    const isAddMode = !topicId;\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('code' in fieldValues)\r\n            temp.code = fieldValues.code ? \"\" : \"This field is required.\"\r\n        if ('name' in fieldValues)\r\n            temp.name = fieldValues.name ? \"\" : \"This field is required.\"\r\n        if ('topicId' in fieldValues)\r\n            temp.topicId = fieldValues.topicId.length !== 0 ? \"\" : \"This field is required.\"\r\n        \r\n        setErrors({ ...temp })\r\n\r\n        if (fieldValues === values)\r\n            return Object.values(temp).every(x => x === \"\")\r\n    }\r\n\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        notify,\r\n        setNotify,\r\n        notFound,\r\n        handleInputChange,\r\n        onReset\r\n    } = useFormCustom(initialFValuesTopicDefault, isAddMode, TYPE.TOPIC, topicId, true, validate);\r\n   \r\n   const handleSubmit = e => {\r\n    //add or update \r\n        e.preventDefault();\r\n        \r\n        // if(isAddMode){\r\n\r\n        //     const topicCreate = gettopicCreateObject(values);\r\n        //     topicApi.create(topicCreate).then(res=>{\r\n        //         if(res.success){\r\n        //             setNotify({\r\n        //                 isOpen: true,\r\n        //                 message: \"Create Successfully\",\r\n        //                 type: \"success\"\r\n        //             });\r\n        //             setTimeout(() => history.push('/admin/topic'), 1500);\r\n                    \r\n        //         }else{\r\n        //             setNotify({\r\n        //                 isOpen: true,\r\n        //                 message: \"Sorry, Create Unsuccessfully\",\r\n        //                 type: \"error\"\r\n        //             });\r\n        //         }\r\n        //     });\r\n\r\n        // }else{\r\n\r\n        //     const topicUpdate = gettopicUpdateObject(values);\r\n        //     topicApi.update(topicId, topicUpdate).then(res=>{\r\n        //         if(res.success){\r\n        //             setNotify({\r\n        //                 isOpen: true,\r\n        //                 message: \"Update Successfully\",\r\n        //                 type: \"success\"\r\n        //             });\r\n        //             setTimeout(() => history.push('/admin/topic'), 1500);\r\n                    \r\n        //         }else{\r\n        //             setNotify({\r\n        //                 isOpen: true,\r\n        //                 message: \"Sory, Update Unsuccessfully\",\r\n        //                 type: \"error\"\r\n        //             });\r\n        //         }\r\n        //     });\r\n        // }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n        <FormGroup onSubmit={handleSubmit}>\r\n            <FormLabel>\r\n                {isAddMode \r\n                ? <h1>Create a Topic</h1>\r\n                : <h1>Update Topic</h1>\r\n                }\r\n            </FormLabel>\r\n            \r\n            <Grid container className={classes.grid}>\r\n                <Grid item xs={12} sm={3}>\r\n                <FormGroup>\r\n                    <Input\r\n                        name=\"code\"\r\n                        label=\"Code\"\r\n                        placeholder=\"Ex: 197CT11122\"\r\n                        value={values.code}\r\n                        onChange={handleInputChange}\r\n                        error={errors.code}\r\n                    />\r\n                    <br/>\r\n                    <Input\r\n                        name=\"name\"\r\n                        label=\"Name\"\r\n                        placeholder=\"Ex: Nguyễn Văn An\"\r\n                        value={values.name}\r\n                        onChange={handleInputChange}\r\n                        error={errors.name}\r\n                    />\r\n                    <br/>\r\n                    <DatePicker\r\n                        name=\"startTime\"\r\n                        label=\"Start Time\"\r\n                        value={values.startTime}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <br/>\r\n                    <DatePicker\r\n                        name=\"endTime\"\r\n                        label=\"End Time\"\r\n                        value={values.endTime}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <br/>\r\n                    <Select\r\n                        nampe=\"typeTopicId\"\r\n                        label=\"Type Topic\"\r\n                        value={values.typeTopicId}\r\n                        onChange={handleInputChange}\r\n                        options={TypeTopicListAPI() || \"\"}\r\n                        error={errors.typeTopicId}\r\n                    />\r\n                    <br/>\r\n                    DEADLINE??\r\n                    </FormGroup>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} className={classes.submit}>\r\n                <Button\r\n                    type=\"submit\"\r\n                    text={isAddMode ? \"Save\": \"Update\"} \r\n                    startIcon={isAddMode ? <SaveIcon />: <UpdateIcon />}\r\n                    onClick={handleSubmit}\r\n                    background = {SET_BACKGROUND_COLOR_PRIMARY_DARK}\r\n                    disabled={notFound ? true : false}\r\n                />\r\n                <Button\r\n                    text=\"Reset\"\r\n                    color=\"default\"\r\n                    startIcon={<RefreshIcon />}\r\n                    onClick={onReset} \r\n                />\r\n            </Grid>\r\n            \r\n            </FormGroup>\r\n\r\n            <Notification\r\n                notify={notify}\r\n                setNotify={setNotify}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\components\\Deadline\\index.jsx",[],["338","339"],"F:\\MTS-ReactJs\\mts-v2\\src\\app\\App.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\AddEdit\\index.jsx",["340","341"],"import React from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { FormGroup, FormLabel, Grid, List, ListItem, ListItemText, ListSubheader } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\nimport Input from 'custom-fields/Input';\r\nimport { SET_BACKGROUND_COLOR_PRIMARY_DARK } from 'styles/Color';\r\nimport Button from 'custom-fields/Button';\r\nimport { useFormCustom } from 'custom-fields/Use/useFormCustom';\r\nimport { TYPE } from 'constants/Type/type';\r\nimport { initialFValuesTeamDefault } from 'constants/InitialValues';\r\nimport { useSelectTopicStyles } from 'styles/SelectTopic';\r\nimport TopicListAPI from 'api/Select/topicListAPI';\r\nimport teamApi from 'api/Team';\r\nimport { getTeamUpdateObject, getTeamCreateObject } from 'utils/getObject';\r\nimport Notification from 'custom-fields/Notification';\r\nimport { useFormStyles } from 'styles/Form';\r\n\r\n\r\n\r\nexport default function AddEditPage(props) {\r\n\r\n    const classes = useFormStyles();\r\n    const classesSelectTopic = useSelectTopicStyles();\r\n    const {history} = props;\r\n    const { teamId } = useParams();\r\n    const isAddMode = !teamId;\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('code' in fieldValues)\r\n            temp.code = fieldValues.code ? \"\" : \"This field is required.\"\r\n        if ('name' in fieldValues)\r\n            temp.name = fieldValues.name ? \"\" : \"This field is required.\"\r\n        if ('topicId' in fieldValues)\r\n            temp.topicId = fieldValues.topicId.length !== 0 ? \"\" : \"This field is required.\"\r\n        \r\n        setErrors({ ...temp })\r\n\r\n        if (fieldValues === values)\r\n            return Object.values(temp).every(x => x === \"\")\r\n    }\r\n\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        notify,\r\n        setNotify,\r\n        notFound,\r\n        handleInputChange,\r\n        onReset\r\n    } = useFormCustom(initialFValuesTeamDefault, isAddMode, TYPE.TEAM, teamId, true, validate);\r\n\r\n    const handleTouchTap = (topicId, topicName) => {\r\n        setValues({\r\n            ...values,\r\n            [\"topicName\"]: topicName,\r\n            [\"topicId\"]:topicId\r\n        })\r\n   }\r\n   \r\n   const handleSubmit = e => {\r\n    //add or update \r\n        e.preventDefault();\r\n        \r\n        if(isAddMode){\r\n\r\n            const teamCreate = getTeamCreateObject(values);\r\n            teamApi.create(teamCreate).then(res=>{\r\n                if(res.success){\r\n                    setNotify({\r\n                        isOpen: true,\r\n                        message: \"Create Successfully\",\r\n                        type: \"success\"\r\n                    });\r\n                    setTimeout(() => history.push('/admin/team'), 1500);\r\n                    \r\n                }else{\r\n                    setNotify({\r\n                        isOpen: true,\r\n                        message: \"Sorry, Create Unsuccessfully\",\r\n                        type: \"error\"\r\n                    });\r\n                }\r\n            });\r\n\r\n        }else{\r\n\r\n            const teamUpdate = getTeamUpdateObject(values);\r\n            teamApi.update(teamId, teamUpdate).then(res=>{\r\n                if(res.success){\r\n                    setNotify({\r\n                        isOpen: true,\r\n                        message: \"Update Successfully\",\r\n                        type: \"success\"\r\n                    });\r\n                    setTimeout(() => history.push('/admin/team'), 1500);\r\n                    \r\n                }else{\r\n                    setNotify({\r\n                        isOpen: true,\r\n                        message: \"Sory, Update Unsuccessfully\",\r\n                        type: \"error\"\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n        <FormGroup onSubmit={handleSubmit}>\r\n            <FormLabel>\r\n                {isAddMode \r\n                ? <h1>Create a Team</h1>\r\n                : <h1>Update Team</h1>\r\n                }\r\n            </FormLabel>\r\n            \r\n            <Grid container className={classes.grid}>\r\n                <Grid item xs={12} sm={3}>\r\n                    <FormGroup>\r\n                        <Input\r\n                            name=\"name\"\r\n                            label=\"Name\"\r\n                            placeholder=\"Ex: Team vui ve khong quao\"\r\n                            value={values.name || \"\"}\r\n                            onChange={handleInputChange}\r\n                            error={errors.name}\r\n                        />\r\n                        <br/>\r\n                        <Input\r\n                            name=\"topicName\"\r\n                            label=\"Select Topic\"\r\n                            value={values.topicName || \"\"}\r\n                            disabled={true}\r\n                        />\r\n                        <br/>\r\n                        <List className={classesSelectTopic.root} subheader={<li />}>\r\n                            {TopicListAPI().map((items) => (\r\n                                <li key={items.facultyName} className={classesSelectTopic.listSection}>\r\n                                <ul className={classesSelectTopic.ul}>\r\n\r\n                                    <ListSubheader className={classesSelectTopic.subHeader}> {items.facultyName} </ListSubheader>\r\n                                        \r\n                                        {items.topicList.map((item) => (\r\n                                        <ListItem\r\n                                            key={item.topicId}\r\n                                            button\r\n                                            onClick={() => handleTouchTap(item.topicId, item.topicName)}\r\n                                            >\r\n                                            <ListItemText\r\n                                                primary={`- `+item.topicName}\r\n                                            />\r\n                                        </ListItem>\r\n                                        ))}\r\n                                </ul>\r\n                                </li>\r\n                            ))}\r\n                        </List>\r\n                        <br/>\r\n                    </FormGroup>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} className={classes.submit}>\r\n                <Button\r\n                    type=\"submit\"\r\n                    text={isAddMode ? \"Save\": \"Update\"} \r\n                    startIcon={isAddMode ? <SaveIcon />: <UpdateIcon />}\r\n                    onClick={handleSubmit}\r\n                    background = {SET_BACKGROUND_COLOR_PRIMARY_DARK}\r\n                    disabled={notFound ? true : false}\r\n                />\r\n                <Button\r\n                    text=\"Reset\"\r\n                    color=\"default\"\r\n                    startIcon={<RefreshIcon />}\r\n                    onClick={onReset} \r\n                />\r\n            </Grid>\r\n            \r\n            </FormGroup>\r\n\r\n            <Notification\r\n                notify={notify}\r\n                setNotify={setNotify}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\Table\\index.jsx",["342"],"import React, { useEffect, useState } from 'react'\r\nimport { TableBody, TableRow, TableCell, InputAdornment, Toolbar, FormLabel } from '@material-ui/core';\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport { Search } from '@material-ui/icons';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport useTableCustom from 'custom-fields/Use/useTableCustom';\r\nimport Input from 'custom-fields/Input';\r\nimport ButtonIcon from 'custom-fields/ButtonIcon';\r\nimport ConfirmDialog from 'custom-fields/ConfirmDialog';\r\nimport Notification from 'custom-fields/Notification';\r\nimport { useTableStyles } from 'styles/Table';\r\nimport teamApi from 'api/Team';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst headCells = [\r\n    { id: 'id', label: 'ID' },\r\n    { id: 'name', label: 'Name' },\r\n    { id: 'facultyName', label: 'Faculty' },\r\n    { id: 'topicName', label: 'Topic ' },\r\n    { id: 'studentTotal', label: 'Total' },\r\n    { id: 'status', label: 'Status' },\r\n    { id: 'action', label: 'Action' },\r\n]\r\n\r\nexport default function TablePage(props) {\r\n\r\n    const classes = useTableStyles();\r\n    const {history} = props;\r\n    const { topicId } = useParams();\r\n    const [records, setRecords] = useState([]);\r\n    const [filterFn, setFilterFn] = useState({ fn: items => { return items; } });\r\n    const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' })\r\n    const [confirmDialog, setConfirmDialog] = useState({ isOpen: false, title: '', subTitle: '' })\r\n\r\n    //console.log(history.location.pathname); <=> useRouteMatch()???\r\n\r\n    const fetchData = async () => {\r\n\r\n        if(topicId){\r\n            teamApi.searchByTopicId(topicId).then(res=>{\r\n                res.errorMessage\r\n                ? setNotify({\r\n                    isOpen: true,\r\n                    message: res.errorMessage,\r\n                    type: 'error'\r\n                })\r\n                : setRecords(res.result);\r\n\r\n            })\r\n        }else{\r\n            teamApi.search().then(res=>{\r\n                res.errorMessage\r\n                ? setNotify({\r\n                    isOpen: true,\r\n                    message: res.errorMessage,\r\n                    type: 'error'\r\n                })\r\n                : setRecords(res.result);\r\n\r\n            })\r\n        }\r\n    };\r\n\r\n    useEffect(() => { fetchData(); }, []);\r\n\r\n    const handleSearch = e => {\r\n        let target = e.target;\r\n\r\n        setFilterFn({\r\n            fn: items => {\r\n                if (target.value === \"\")\r\n                    return items;\r\n                else\r\n                    //console.log(items);\r\n                    return items.filter(\r\n                        x => x.name.toLowerCase().includes(target.value.toLowerCase())\r\n                    );\r\n            }\r\n        })\r\n    };\r\n\r\n    const onDelete = id => {\r\n        setConfirmDialog({\r\n            ...confirmDialog,\r\n            isOpen: false\r\n        })\r\n        \r\n        teamApi.delete(id).then(res=>{\r\n            res.success\r\n            ? setNotify({\r\n                 isOpen: true,\r\n                 message: 'Deleted Successfully',\r\n                 type: 'error'\r\n             })\r\n            : setNotify({\r\n                 isOpen: true,\r\n                 message: 'Sory, Deleted Unsuccessfully',\r\n                 type: 'error'\r\n             })\r\n        })\r\n    }\r\n\r\n    const onRefresh = () => {\r\n        console.log(\"Refresh!\")\r\n        fetchData();\r\n    }\r\n\r\n    const {\r\n        TblContainer,\r\n        TblHead,\r\n        TblPagination,\r\n        recordsAfterPagingAndSorting\r\n    } = useTableCustom(records, headCells, filterFn);\r\n\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <FormLabel>\r\n                <h1 className={classes.title}>Team List</h1>\r\n            </FormLabel>\r\n            \r\n            <Toolbar>\r\n                <Input\r\n                    label=\"Search For Name\"\r\n                    className={classes.searchInput}\r\n                    InputProps={{\r\n                        startAdornment: (<InputAdornment position=\"start\">\r\n                            <Search />\r\n                        </InputAdornment>)\r\n                    }}\r\n                    onChange={handleSearch}\r\n                />\r\n                <ButtonIcon\r\n                    icon={<CachedIcon />}   \r\n                    onClick= {onRefresh} \r\n                />\r\n            </Toolbar>\r\n\r\n             <TblContainer>\r\n                    <TblHead />\r\n                    <TableBody>\r\n                        {\r\n                            recordsAfterPagingAndSorting().map(item =>\r\n                                (<TableRow key={item.id}>\r\n                                    <TableCell>{item.id}</TableCell>\r\n                                    <TableCell>{item.name}</TableCell>\r\n                                    <TableCell>{item.facultyName}</TableCell>\r\n                                    <TableCell>{item.topicName}</TableCell>\r\n                                    <TableCell>{item.studentTotal}</TableCell>\r\n                                    <TableCell>{item.status}</TableCell>\r\n                             \r\n                                    <TableCell>\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<EditOutlinedIcon fontSize=\"small\" />}   \r\n                                            onClick= {() => history.push(`${history.location.pathname}/${item.id}`)} \r\n                                        />\r\n\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<DeleteIcon fontSize=\"small\" />}    \r\n                                            onClick={() => {\r\n                                                setConfirmDialog({\r\n                                                    isOpen: true,\r\n                                                    title: 'Are you sure to delete this Team?',\r\n                                                    subTitle: \"You can't undo this operation\",\r\n                                                    onConfirm: () => { onDelete(item.id) }\r\n                                                },)\r\n                                        }}>\r\n                                        </ButtonIcon>\r\n\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<VisibilityIcon fontSize=\"small\" />}   \r\n                                            onClick= {() => history.push(`${history.location.pathname}/${item.id}/view`)} \r\n                                        />\r\n                                        \r\n                                    </TableCell>\r\n                                </TableRow>)\r\n                            )\r\n                        }\r\n                    </TableBody>\r\n                </TblContainer>\r\n                <TblPagination />\r\n\r\n            \r\n                <Notification\r\n                    notify={notify}\r\n                    setNotify={setNotify}\r\n                />\r\n                <ConfirmDialog\r\n                    confirmDialog={confirmDialog}\r\n                    setConfirmDialog={setConfirmDialog}\r\n                />\r\n                \r\n        </div>\r\n    );\r\n}","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBarForUser\\index.jsx",["343"],"import React from \"react\";\r\nimport {\r\n  ListItem,\r\n  List,\r\n  ListItemIcon,\r\n  ListItemText\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport ViewListIcon from '@material-ui/icons/ViewList';\r\nimport AssignmentIndIcon from '@material-ui/icons/AssignmentInd';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\nimport { SET_COLOR_PRIMARY } from \"constants/color\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  nested: {\r\n    paddingLeft: theme.spacing(4),\r\n  },\r\n}));\r\n\r\nconst StudentSide = props => {\r\n\r\n  const { history } = props;\r\n  const classes = useStyles();\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const itemsList = [\r\n   \r\n    {\r\n      text: \"Topics \",\r\n      icon: <ViewListIcon style={SET_COLOR_PRIMARY}/>,\r\n      onClick: () => history.push(\"/mts/topic\")\r\n    },\r\n    {\r\n      text: \"Add Team\",\r\n      icon: <GroupAddIcon style={SET_COLOR_PRIMARY}/>,\r\n      onClick: () => history.push(\"/mts/team/add\")\r\n    },\r\n    {\r\n      text: \"My Topic\",\r\n      icon: <FolderOpenIcon style={SET_COLOR_PRIMARY}/>,\r\n      onClick: () => history.push(\"/mts/my\")\r\n    },\r\n    {\r\n      text: \"My Info\",\r\n      icon: <AssignmentIndIcon style={SET_COLOR_PRIMARY}/>,\r\n      onClick: () => history.push(\"/mts/info\")\r\n    },\r\n    {\r\n      text: \"My Accout\",\r\n      icon: <AccountCircleIcon style={SET_COLOR_PRIMARY}/>,\r\n      onClick: () => history.push(\"/mts/account\")\r\n    },\r\n\r\n  ];\r\n  return (\r\n      <div>\r\n\r\n        <List \r\n          component=\"div\" \r\n          disablePadding\r\n        >\r\n            {itemsList.map((item) => {\r\n\r\n            const { text, icon, onClick } = item;\r\n\r\n            return (\r\n            <ListItem \r\n              className={classes.nested} \r\n              button key={text} \r\n              onClick={onClick}\r\n              >\r\n                {icon \r\n                && <ListItemIcon>{icon}</ListItemIcon>\r\n                }\r\n\r\n                <ListItemText \r\n                  primary={text} \r\n                  style={SET_COLOR_PRIMARY}\r\n                />\r\n            </ListItem>\r\n            );\r\n        })}\r\n        </List>\r\n       \r\n      </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(StudentSide);","F:\\MTS-ReactJs\\mts-v2\\src\\routes\\User\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\routes\\Admin\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Use\\useFormCustom.jsx",["344"],"import studentApi from 'api/Student/studentApi';\r\nimport teacherApi from 'api/Teacher/teacherApi';\r\nimport teamApi from 'api/Team/teamApi';\r\nimport { TYPE } from 'constants/type';\r\nimport { useEffect, useState } from 'react'\r\nimport { getStudentObject, getTeacherObject, getTeamObject } from 'utils/getObject';\r\n\r\nexport function useFormCustom(initialFValuesDefault, isAddMode, type , id, validateOnChange = false, validate) {\r\n\r\n    const [values, setValues] = useState(isAddMode ? initialFValuesDefault : []);\r\n    const [errors, setErrors] = useState({});\r\n    const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' });\r\n    const [notFound, setNotFound] = useState(false);\r\n\r\n    function getInfo(){\r\n        console.log(isAddMode);\r\n        console.log(type);\r\n        switch(type){\r\n\r\n            case TYPE.STUDENT:\r\n                studentApi.find(id).then(res => {\r\n                    if(res.errorMessage === null){\r\n                        let object = getStudentObject(res.result);\r\n                        console.log(object);\r\n                        setValues(object);\r\n                    }else{\r\n                        setValues(initialFValuesDefault);\r\n                        setNotify({\r\n                            isOpen: true,\r\n                            message: res.errorMessage,\r\n                            type: 'error'\r\n                        });\r\n                        setNotFound(true);\r\n                    }\r\n                });\r\n                break;\r\n            \r\n            case TYPE.TEACHER:\r\n                teacherApi.find(id).then(res => {\r\n                    if(res.errorMessage === null){\r\n                        let object = getTeacherObject(res.result);\r\n                        console.log(object);\r\n                        setValues(object);\r\n                    }else{\r\n                        setValues(initialFValuesDefault);\r\n                        setNotify({\r\n                            isOpen: true,\r\n                            message: res.errorMessage,\r\n                            type: 'error'\r\n                        });\r\n                        setNotFound(true);\r\n                    }\r\n                });\r\n                break;\r\n\r\n                case TYPE.TEAM:\r\n                    teamApi.find(id).then(res => {\r\n                        if(res.errorMessage === null){\r\n                            let object = getTeamObject(res.result);\r\n                            console.log(object);\r\n                            setValues(object);\r\n                        }else{\r\n                            setValues(initialFValuesDefault);\r\n                            setNotify({\r\n                                isOpen: true,\r\n                                message: res.errorMessage,\r\n                                type: 'error'\r\n                            });\r\n                            setNotFound(true);\r\n                        }\r\n                    });\r\n                    break;\r\n\r\n            default:\r\n                setValues([]);\r\n                setNotFound(true);\r\n                break;\r\n\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    useEffect(isAddMode? ()=>{console.log('add mode!')} : () => { getInfo(); }, []);\r\n      \r\n    const handleInputChange = e => {\r\n        const { name, value } = e.target\r\n        setValues({\r\n            ...values,\r\n            [name]: value\r\n        })\r\n        if (validateOnChange)\r\n            validate({ [name]: value })\r\n    }\r\n\r\n    const onReset = () => {\r\n        setValues(initialFValuesDefault);\r\n        setErrors({})\r\n    }\r\n\r\n    return {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        notify,\r\n        setNotify,\r\n        notFound,\r\n        handleInputChange,\r\n        onReset\r\n    }\r\n}\r\n\r\n\r\n\r\n","F:\\MTS-ReactJs\\mts-v2\\src\\api\\Handle\\handleApi.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\Handle\\executeError.js",[],["345","346"],"F:\\MTS-ReactJs\\mts-v2\\src\\utils\\getObject.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\Views\\index.jsx",["347","348","349","350","351","352","353","354","355","356","357","358","359"],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\Login\\loginAPI.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Account\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Account\\pages\\Table\\index.jsx",["360","361","362"],"import React, { useEffect, useState } from 'react'\r\nimport { TableBody, TableRow, TableCell, InputAdornment, Toolbar, FormLabel, Checkbox } from '@material-ui/core';\r\nimport { Search } from '@material-ui/icons';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport useTableCustom from 'custom-fields/Use/useTableCustom';\r\nimport Input from 'custom-fields/Input';\r\nimport ButtonIcon from 'custom-fields/ButtonIcon';\r\nimport ConfirmDialog from 'custom-fields/ConfirmDialog';\r\nimport Notification from 'custom-fields/Notification';\r\nimport studentApi from 'api/Student/studentApi';\r\nimport { useTableStyles } from 'styles/Table';\r\nimport accountApi from 'api/Account';\r\nimport Select from 'custom-fields/Select';\r\nimport { LIST_DEFAULT, LIST_ROLES } from 'constants/InitialValues/initialValues';\r\n\r\nconst headCells = [\r\n    { id: 'id', label: 'ID' },\r\n    { id: 'username', label: 'Username' },\r\n    { id: 'password', label: 'Password' },\r\n    { id: 'status', label: 'Status' },\r\n    { id: 'roles', label: 'Roles' },\r\n    { id: 'resetPassword', label: 'Reset Password' },\r\n    { id: 'changeRoles', label: 'Change Roles' },\r\n    { id: 'save', label: 'Save' },\r\n   \r\n]\r\n\r\nexport default function TablePage(props) {\r\n\r\n    const classes = useTableStyles();\r\n    const {history} = props;\r\n    const [records, setRecords] = useState([]);\r\n    const [saveChange, setSaveChange] = useState({newPassword: \"\", tickDefault: true, roles: \"\", status: \"\"});\r\n    const [filterFn, setFilterFn] = useState({ fn: items => { return items; } });\r\n    const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' })\r\n    const [confirmDialog, setConfirmDialog] = useState({ isOpen: false, title: '', subTitle: '' })\r\n\r\n    //console.log(history.location.pathname); <=> useRouteMatch()???\r\n\r\n    const fetchData = async () => {\r\n        \r\n        accountApi.search().then(res=>{\r\n            res.errorMessage\r\n            ? setNotify({\r\n                isOpen: true,\r\n                message: res.errorMessage,\r\n                type: 'error'\r\n            })\r\n            : setRecords(res.result);\r\n\r\n        })\r\n    };\r\n\r\n    useEffect(() => { fetchData(); }, []);\r\n\r\n    const handleSearch = e => {\r\n        let target = e.target;\r\n\r\n        setFilterFn({\r\n            fn: items => {\r\n                if (target.value === \"\")\r\n                    return items;\r\n                else\r\n                    //console.log(items);\r\n                    return items.filter(\r\n                        x => x.code.toLowerCase().includes(target.value.toLowerCase())\r\n                    );\r\n            }\r\n        })\r\n    };\r\n\r\n    const onDelete = id => {\r\n        setConfirmDialog({\r\n            ...confirmDialog,\r\n            isOpen: false\r\n        })\r\n        \r\n        studentApi.delete(id).then(res=>{\r\n            res.success\r\n            ? setNotify({\r\n                 isOpen: true,\r\n                 message: 'Deleted Successfully',\r\n                 type: 'error'\r\n             })\r\n            : setNotify({\r\n                 isOpen: true,\r\n                 message: 'Sory, Deleted Unsuccessfully',\r\n                 type: 'error'\r\n             })\r\n        })\r\n    }\r\n\r\n    const onRefresh = () => {\r\n        console.log(\"Refresh!\")\r\n        fetchData();\r\n    }\r\n\r\n    const {\r\n        TblContainer,\r\n        TblHead,\r\n        TblPagination,\r\n        recordsAfterPagingAndSorting\r\n    } = useTableCustom(records, headCells, filterFn);\r\n\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <FormLabel>\r\n                <h1 className={classes.title}>Account List</h1>\r\n            </FormLabel>\r\n            \r\n            <Toolbar>\r\n                <Input\r\n                    label=\"Search For Username\"\r\n                    className={classes.searchInput}\r\n                    InputProps={{\r\n                        startAdornment: (<InputAdornment position=\"start\">\r\n                            <Search />\r\n                        </InputAdornment>)\r\n                    }}\r\n                    onChange={handleSearch}\r\n                />\r\n                <ButtonIcon\r\n                    icon={<CachedIcon />}   \r\n                    onClick= {onRefresh} \r\n                />\r\n            </Toolbar>\r\n\r\n             <TblContainer>\r\n                    <TblHead />\r\n                    <TableBody>\r\n                        {\r\n                            recordsAfterPagingAndSorting().map(item =>\r\n                                (<TableRow key={item.id}>\r\n                                    <TableCell>{item.id}</TableCell>\r\n                                    <TableCell>{item.username}</TableCell>\r\n                                    <TableCell><VisibilityOffIcon fontSize=\"small\" color=\"primary\"/></TableCell>\r\n                                    <TableCell>{item.status}</TableCell>\r\n                                    <TableCell>{item.roles}</TableCell>\r\n                                    <TableCell>\r\n                                        <Input\r\n                                            name=\"password\"\r\n                                            label=\"New Password\"\r\n                                            value={\"A\"}\r\n                                            // onChange={handleInputChange}\r\n                                            // error={errors.username}\r\n                                            // disabled={\r\n                                            //         !isAddMode\r\n                                            //         ? true\r\n                                            //         : values.tickDefaultUsername\r\n                                            //     }\r\n                                        />\r\n                                        <Checkbox \r\n                                            name=\"tickDefaultUsername\"\r\n                                            label=\"Default\"\r\n                                            value={false}\r\n                                            //onChange={handleInputChange}\r\n                                        />\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                    <Select\r\n                                        name=\"rolesId\"\r\n                                        label=\"Roles\"\r\n                                        value={\"a\"}\r\n                                        // onChange={handleInputChange}\r\n                                        options={LIST_ROLES() || LIST_DEFAULT()}\r\n                                        // error={errors.facultyId}\r\n                                    />                        \r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        <ButtonIcon\r\n                                        // size=\"small\"\r\n                                            icon={<SaveIcon fontSize={\"large\"}/>}    \r\n                                            onClick={() => {\r\n                                                setConfirmDialog({\r\n                                                    isOpen: true,\r\n                                                    title: 'Are you sure to reset password?',\r\n                                                    subTitle: \"You can't undo this operation\",\r\n                                                    onConfirm: () => { onDelete(item.id) }\r\n                                                },)\r\n                                            }}>\r\n                                        </ButtonIcon>\r\n                                    </TableCell>\r\n                                </TableRow>)\r\n                            )\r\n                        }\r\n                    </TableBody>\r\n                </TblContainer>\r\n                <TblPagination />\r\n\r\n            \r\n                <Notification\r\n                    notify={notify}\r\n                    setNotify={setNotify}\r\n                />\r\n                <ConfirmDialog\r\n                    confirmDialog={confirmDialog}\r\n                    setConfirmDialog={setConfirmDialog}\r\n                />\r\n                \r\n        </div>\r\n    );\r\n}","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Account\\pages\\Update\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\Account\\index.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Use\\useTableCustom.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\styles\\Form\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\styles\\Info\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\styles\\Login\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\styles\\SelectTopic\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\styles\\Table\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\styles\\Color\\index.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\constants\\InitialValues\\index.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\constants\\Type\\type.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\URL\\index.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\Topic\\index.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\Team\\index.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\Teacher\\index.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\GetListForSelect\\facultyList.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\GetListForSelect\\typeTopicListAPI.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\GetListForSelect\\positionList.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\GetListForSelect\\academyList.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\GetListForSelect\\topicListAPI.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\Student\\index.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\styles\\Side\\index.jsx",[],{"ruleId":"363","replacedBy":"364"},{"ruleId":"365","replacedBy":"366"},{"ruleId":"367","severity":1,"message":"368","line":148,"column":18,"nodeType":"369","messageId":"370","endLine":148,"endColumn":20},{"ruleId":"363","replacedBy":"371"},{"ruleId":"365","replacedBy":"372"},{"ruleId":"373","severity":1,"message":"374","line":8,"column":10,"nodeType":"375","messageId":"376","endLine":8,"endColumn":20},{"ruleId":"373","severity":1,"message":"374","line":8,"column":10,"nodeType":"375","messageId":"376","endLine":8,"endColumn":20},{"ruleId":"377","severity":1,"message":"378","line":37,"column":39,"nodeType":"379","endLine":37,"endColumn":41,"suggestions":"380"},{"ruleId":"367","severity":1,"message":"368","line":27,"column":29,"nodeType":"369","messageId":"370","endLine":27,"endColumn":31},{"ruleId":"367","severity":1,"message":"368","line":27,"column":60,"nodeType":"369","messageId":"370","endLine":27,"endColumn":62},{"ruleId":"367","severity":1,"message":"368","line":31,"column":29,"nodeType":"369","messageId":"370","endLine":31,"endColumn":31},{"ruleId":"367","severity":1,"message":"368","line":31,"column":69,"nodeType":"369","messageId":"370","endLine":31,"endColumn":71},{"ruleId":"363","replacedBy":"381"},{"ruleId":"365","replacedBy":"382"},{"ruleId":"373","severity":1,"message":"383","line":22,"column":12,"nodeType":"375","messageId":"376","endLine":22,"endColumn":18},{"ruleId":"377","severity":1,"message":"378","line":37,"column":39,"nodeType":"379","endLine":37,"endColumn":41,"suggestions":"384"},{"ruleId":"373","severity":1,"message":"385","line":23,"column":12,"nodeType":"375","messageId":"376","endLine":23,"endColumn":19},{"ruleId":"373","severity":1,"message":"386","line":44,"column":9,"nodeType":"375","messageId":"376","endLine":44,"endColumn":18},{"ruleId":"363","replacedBy":"387"},{"ruleId":"365","replacedBy":"388"},{"ruleId":"389","severity":1,"message":"390","line":60,"column":13,"nodeType":"391","messageId":"392","endLine":60,"endColumn":37,"fix":"393"},{"ruleId":"389","severity":1,"message":"394","line":61,"column":13,"nodeType":"391","messageId":"392","endLine":61,"endColumn":32,"fix":"395"},{"ruleId":"377","severity":1,"message":"378","line":66,"column":39,"nodeType":"379","endLine":66,"endColumn":41,"suggestions":"396"},{"ruleId":"373","severity":1,"message":"397","line":34,"column":9,"nodeType":"375","messageId":"376","endLine":34,"endColumn":20},{"ruleId":"377","severity":1,"message":"398","line":84,"column":5,"nodeType":"375","endLine":84,"endColumn":14},{"ruleId":"363","replacedBy":"399"},{"ruleId":"365","replacedBy":"400"},{"ruleId":"373","severity":1,"message":"401","line":8,"column":8,"nodeType":"375","messageId":"376","endLine":8,"endColumn":16},{"ruleId":"373","severity":1,"message":"402","line":9,"column":8,"nodeType":"375","messageId":"376","endLine":9,"endColumn":20},{"ruleId":"373","severity":1,"message":"403","line":10,"column":8,"nodeType":"375","messageId":"376","endLine":10,"endColumn":18},{"ruleId":"373","severity":1,"message":"404","line":11,"column":8,"nodeType":"375","messageId":"376","endLine":11,"endColumn":21},{"ruleId":"373","severity":1,"message":"405","line":14,"column":8,"nodeType":"375","messageId":"376","endLine":14,"endColumn":13},{"ruleId":"373","severity":1,"message":"406","line":15,"column":10,"nodeType":"375","messageId":"376","endLine":15,"endColumn":16},{"ruleId":"373","severity":1,"message":"407","line":15,"column":24,"nodeType":"375","messageId":"376","endLine":15,"endColumn":38},{"ruleId":"373","severity":1,"message":"408","line":16,"column":10,"nodeType":"375","messageId":"376","endLine":16,"endColumn":38},{"ruleId":"373","severity":1,"message":"409","line":17,"column":10,"nodeType":"375","messageId":"376","endLine":17,"endColumn":26},{"ruleId":"373","severity":1,"message":"410","line":17,"column":28,"nodeType":"375","messageId":"376","endLine":17,"endColumn":42},{"ruleId":"373","severity":1,"message":"411","line":17,"column":55,"nodeType":"375","messageId":"376","endLine":17,"endColumn":71},{"ruleId":"373","severity":1,"message":"383","line":43,"column":10,"nodeType":"375","messageId":"376","endLine":43,"endColumn":16},{"ruleId":"377","severity":1,"message":"378","line":58,"column":37,"nodeType":"379","endLine":58,"endColumn":39,"suggestions":"412"},{"ruleId":"373","severity":1,"message":"385","line":33,"column":12,"nodeType":"375","messageId":"376","endLine":33,"endColumn":19},{"ruleId":"373","severity":1,"message":"413","line":35,"column":12,"nodeType":"375","messageId":"376","endLine":35,"endColumn":22},{"ruleId":"373","severity":1,"message":"414","line":35,"column":24,"nodeType":"375","messageId":"376","endLine":35,"endColumn":37},"no-native-reassign",["415"],"no-negated-in-lhs",["416"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["415"],["416"],"no-unused-vars","'makeStyles' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["417"],["415"],["416"],"'notify' is assigned a value but never used.",["418"],"'history' is assigned a value but never used.","'setValues' is assigned a value but never used.",["415"],["416"],"no-useless-computed-key","Unnecessarily computed property [\"topicName\"] found.","Property","unnecessarilyComputedProperty",{"range":"419","text":"420"},"Unnecessarily computed property [\"topicId\"] found.",{"range":"421","text":"422"},["423"],"'handleClick' is assigned a value but never used.","React Hook useEffect received a function whose dependencies are unknown. Pass an inline function instead.",["415"],["416"],"'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'DraftsIcon' is defined but never used.","'GroupWorkIcon' is defined but never used.","'Input' is defined but never used.","'Avatar' is defined but never used.","'ListItemAvatar' is defined but never used.","'SET_BACKGROUND_COLOR_PRIMARY' is defined but never used.","'changeListToText' is defined but never used.","'formatDateTime' is defined but never used.","'changeListMember' is defined but never used.",["424"],"'saveChange' is assigned a value but never used.","'setSaveChange' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"425","fix":"426"},{"desc":"425","fix":"427"},[2245,2258],"\"topicName\"",[2284,2295],"\"topicId\"",{"desc":"425","fix":"428"},{"desc":"425","fix":"429"},"Update the dependencies array to be: [fetchData]",{"range":"430","text":"431"},{"range":"432","text":"431"},{"range":"433","text":"431"},{"range":"434","text":"431"},[1489,1491],"[fetchData]",[1544,1546],[2460,2462],[1988,1990]]