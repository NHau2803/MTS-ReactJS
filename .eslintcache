[{"F:\\MTS-ReactJs\\mts-v2\\src\\index.js":"1","F:\\MTS-ReactJs\\mts-v2\\src\\reportWebVitals.js":"2","F:\\MTS-ReactJs\\mts-v2\\src\\components\\Header\\index.jsx":"3","F:\\MTS-ReactJs\\mts-v2\\src\\components\\NotFound\\index.jsx":"4","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\index.jsx":"5","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Home\\index.jsx":"6","F:\\MTS-ReactJs\\mts-v2\\src\\App\\App.js":"7","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\AddEdit\\index.jsx":"8","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\Table\\index.jsx":"9","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\index.jsx":"10","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\StudentSide.jsx":"11","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\AccountSide.jsx":"12","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\HomeSide.jsx":"13","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TeamSide.jsx":"14","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TeacherSide.jsx":"15","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TopicSide.jsx":"16","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\NotiProfileSide.jsx":"17","F:\\MTS-ReactJs\\mts-v2\\src\\components\\Loader\\index.jsx":"18","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\Info\\index.jsx":"19","F:\\MTS-ReactJs\\mts-v2\\src\\utils\\converter.js":"20","F:\\MTS-ReactJs\\mts-v2\\src\\api\\studentApi.js":"21","F:\\MTS-ReactJs\\mts-v2\\src\\api\\handleApi.js":"22","F:\\MTS-ReactJs\\mts-v2\\src\\api\\urlApi.js":"23","F:\\MTS-ReactJs\\mts-v2\\src\\constant\\color.js":"24","F:\\MTS-ReactJs\\mts-v2\\src\\constant\\dataDemo.js":"25","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Login\\index.jsx":"26","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\pages\\Table\\index.jsx":"27","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Input\\index.jsx":"28","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Button\\index.jsx":"29","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Use\\useTable.jsx":"30","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Notification\\index.jsx":"31","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Popup\\index.jsx":"32","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\ConfirmDialog\\index.jsx":"33","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\ButtonIcon\\index.jsx":"34","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Use\\useForm.jsx":"35","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\RadioGroup\\index.jsx":"36","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\DatePicker\\index.jsx":"37","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Select\\index.jsx":"38","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\index.jsx":"39","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\Info\\index.jsx":"40","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\Table\\index.jsx":"41","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\AddEdit\\index.jsx":"42","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Checkbox\\index.jsx":"43","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\index.jsx":"44","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\pages\\AddEdit\\index.jsx":"45","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\components\\Deadline\\index.jsx":"46","F:\\MTS-ReactJs\\mts-v2\\src\\app\\App.js":"47","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\index.jsx":"48","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\AddEdit\\index.jsx":"49","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\Table\\index.jsx":"50","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBarForUser\\index.jsx":"51","F:\\MTS-ReactJs\\mts-v2\\src\\routes\\User\\index.jsx":"52","F:\\MTS-ReactJs\\mts-v2\\src\\routes\\Admin\\index.jsx":"53","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\Account\\index.jsx":"54"},{"size":478,"mtime":1612624921304,"results":"55","hashOfConfig":"56"},{"size":362,"mtime":499162500000,"results":"57","hashOfConfig":"56"},{"size":4694,"mtime":1612628742570,"results":"58","hashOfConfig":"56"},{"size":350,"mtime":1611891067957,"results":"59","hashOfConfig":"56"},{"size":970,"mtime":1612624896896,"results":"60","hashOfConfig":"56"},{"size":336,"mtime":1611927046554,"results":"61","hashOfConfig":"56"},{"size":875,"mtime":1612628540611,"results":"62","hashOfConfig":"56"},{"size":10625,"mtime":1612605820882,"results":"63","hashOfConfig":"56"},{"size":7162,"mtime":1612621567118,"results":"64","hashOfConfig":"56"},{"size":652,"mtime":1612541712194,"results":"65","hashOfConfig":"56"},{"size":2674,"mtime":1612541807444,"results":"66","hashOfConfig":"56"},{"size":2523,"mtime":1612541736108,"results":"67","hashOfConfig":"56"},{"size":715,"mtime":1612541764515,"results":"68","hashOfConfig":"56"},{"size":2570,"mtime":1612541841275,"results":"69","hashOfConfig":"56"},{"size":2565,"mtime":1612541817980,"results":"70","hashOfConfig":"56"},{"size":2627,"mtime":1612541853376,"results":"71","hashOfConfig":"56"},{"size":4676,"mtime":1611852677402,"results":"72","hashOfConfig":"56"},{"size":791,"mtime":1612170899960,"results":"73","hashOfConfig":"56"},{"size":3766,"mtime":1612601494493,"results":"74","hashOfConfig":"56"},{"size":318,"mtime":1612531312120,"results":"75","hashOfConfig":"56"},{"size":1437,"mtime":1612284111988,"results":"76","hashOfConfig":"56"},{"size":248,"mtime":1612279113266,"results":"77","hashOfConfig":"56"},{"size":149,"mtime":1612221134844,"results":"78","hashOfConfig":"56"},{"size":1128,"mtime":1612343843839,"results":"79","hashOfConfig":"56"},{"size":15186,"mtime":1612625922609,"results":"80","hashOfConfig":"56"},{"size":3773,"mtime":1612627176213,"results":"81","hashOfConfig":"56"},{"size":7044,"mtime":1612619618515,"results":"82","hashOfConfig":"56"},{"size":686,"mtime":1612605330078,"results":"83","hashOfConfig":"56"},{"size":829,"mtime":1612542390548,"results":"84","hashOfConfig":"56"},{"size":3920,"mtime":1612540493855,"results":"85","hashOfConfig":"56"},{"size":1001,"mtime":1612176107875,"results":"86","hashOfConfig":"56"},{"size":1338,"mtime":1612176868306,"results":"87","hashOfConfig":"56"},{"size":1522,"mtime":1612183677279,"results":"88","hashOfConfig":"56"},{"size":622,"mtime":1612542376077,"results":"89","hashOfConfig":"56"},{"size":1518,"mtime":1612542548133,"results":"90","hashOfConfig":"56"},{"size":1231,"mtime":1612020005178,"results":"91","hashOfConfig":"56"},{"size":1291,"mtime":1612621346307,"results":"92","hashOfConfig":"56"},{"size":1267,"mtime":1612181670933,"results":"93","hashOfConfig":"56"},{"size":968,"mtime":1612624903112,"results":"94","hashOfConfig":"56"},{"size":4371,"mtime":1612603870539,"results":"95","hashOfConfig":"56"},{"size":7259,"mtime":1612604547498,"results":"96","hashOfConfig":"56"},{"size":11562,"mtime":1612606624310,"results":"97","hashOfConfig":"56"},{"size":935,"mtime":1612604996084,"results":"98","hashOfConfig":"56"},{"size":826,"mtime":1612624903112,"results":"99","hashOfConfig":"56"},{"size":6470,"mtime":1612623721185,"results":"100","hashOfConfig":"56"},{"size":4467,"mtime":1612623439349,"results":"101","hashOfConfig":"56"},{"size":875,"mtime":1612628540611,"results":"102","hashOfConfig":"56"},{"size":812,"mtime":1612625426410,"results":"103","hashOfConfig":"56"},{"size":4950,"mtime":1612625299063,"results":"104","hashOfConfig":"56"},{"size":6714,"mtime":1612625955795,"results":"105","hashOfConfig":"56"},{"size":2785,"mtime":1612632424724,"results":"106","hashOfConfig":"56"},{"size":1449,"mtime":1612632440011,"results":"107","hashOfConfig":"56"},{"size":1336,"mtime":1612628586565,"results":"108","hashOfConfig":"56"},{"size":5321,"mtime":1612632288621,"results":"109","hashOfConfig":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3c2w8d",{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"114"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"114"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"114"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"114"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"114"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"114"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"114"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"114"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"114"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"114"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"114"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"114"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"114"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\MTS-ReactJs\\mts-v2\\src\\index.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\reportWebVitals.js",[],["232","233"],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\Header\\index.jsx",["234"],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\NotFound\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Home\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\App\\App.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\AddEdit\\index.jsx",["235","236","237","238"],"import React, { useState, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { FormGroup, FormLabel, Grid, makeStyles, } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\nimport Input from 'custom-fields/Input';\r\nimport RadioGroup from 'custom-fields/RadioGroup';\r\nimport DatePicker from 'custom-fields/DatePicker';\r\nimport Select from 'custom-fields/Select';\r\nimport { useForm } from 'custom-fields/Use/useForm';\r\nimport studentApi from 'api/studentApi';\r\nimport { FACULTY_LIST } from 'constant/dataDemo';\r\nimport { getNameFromFullName } from 'utils/converter';\r\nimport { SET_BACKGROUND_COLOR_PRIMARY_DARK } from 'constant/color';\r\nimport Button from 'custom-fields/Button';\r\nimport Checkbox from 'custom-fields/Checkbox';\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: \"5rem auto 1rem auto\",\r\n        flexGrow: 1,\r\n    },\r\n   \r\n    icon: {\r\n        fontSize: theme.spacing(10),\r\n    },\r\n    grid: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n    },\r\n    gridLeft: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    gridRight: {\r\n        padding: theme.spacing(2)\r\n    },\r\n    gridItem: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    formGroup: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        //background: \"red\",\r\n    },\r\n   \r\n    \r\n}));\r\n\r\nconst genderItems = [\r\n    { id: 'male', title: 'Male' },\r\n    { id: 'female', title: 'Female' },\r\n]\r\n\r\nconst initialFValuesDefault = {\r\n    id: 0,\r\n    code: '',\r\n    name: '',\r\n    gender: 'male',\r\n    birthday: new Date('2001-01-01T12:00:00'),\r\n    tickDefaultEmail: true,\r\n    email: '',\r\n    phone: '',\r\n    facultyId: '',\r\n    username: '',\r\n    tickDefaultUsername: true,\r\n    password: '',\r\n    tickDefaultPassword: true\r\n}\r\n\r\n// async function doSomething() {\r\n//     let result = await studentApi.find(39);\r\n//     console.log(result);\r\n//     return result;\r\n// }\r\n\r\n// doSomething();\r\n\r\nexport default function AddEditPage(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const { studentId } = useParams();\r\n\r\n  //  const [student, setStudent] = useState([]);\r\n\r\n    const isAddMode = !studentId;\r\n\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('code' in fieldValues)\r\n            temp.code = fieldValues.code ? \"\" : \"This field is required.\"\r\n        if ('name' in fieldValues)\r\n            temp.name = fieldValues.name ? \"\" : \"This field is required.\"\r\n        if ('email' in fieldValues)\r\n            temp.email = (/$^|.+@.+..+/).test(fieldValues.email) ? \"\" : \"Email is not valid.\"\r\n        if ('phone' in fieldValues)\r\n            temp.phone = fieldValues.phone ? \"\" : \"This field is required.\"\r\n        if ('facultyId' in fieldValues)\r\n            temp.facultyId = fieldValues.facultyId.length !== 0 ? \"\" : \"This field is required.\"\r\n        if ('username' in fieldValues)\r\n            temp.username = fieldValues.username ? \"\" : \"This field is required.\"\r\n        if ('password' in fieldValues)\r\n            temp.password = fieldValues.password ? (fieldValues.password.length > 8 ? \"\" : \"Password must be geater than 8\") : \"This field is required\"\r\n\r\n        setErrors({ ...temp })\r\n\r\n        if (fieldValues === values)\r\n            return Object.values(temp).every(x => x === \"\")\r\n    }\r\n\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    } = useForm(initialFValuesDefault, isAddMode, true, validate);\r\n\r\n    const handleSubmit = e => {\r\n        //add or update \r\n        e.preventDefault();\r\n        const studentObject = {\r\n            code: values.code,\r\n            name: values.name,\r\n            gender: values.gender.toUpperCase(),\r\n            birthday:values.birthday.toISOString(),\r\n            email: values.email,\r\n            phone: values.phone,\r\n            facultyId: Number(values.facultyId),\r\n            username: values.username,\r\n            password: values.password,\r\n        }\r\n\r\n        if(isAddMode){\r\n            \r\n            console.log(studentObject);\r\n            //studentApi.create(studentObject);\r\n        }else{\r\n\r\n            console.log(studentObject);\r\n           // studentApi.create(studentNew);\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n        <FormGroup onSubmit={handleSubmit}>\r\n            <FormLabel>\r\n                {isAddMode \r\n                ? <h1>Create a Student</h1>\r\n                : <h1>Update Student</h1>\r\n                }\r\n            </FormLabel>\r\n            \r\n            <Grid container className={classes.grid}>\r\n            \r\n                <Grid item xs={12} sm={3} className={classes.gridLeft}>\r\n                    <FormGroup>\r\n                    <Input\r\n                        name=\"code\"\r\n                        label=\"Code\"\r\n                        placeholder=\"Ex: 197CT11122\"\r\n                        value={values.code}\r\n                        onChange={handleInputChange}\r\n                        error={errors.code}\r\n                    />\r\n                    <br/>\r\n                    <Input\r\n                        name=\"name\"\r\n                        label=\"Name\"\r\n                        placeholder=\"Ex: Nguyễn Văn An\"\r\n                        value={values.name}\r\n                        onChange={handleInputChange}\r\n                        error={errors.name}\r\n                    />\r\n                    <br/>\r\n                    <RadioGroup\r\n                        name=\"gender\"\r\n                        label=\"Gender\"\r\n                        value={values.gender}\r\n                        onChange={handleInputChange}\r\n                        items={genderItems}\r\n                    />\r\n                    <br/>\r\n                    <DatePicker\r\n                        name=\"birthday\"\r\n                        label=\"Birthday\"\r\n                        value={values.birthday}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <br/>\r\n                    <Input\r\n                        name=\"phone\"\r\n                        label=\"Phone\"\r\n                        placeholder=\"Ex: 0946111222\"\r\n                        value={values.phone}\r\n                        onChange={handleInputChange}\r\n                        error={errors.phone}\r\n                    />\r\n                    <br/>\r\n                    </FormGroup>\r\n\r\n                </Grid>\r\n                <Grid item xs={12} sm={3} className={classes.gridRight}>\r\n                    <FormGroup>\r\n                     \r\n                    <Select\r\n                        name=\"facultyId\"\r\n                        label=\"Faculty\"\r\n                        value={values.facultyId}\r\n                        onChange={handleInputChange}\r\n                        options={FACULTY_LIST()}\r\n                        error={errors.facultyId}\r\n                    />\r\n                    <br/>\r\n                    <Input\r\n                        name=\"email\"\r\n                        label=\"Email\"\r\n                        placeholder=\"Ex: an.197CT11122@vanlanguni.vn\"\r\n                        value={values.tickDefaultEmail ? values.email = getNameFromFullName(values.name)+ \".\" + values.code + \"@vanlanguni.vn\" : values.email}\r\n                        onChange={handleInputChange}\r\n                        error={errors.email}\r\n                        disabled={values.tickDefaultEmail}\r\n                    />\r\n                    <Checkbox\r\n                        name=\"tickDefaultEmail\"\r\n                        label=\"Default\"\r\n                        value={values.tickDefaultEmail}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <Input\r\n                        name=\"username\"\r\n                        label=\"Username\"\r\n                        placeholder=\"Ex: an.197CT11122\"\r\n                        value={values.tickDefaultUsername ? values.username = getNameFromFullName(values.name)+ \".\" + values.code : values.username}\r\n                        onChange={handleInputChange}\r\n                        error={errors.username}\r\n                        disabled={values.tickDefaultUsername}\r\n                    />\r\n                    <Checkbox \r\n                        name=\"tickDefaultUsername\"\r\n                        label=\"Default\"\r\n                        value={values.tickDefaultUsername}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <Input\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        value={values.tickDefaultPassword ? values.password = values.code: values.password}\r\n                        onChange={handleInputChange}\r\n                        error={errors.password}\r\n                        disabled={values.tickDefaultPassword}\r\n                    \r\n                    />\r\n                    <Checkbox\r\n                        name=\"tickDefaultPassword\"\r\n                        label=\"Default\"\r\n                        value={values.tickDefaultPassword}\r\n                        onChange={handleInputChange}\r\n                    />\r\n\r\n                    {/* {isAddMode\r\n                    ? \"abc\"\r\n                    : <Select\r\n                        name=\"facultyId\"\r\n                        label=\"Faculty\"\r\n                        value={values.facultyId}\r\n                        onChange={handleInputChange}\r\n                        options={FACULTY_LIST()}\r\n                        error={errors.facultyId}\r\n                        />\r\n                    }   */}\r\n                    </FormGroup>\r\n                </Grid>\r\n            \r\n            </Grid>\r\n            <Grid item xs={12} className={classes.submit}>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        text={isAddMode ? \"Save\": \"Update\"} \r\n                        startIcon={isAddMode ? <SaveIcon />: <UpdateIcon />}\r\n                        onClick={handleSubmit}\r\n                        background = {SET_BACKGROUND_COLOR_PRIMARY_DARK}\r\n                    />\r\n                    <Button\r\n                    \r\n                        text=\"Reset\"\r\n                        color=\"default\"\r\n                        startIcon={<RefreshIcon />}\r\n                        onClick={resetForm} \r\n                    />\r\n            </Grid>\r\n            \r\n            </FormGroup>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\Table\\index.jsx",["239","240","241","242","243"],"import React, { useEffect, useState } from 'react'\r\nimport {makeStyles, TableBody, TableRow, TableCell, InputAdornment, Toolbar, FormLabel } from '@material-ui/core';\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport { Search } from '@material-ui/icons';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AssignmentIndIcon from '@material-ui/icons/AssignmentInd';\r\nimport useTable from 'custom-fields/Use/useTable';\r\nimport Input from 'custom-fields/Input';\r\nimport ButtonIcon from 'custom-fields/ButtonIcon';\r\nimport Popup from 'custom-fields/Popup';\r\nimport ConfirmDialog from 'custom-fields/ConfirmDialog';\r\nimport { STUDENT_LIST } from 'constant/dataDemo';\r\nimport Notification from 'custom-fields/Notification';\r\nimport studentApi from 'api/studentApi';\r\nimport { changeListToText } from 'utils/converter';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(1),\r\n    },\r\n    title: {\r\n        marginTop: theme.spacing(10),\r\n    },\r\n    tableCell: {\r\n        maxWidth: theme.spacing(35),\r\n    }\r\n}));\r\n\r\nconst headCells = [\r\n    { id: 'id', label: 'ID' },\r\n    { id: 'code', label: 'Code' },\r\n    { id: 'name', label: 'Name' },\r\n    { id: 'facultyName', label: 'Faculty' },\r\n    { id: 'teamNames', label: 'Team ' },\r\n    { id: 'topicNames', label: 'Topic' },\r\n    { id: 'status', label: 'Status' },\r\n    { id: 'action', label: 'Action' },\r\n   \r\n]\r\n\r\nexport default function TablePage(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const {history} = props;\r\n\r\n    const [records, setRecords] = useState(STUDENT_LIST);\r\n\r\n    const [filterFn, setFilterFn] = useState({ fn: items => { return items; } });\r\n\r\n    const [openPopup, setOpenPopup] = useState(false)\r\n\r\n    const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' })\r\n\r\n    const [confirmDialog, setConfirmDialog] = useState({ isOpen: false, title: '', subTitle: '' })\r\n\r\n    //console.log(history.location.pathname); <=> useRouteMatch()???\r\n\r\n    // Define the function that fetches the data from API\r\n    // const fetchData = async () => {\r\n        \r\n    //     studentApi.search().then(res=>{\r\n    //         setRecords(res);\r\n    //     });\r\n    \r\n    // };\r\n\r\n    // // Trigger the fetchData after the initial render by using the useEffect hook\r\n    // useEffect(() => { fetchData(); }, []);\r\n\r\n    const handleSearch = e => {\r\n        let target = e.target;\r\n\r\n        setFilterFn({\r\n            fn: items => {\r\n                if (target.value === \"\")\r\n                    return items;\r\n                else\r\n                    //console.log(items);\r\n                    return items.filter(\r\n                        x => x.code.toLowerCase().includes(target.value.toLowerCase())\r\n                    );\r\n            }\r\n        })\r\n    };\r\n\r\n    const onDelete = id => {\r\n        setConfirmDialog({\r\n            ...confirmDialog,\r\n            isOpen: false\r\n        })\r\n        \r\n        studentApi.delete(id);\r\n        setNotify({\r\n            isOpen: true,\r\n            message: 'Deleted Successfully',\r\n            type: 'error'\r\n        })\r\n    }\r\n\r\n    const {\r\n        TblContainer,\r\n        TblHead,\r\n        TblPagination,\r\n        recordsAfterPagingAndSorting\r\n    } = useTable(records, headCells, filterFn);\r\n\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <FormLabel>\r\n                <h1 className={classes.title}>Student List</h1>\r\n            </FormLabel>\r\n            \r\n            <Toolbar>\r\n                <Input\r\n                    label=\"Search For Code\"\r\n                    className={classes.searchInput}\r\n                    InputProps={{\r\n                        startAdornment: (<InputAdornment position=\"start\">\r\n                            <Search />\r\n                        </InputAdornment>)\r\n                    }}\r\n                    onChange={handleSearch}\r\n                />\r\n            </Toolbar>\r\n\r\n             <TblContainer>\r\n                    <TblHead />\r\n                    <TableBody>\r\n                        {\r\n                            recordsAfterPagingAndSorting().map(item =>\r\n                                (<TableRow key={item.id}>\r\n                                    <TableCell>{item.id}</TableCell>\r\n                                    <TableCell>{item.code}</TableCell>\r\n                                    <TableCell>{item.name}</TableCell>\r\n                                    <TableCell>{item.facultyName}</TableCell>\r\n                                    <TableCell className={classes.tableCell}>{changeListToText(item.teamNames)}</TableCell>\r\n                                    <TableCell className={classes.tableCell}>{changeListToText(item.topicNames)}</TableCell>\r\n                                    <TableCell>{item.status}</TableCell>\r\n                                    <TableCell>\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<EditOutlinedIcon fontSize=\"small\" />}   \r\n                                            onClick= {() => history.push(`${history.location.pathname}/${item.id}`)} \r\n                                        />\r\n\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<DeleteIcon fontSize=\"small\" />}    \r\n                                           // onClick= {() => history.push(`/student/delete/${item.id}`)}\r\n                                           onClick={() => {\r\n                                            setConfirmDialog({\r\n                                                isOpen: true,\r\n                                                title: 'Are you sure to delete this student?',\r\n                                                subTitle: \"You can't undo this operation\",\r\n                                                onConfirm: () => { onDelete(item.id) }\r\n                                            },)\r\n                                        }}>\r\n                                        </ButtonIcon>\r\n\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<AssignmentIndIcon fontSize=\"small\" />}   \r\n                                            onClick= {() => history.push(`${history.location.pathname}/${item.id}/info`)} \r\n                                        />\r\n                                        \r\n                                    </TableCell>\r\n                                </TableRow>)\r\n                            )\r\n                        }\r\n                    </TableBody>\r\n                </TblContainer>\r\n                <TblPagination />\r\n\r\n            \r\n                <Notification\r\n                    notify={notify}\r\n                    setNotify={setNotify}\r\n                />\r\n                <ConfirmDialog\r\n                    confirmDialog={confirmDialog}\r\n                    setConfirmDialog={setConfirmDialog}\r\n                />\r\n                \r\n        </div>\r\n    );\r\n}","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\StudentSide.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\AccountSide.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\HomeSide.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TeamSide.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TeacherSide.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TopicSide.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\NotiProfileSide.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\Loader\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\Info\\index.jsx",["244","245","246","247"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Avatar, Grid, ListItem, ListItemAvatar, ListItemText, Paper } from \"@material-ui/core\";\r\nimport DateRangeIcon from '@material-ui/icons/DateRange';\r\nimport PhoneIphoneIcon from '@material-ui/icons/PhoneIphone';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport ClassIcon from '@material-ui/icons/Class';\r\nimport ContactsIcon from '@material-ui/icons/Contacts';\r\nimport WcIcon from '@material-ui/icons/Wc';\r\nimport { COLOR_PRIMARY, COLOR_WHITE, SET_BACKGROUND_COLOR_PRIMARY } from \"constant/color\";\r\nimport studentApi from \"api/studentApi\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: \"5rem auto 1rem auto\",\r\n        flexGrow: 1,\r\n    },\r\n    grid: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        padding: theme.spacing(1),\r\n       \r\n    },\r\n    pager:{\r\n        padding: theme.spacing(0.5),\r\n    },\r\n    title:{\r\n        background: COLOR_PRIMARY,\r\n        color: COLOR_WHITE,\r\n        borderRadius: theme.spacing(0.5)\r\n    },\r\n    left: {\r\n        textAlign: \"left\",\r\n        paddingLeft : \"10%\",\r\n    },\r\n    right: {\r\n        textAlign: \"left\",\r\n        paddingLeft : \"50%\",\r\n     \r\n    }\r\n}));\r\nexport default function InfoPage() {\r\n\r\n    const classes = useStyles();\r\n\r\n    const { studentId } = useParams();\r\n\r\n    const [studentInfo, setStudentInfo] = useState({});\r\n\r\n    // const fetchData = async () => {\r\n    //     studentApi.info(studentId).then(res=>{\r\n    //         console.log(studentId)\r\n    //         console.log(res)\r\n    //         setStudentInfo(res);\r\n    //     });\r\n    \r\n    // };\r\n\r\n    // // Trigger the fetchData after the initial render by using the useEffect hook\r\n    // useEffect(() => { fetchData(); }, []);\r\n    \r\n    const renderRow = (icon, title, info) =>{\r\n        return(\r\n            <ListItem className={classes.left}>\r\n                <ListItemAvatar>\r\n                    <Avatar style={SET_BACKGROUND_COLOR_PRIMARY}>\r\n                    {icon}\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={title} secondary={info} />\r\n            </ListItem>\r\n        );\r\n    }\r\n\r\n    const renderRowRight = (icon, title, info) =>{\r\n        return(\r\n            <ListItem className={classes.right}>\r\n                <ListItemAvatar>\r\n                    <Avatar style={SET_BACKGROUND_COLOR_PRIMARY}>\r\n                    {icon}\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={title} secondary={info} />\r\n            </ListItem>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n        <Grid container className={classes.grid}>\r\n            <Grid item xs={12} sm={4}>\r\n                <Paper elevation={4} className={classes.pager}>\r\n                    \r\n                    <h1 className={classes.title}>Student Info</h1>\r\n                    {renderRow(<ContactsIcon/>, \"Code\", studentInfo.code)}\r\n                    {renderRowRight(<PersonIcon />, \"Name\", studentInfo.name)}\r\n                    {renderRow(<WcIcon />, \"Gender\", studentInfo.gender)}\r\n                    {renderRowRight(<DateRangeIcon />, \"Birthday\", studentInfo.birthday)}\r\n                    {renderRow(<EmailIcon />, \"Email\", studentInfo.email)}\r\n                    {renderRowRight(<PhoneIphoneIcon />, \"Phone\", studentInfo.phone)}\r\n                    {renderRow(<ClassIcon />, \"Faculty\", studentInfo.facultyName)}\r\n                </Paper>\r\n                \r\n            </Grid>\r\n        </Grid>\r\n        </div>\r\n        \r\n    );\r\n}","F:\\MTS-ReactJs\\mts-v2\\src\\utils\\converter.js",["248"],"export const getNameFromFullName = (fullName) => {\r\n    const fullNameArr = fullName.split(\" \");\r\n    return fullNameArr[fullNameArr.length - 1];\r\n   \r\n}\r\n\r\n//change date => string / fix backend\r\n\r\nexport const changeListToText = (list) => {\r\n    let str = \"\"\r\n    list.map(i => {str += \" |\" +i} );\r\n    return str;\r\n}","F:\\MTS-ReactJs\\mts-v2\\src\\api\\studentApi.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\handleApi.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\urlApi.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\constant\\color.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\constant\\dataDemo.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Login\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\pages\\Table\\index.jsx",["249","250","251","252","253"],"import React, { useEffect, useState } from 'react'\r\nimport {makeStyles, TableBody, TableRow, TableCell, Toolbar, FormLabel, InputAdornment } from '@material-ui/core';\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport { Search } from '@material-ui/icons';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport ButtonIcon from 'custom-fields/ButtonIcon';\r\nimport ConfirmDialog from 'custom-fields/ConfirmDialog';\r\nimport Popup from 'custom-fields/Popup';\r\nimport { TOPIC_LIST } from 'constant/dataDemo';\r\nimport studentApi from 'api/studentApi';\r\nimport useTable from 'custom-fields/Use/useTable';\r\nimport Input from 'custom-fields/Input';\r\nimport { changeListToText } from 'utils/converter';\r\nimport Notification from 'custom-fields/Notification';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(1),\r\n    },\r\n    title: {\r\n        marginTop: theme.spacing(10),\r\n    },\r\n    tableCell: {\r\n        maxWidth: theme.spacing(35),\r\n    }\r\n}));\r\n\r\nconst headCells = [\r\n    { id: 'id', label: 'ID' },\r\n    { id: 'name', label: 'Name' },\r\n    { id: 'teamNames', label: 'Team ' },\r\n    { id: 'startTime', label: 'Start Time' },\r\n    { id: 'endTime', label: 'End Time' },\r\n    { id: 'teacherName', label: 'Teacher' },\r\n    { id: 'action', label: 'Action' },\r\n   \r\n]\r\n\r\nexport default function TablePage(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const {history} = props;\r\n\r\n    const [records, setRecords] = useState(TOPIC_LIST);\r\n\r\n    const [filterFn, setFilterFn] = useState({ fn: items => { return items; } });\r\n\r\n    const [openPopup, setOpenPopup] = useState(false)\r\n\r\n    const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' })\r\n\r\n    const [confirmDialog, setConfirmDialog] = useState({ isOpen: false, title: '', subTitle: '' })\r\n\r\n    //console.log(history.location.pathname); <=> useRouteMatch()???\r\n\r\n    // // Define the function that fetches the data from API\r\n    // const fetchData = async () => {\r\n        \r\n    //     studentApi.search().then(res=>{\r\n    //         setRecords(res);\r\n    //     });\r\n    \r\n    // };\r\n\r\n    // // Trigger the fetchData after the initial render by using the useEffect hook\r\n    // useEffect(() => { fetchData(); }, []);\r\n\r\n    const handleSearch = e => {\r\n        let target = e.target;\r\n\r\n        setFilterFn({\r\n            fn: items => {\r\n                if (target.value === \"\")\r\n                    return items;\r\n                else\r\n                    //console.log(items);\r\n                    return items.filter(\r\n                        x => x.name.toLowerCase().includes(target.value.toLowerCase())\r\n                    );\r\n            }\r\n        })\r\n    };\r\n\r\n    const onDelete = id => {\r\n        setConfirmDialog({\r\n            ...confirmDialog,\r\n            isOpen: false\r\n        })\r\n        \r\n        studentApi.delete(id);\r\n        setNotify({\r\n            isOpen: true,\r\n            message: 'Deleted Successfully',\r\n            type: 'error'\r\n        })\r\n    }\r\n\r\n    const {\r\n        TblContainer,\r\n        TblHead,\r\n        TblPagination,\r\n        recordsAfterPagingAndSorting\r\n    } = useTable(records, headCells, filterFn);\r\n\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <FormLabel>\r\n                <h1 className={classes.title}>Topic List</h1>\r\n            </FormLabel>\r\n            \r\n            <Toolbar>\r\n                <Input\r\n                    label=\"Search For Topic Name\"\r\n                    className={classes.searchInput}\r\n                    InputProps={{\r\n                        startAdornment: (<InputAdornment position=\"start\">\r\n                            <Search />\r\n                        </InputAdornment>)\r\n                    }}\r\n                    onChange={handleSearch}\r\n                />\r\n            </Toolbar>\r\n\r\n             <TblContainer>\r\n                    <TblHead />\r\n                    <TableBody>\r\n                        {\r\n                            recordsAfterPagingAndSorting().map(item =>\r\n                                (<TableRow key={item.id}>\r\n                                    <TableCell>{item.id}</TableCell>\r\n                                    <TableCell>{item.name}</TableCell>\r\n                                    <TableCell className={classes.tableCell}>{changeListToText(item.teamNames)}</TableCell>\r\n                                    <TableCell>{new Date(item.startTime).toLocaleString()}</TableCell>\r\n                                    <TableCell>{new Date(item.endTime).toLocaleString()}</TableCell>\r\n                                    <TableCell>{item.teacherName}</TableCell>\r\n                                    <TableCell>\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<EditOutlinedIcon fontSize=\"small\" />}   \r\n                                            onClick= {() => history.push(`${history.location.pathname}/${item.id}`)} \r\n                                        />\r\n\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<DeleteIcon fontSize=\"small\" />}    \r\n                                           // onClick= {() => history.push(`/student/delete/${item.id}`)}\r\n                                           onClick={() => {\r\n                                            setConfirmDialog({\r\n                                                isOpen: true,\r\n                                                title: 'Are you sure to delete this student?',\r\n                                                subTitle: \"You can't undo this operation\",\r\n                                                onConfirm: () => { onDelete(item.id) }\r\n                                            },)\r\n                                        }}>\r\n                                        </ButtonIcon>\r\n\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<VisibilityIcon fontSize=\"small\" />}   \r\n                                            onClick= {() => history.push(`${history.location.pathname}/${item.id}/s`)} \r\n                                        />\r\n                                        \r\n                                    </TableCell>\r\n                                </TableRow>)\r\n                            )\r\n                        }\r\n                    </TableBody>\r\n                </TblContainer>\r\n                <TblPagination />\r\n\r\n                <Notification\r\n                    notify={notify}\r\n                    setNotify={setNotify}\r\n                />\r\n                <ConfirmDialog\r\n                    confirmDialog={confirmDialog}\r\n                    setConfirmDialog={setConfirmDialog}\r\n                />\r\n                \r\n        </div>\r\n    );\r\n}","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Input\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Button\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Use\\useTable.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Notification\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Popup\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\ConfirmDialog\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\ButtonIcon\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Use\\useForm.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\RadioGroup\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\DatePicker\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Select\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\Info\\index.jsx",["254","255","256"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Avatar, Grid, ListItem, ListItemAvatar, ListItemText, Paper } from \"@material-ui/core\";\r\nimport DateRangeIcon from '@material-ui/icons/DateRange';\r\nimport PhoneIphoneIcon from '@material-ui/icons/PhoneIphone';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport ClassIcon from '@material-ui/icons/Class';\r\nimport ContactsIcon from '@material-ui/icons/Contacts';\r\nimport WcIcon from '@material-ui/icons/Wc';\r\nimport WorkOutlineIcon from '@material-ui/icons/WorkOutline';\r\nimport SchoolIcon from '@material-ui/icons/School';\r\nimport { COLOR_PRIMARY, COLOR_WHITE, SET_BACKGROUND_COLOR_PRIMARY } from \"constant/color\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: \"5rem auto 1rem auto\",\r\n        flexGrow: 1,\r\n    },\r\n    grid: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        padding: theme.spacing(1),\r\n       \r\n    },\r\n    pager:{\r\n        padding: theme.spacing(0.5),\r\n    },\r\n    title:{\r\n        background: COLOR_PRIMARY,\r\n        color: COLOR_WHITE,\r\n        borderRadius: theme.spacing(0.5)\r\n    },\r\n    left: {\r\n        textAlign: \"left\",\r\n        paddingLeft : \"10%\",\r\n    },\r\n    right: {\r\n        textAlign: \"left\",\r\n        paddingLeft : \"50%\",\r\n     \r\n    }\r\n}));\r\n\r\nexport const TeacherInfo = {\r\n    id: 1,\r\n    code: '180BC12576',\r\n    name: 'Le Cong Hieu',\r\n    gender: 'male',\r\n    birthday: '1/18/1980',\r\n    email: '197sv1@vn.vn',\r\n    phone: '0909090909',\r\n    academyName: \"Thạch Sĩ\",\r\n    positionName:\"Giảng Viên\",\r\n    facultyName: \"Công Nghệ Thông Tin\"\r\n}\r\n\r\n\r\nexport default function InfoPage() {\r\n\r\n    const classes = useStyles();\r\n\r\n    const { studentId } = useParams();\r\n\r\n    const [teacherInfo, setteacherInfo] = useState(TeacherInfo);\r\n\r\n    // const fetchData = async () => {\r\n    //     studentApi.info(studentId).then(res=>{\r\n    //         console.log(studentId)\r\n    //         console.log(res)\r\n    //         setteacherInfo(res);\r\n    //     });\r\n    \r\n    // };\r\n\r\n    // // Trigger the fetchData after the initial render by using the useEffect hook\r\n    // useEffect(() => { fetchData(); }, []);\r\n    \r\n    const renderRow = (icon, title, info) =>{\r\n        return(\r\n            <ListItem className={classes.left}>\r\n                <ListItemAvatar>\r\n                    <Avatar style={SET_BACKGROUND_COLOR_PRIMARY}>\r\n                    {icon}\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={title} secondary={info} />\r\n            </ListItem>\r\n        );\r\n    }\r\n\r\n    const renderRowRight = (icon, title, info) =>{\r\n        return(\r\n            <ListItem className={classes.right}>\r\n                <ListItemAvatar>\r\n                    <Avatar style={SET_BACKGROUND_COLOR_PRIMARY}>\r\n                    {icon}\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={title} secondary={info} />\r\n            </ListItem>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n        <Grid container className={classes.grid}>\r\n            <Grid item xs={12} sm={4}>\r\n                <Paper elevation={4} className={classes.pager}>\r\n                    \r\n                    <h1 className={classes.title}>Teacher Info</h1>\r\n                    {renderRow(<ContactsIcon/>, \"Code\", teacherInfo.code)}\r\n                    {renderRowRight(<PersonIcon />, \"Name\", teacherInfo.name)}\r\n                    {renderRow(<WcIcon />, \"Gender\", teacherInfo.gender)}\r\n                    {renderRowRight(<DateRangeIcon />, \"Birthday\", teacherInfo.birthday)}\r\n                    {renderRow(<EmailIcon />, \"Email\", teacherInfo.email)}\r\n                    {renderRowRight(<PhoneIphoneIcon />, \"Phone\", teacherInfo.phone)}\r\n                    {renderRow(<SchoolIcon />, \"Academy\", teacherInfo.academyName)}\r\n                    {renderRowRight(<WorkOutlineIcon />, \"Position\", teacherInfo.positionName)}\r\n                    {renderRow(<ClassIcon />, \"Faculty\", teacherInfo.facultyName)}\r\n                    \r\n                </Paper>\r\n                \r\n            </Grid>\r\n        </Grid>\r\n        </div>\r\n        \r\n    );\r\n}","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\Table\\index.jsx",["257","258","259","260","261","262"],"import React, { useEffect, useState } from 'react'\r\nimport {makeStyles, TableBody, TableRow, TableCell, InputAdornment, Toolbar, FormLabel } from '@material-ui/core';\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport { Search } from '@material-ui/icons';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AssignmentIndIcon from '@material-ui/icons/AssignmentInd';\r\nimport useTable from 'custom-fields/Use/useTable';\r\nimport Input from 'custom-fields/Input';\r\nimport ButtonIcon from 'custom-fields/ButtonIcon';\r\nimport Popup from 'custom-fields/Popup';\r\nimport ConfirmDialog from 'custom-fields/ConfirmDialog';\r\nimport { STUDENT_LIST, TEACHER_LIST } from 'constant/dataDemo';\r\nimport Notification from 'custom-fields/Notification';\r\nimport studentApi from 'api/studentApi';\r\nimport { changeListToText } from 'utils/converter';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(1),\r\n    },\r\n    title: {\r\n        marginTop: theme.spacing(10),\r\n    },\r\n    tableCell: {\r\n        maxWidth: theme.spacing(35),\r\n    }\r\n}));\r\n\r\nconst headCells = [\r\n    { id: 'id', label: 'ID' },\r\n    { id: 'code', label: 'Code' },\r\n    { id: 'name', label: 'Name' },\r\n    { id: 'academyName', label: 'Academy' },\r\n    { id: 'positonName', label: 'Positon' },\r\n    { id: 'facultyName', label: 'Faculty' },\r\n    { id: 'topicNames', label: 'Topic' },\r\n    { id: 'status', label: 'Status' },\r\n    { id: 'action', label: 'Action' },\r\n   \r\n]\r\n\r\nexport default function TablePage(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const {history} = props;\r\n\r\n    const [records, setRecords] = useState(TEACHER_LIST);\r\n\r\n    const [filterFn, setFilterFn] = useState({ fn: items => { return items; } });\r\n\r\n    const [openPopup, setOpenPopup] = useState(false)\r\n\r\n    const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' })\r\n\r\n    const [confirmDialog, setConfirmDialog] = useState({ isOpen: false, title: '', subTitle: '' })\r\n\r\n    //console.log(history.location.pathname); <=> useRouteMatch()???\r\n\r\n    // Define the function that fetches the data from API\r\n    // const fetchData = async () => {\r\n        \r\n    //     studentApi.search().then(res=>{\r\n    //         setRecords(res);\r\n    //     });\r\n    \r\n    // };\r\n\r\n    // // Trigger the fetchData after the initial render by using the useEffect hook\r\n    // useEffect(() => { fetchData(); }, []);\r\n\r\n    const handleSearch = e => {\r\n        let target = e.target;\r\n\r\n        setFilterFn({\r\n            fn: items => {\r\n                if (target.value === \"\")\r\n                    return items;\r\n                else\r\n                    //console.log(items);\r\n                    return items.filter(\r\n                        x => x.code.toLowerCase().includes(target.value.toLowerCase())\r\n                    );\r\n            }\r\n        })\r\n    };\r\n\r\n    const onDelete = id => {\r\n        setConfirmDialog({\r\n            ...confirmDialog,\r\n            isOpen: false\r\n        })\r\n        \r\n        studentApi.delete(id);\r\n        setNotify({\r\n            isOpen: true,\r\n            message: 'Deleted Successfully',\r\n            type: 'error'\r\n        })\r\n    }\r\n\r\n    const {\r\n        TblContainer,\r\n        TblHead,\r\n        TblPagination,\r\n        recordsAfterPagingAndSorting\r\n    } = useTable(records, headCells, filterFn);\r\n\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <FormLabel>\r\n                <h1 className={classes.title}>Teacher List</h1>\r\n            </FormLabel>\r\n            \r\n            <Toolbar>\r\n                <Input\r\n                    label=\"Search For Code\"\r\n                    className={classes.searchInput}\r\n                    InputProps={{\r\n                        startAdornment: (<InputAdornment position=\"start\">\r\n                            <Search />\r\n                        </InputAdornment>)\r\n                    }}\r\n                    onChange={handleSearch}\r\n                />\r\n            </Toolbar>\r\n\r\n             <TblContainer>\r\n                    <TblHead />\r\n                    <TableBody>\r\n                        {\r\n                            recordsAfterPagingAndSorting().map(item =>\r\n                                (<TableRow key={item.id}>\r\n                                    <TableCell>{item.id}</TableCell>\r\n                                    <TableCell>{item.code}</TableCell>\r\n                                    <TableCell>{item.name}</TableCell>\r\n                                    <TableCell>{item.academyName}</TableCell>\r\n                                    <TableCell>{item.positonName}</TableCell>\r\n                                    <TableCell>{item.facultyName}</TableCell>\r\n                                    <TableCell className={classes.tableCell}>{changeListToText(item.topicNames)}</TableCell>\r\n                                    <TableCell>{item.status}</TableCell>\r\n                                    <TableCell>\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<EditOutlinedIcon fontSize=\"small\" />}   \r\n                                            onClick= {() => history.push(`${history.location.pathname}/${item.id}`)} \r\n                                        />\r\n\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<DeleteIcon fontSize=\"small\" />}    \r\n                                           // onClick= {() => history.push(`/student/delete/${item.id}`)}\r\n                                           onClick={() => {\r\n                                            setConfirmDialog({\r\n                                                isOpen: true,\r\n                                                title: 'Are you sure to delete this student?',\r\n                                                subTitle: \"You can't undo this operation\",\r\n                                                onConfirm: () => { onDelete(item.id) }\r\n                                            },)\r\n                                        }}>\r\n                                        </ButtonIcon>\r\n\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<AssignmentIndIcon fontSize=\"small\" />}   \r\n                                            onClick= {() => history.push(`${history.location.pathname}/${item.id}/info`)} \r\n                                        />\r\n                                        \r\n                                    </TableCell>\r\n                                </TableRow>)\r\n                            )\r\n                        }\r\n                    </TableBody>\r\n                </TblContainer>\r\n                <TblPagination />\r\n\r\n            \r\n                <Notification\r\n                    notify={notify}\r\n                    setNotify={setNotify}\r\n                />\r\n                <ConfirmDialog\r\n                    confirmDialog={confirmDialog}\r\n                    setConfirmDialog={setConfirmDialog}\r\n                />\r\n                \r\n        </div>\r\n    );\r\n}","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\AddEdit\\index.jsx",["263","264","265","266"],"import React, { useState, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { FormGroup, FormLabel, Grid, makeStyles, } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\nimport Input from 'custom-fields/Input';\r\nimport RadioGroup from 'custom-fields/RadioGroup';\r\nimport DatePicker from 'custom-fields/DatePicker';\r\nimport Select from 'custom-fields/Select';\r\nimport { useForm } from 'custom-fields/Use/useForm';\r\nimport studentApi from 'api/studentApi';\r\nimport { FACULTY_LIST } from 'constant/dataDemo';\r\nimport { getNameFromFullName } from 'utils/converter';\r\nimport { SET_BACKGROUND_COLOR_PRIMARY_DARK } from 'constant/color';\r\nimport Button from 'custom-fields/Button';\r\nimport Checkbox from 'custom-fields/Checkbox';\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: \"5rem auto 1rem auto\",\r\n        flexGrow: 1,\r\n    },\r\n   \r\n    icon: {\r\n        fontSize: theme.spacing(10),\r\n    },\r\n    grid: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n    },\r\n    gridLeft: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    gridRight: {\r\n        padding: theme.spacing(2)\r\n    },\r\n    gridItem: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    formGroup: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        //background: \"red\",\r\n    },\r\n   \r\n    \r\n}));\r\n\r\nconst genderItems = [\r\n    { id: 'male', title: 'Male' },\r\n    { id: 'female', title: 'Female' },\r\n]\r\n\r\nconst initialFValuesDefault = {\r\n    id: 0,\r\n    code: '',\r\n    name: '',\r\n    gender: 'male',\r\n    birthday: new Date('2001-01-01T12:00:00'),\r\n    tickDefaultEmail: true,\r\n    email: '',\r\n    phone: '',\r\n    academyId: '',\r\n    positionId: '',\r\n    facultyId: '',\r\n    username: '',\r\n    tickDefaultUsername: true,\r\n    password: '',\r\n    tickDefaultPassword: true\r\n}\r\n\r\nexport default function AddEditPage(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const { studentId } = useParams();\r\n\r\n  //  const [student, setStudent] = useState([]);\r\n\r\n    const isAddMode = !studentId;\r\n\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('code' in fieldValues)\r\n            temp.code = fieldValues.code ? \"\" : \"This field is required.\"\r\n        if ('name' in fieldValues)\r\n            temp.name = fieldValues.name ? \"\" : \"This field is required.\"\r\n        if ('email' in fieldValues)\r\n            temp.email = (/$^|.+@.+..+/).test(fieldValues.email) ? \"\" : \"Email is not valid.\"\r\n        if ('phone' in fieldValues)\r\n            temp.phone = fieldValues.phone ? \"\" : \"This field is required.\"\r\n        if ('academyId' in fieldValues)\r\n        temp.academyId = fieldValues.academyId.length !== 0 ? \"\" : \"This field is required.\"\r\n        if ('positionId' in fieldValues)\r\n        temp.positionId = fieldValues.positionId.length !== 0 ? \"\" : \"This field is required.\"\r\n        if ('facultyId' in fieldValues)\r\n            temp.facultyId = fieldValues.facultyId.length !== 0 ? \"\" : \"This field is required.\"\r\n        if ('username' in fieldValues)\r\n            temp.username = fieldValues.username ? \"\" : \"This field is required.\"\r\n        if ('password' in fieldValues)\r\n            temp.password = fieldValues.password ? (fieldValues.password.length > 8 ? \"\" : \"Password must be geater than 8\") : \"This field is required\"\r\n\r\n        setErrors({ ...temp })\r\n\r\n        if (fieldValues === values)\r\n            return Object.values(temp).every(x => x === \"\")\r\n    }\r\n\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    } = useForm(initialFValuesDefault, isAddMode, true, validate);\r\n\r\n    const handleSubmit = e => {\r\n        //add or update \r\n        e.preventDefault();\r\n        const teacherObject = {\r\n            code: values.code,\r\n            name: values.name,\r\n            gender: values.gender.toUpperCase(),\r\n            birthday:values.birthday.toISOString(),\r\n            email: values.email,\r\n            phone: values.phone,\r\n            academyId: Number(values.academyId),\r\n            position: Number(values.positionId),\r\n            facultyId: Number(values.facultyId),\r\n            username: values.username,\r\n            password: values.password,\r\n        }\r\n\r\n        if(isAddMode){\r\n            \r\n            console.log(teacherObject);\r\n            //studentApi.create(teacherObject);\r\n        }else{\r\n\r\n            console.log(teacherObject);\r\n           // studentApi.create(studentNew);\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n        <FormGroup onSubmit={handleSubmit}>\r\n            <FormLabel>\r\n                {isAddMode \r\n                ? <h1>Create a Teacher</h1>\r\n                : <h1>Update Teacher</h1>\r\n                }\r\n            </FormLabel>\r\n            \r\n            <Grid container className={classes.grid}>\r\n            \r\n                <Grid item xs={12} sm={3} className={classes.gridLeft}>\r\n                    <FormGroup>\r\n                    <Input\r\n                        name=\"code\"\r\n                        label=\"Code\"\r\n                        placeholder=\"Ex: 197CT11122\"\r\n                        value={values.code}\r\n                        onChange={handleInputChange}\r\n                        error={errors.code}\r\n                    />\r\n                    <br/>\r\n                    <Input\r\n                        name=\"name\"\r\n                        label=\"Name\"\r\n                        placeholder=\"Ex: Nguyễn Văn An\"\r\n                        value={values.name}\r\n                        onChange={handleInputChange}\r\n                        error={errors.name}\r\n                    />\r\n                    <br/>\r\n                    <RadioGroup\r\n                        name=\"gender\"\r\n                        label=\"Gender\"\r\n                        value={values.gender}\r\n                        onChange={handleInputChange}\r\n                        items={genderItems}\r\n                    />\r\n                    <br/>\r\n                    <DatePicker\r\n                        name=\"birthday\"\r\n                        label=\"Birthday\"\r\n                        value={values.birthday}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <br/>\r\n                    <Input\r\n                        name=\"phone\"\r\n                        label=\"Phone\"\r\n                        placeholder=\"Ex: 0946111222\"\r\n                        value={values.phone}\r\n                        onChange={handleInputChange}\r\n                        error={errors.phone}\r\n                    />\r\n                    <br/>\r\n                    <Select\r\n                        name=\"positionId\"\r\n                        label=\"Position\"\r\n                        value={values.positionId}\r\n                        onChange={handleInputChange}\r\n                        options={FACULTY_LIST()}\r\n                        error={errors.facultyId}\r\n                    />\r\n                    </FormGroup>\r\n\r\n                </Grid>\r\n                <Grid item xs={12} sm={3} className={classes.gridRight}>\r\n                    <FormGroup>\r\n                    <Select\r\n                        name=\"academyId\"\r\n                        label=\"Academy\"\r\n                        value={values.academyId}\r\n                        onChange={handleInputChange}\r\n                        options={FACULTY_LIST()}\r\n                        error={errors.facultyId}\r\n                    />\r\n                    <br/>\r\n                    <Select\r\n                        name=\"facultyId\"\r\n                        label=\"Faculty\"\r\n                        value={values.facultyId}\r\n                        onChange={handleInputChange}\r\n                        options={FACULTY_LIST()}\r\n                        error={errors.facultyId}\r\n                    />\r\n                    <br/>\r\n                    <Input\r\n                        name=\"email\"\r\n                        label=\"Email\"\r\n                        placeholder=\"Ex: an.197CT11122@vanlanguni.vn\"\r\n                        value={values.tickDefaultEmail ? values.email = getNameFromFullName(values.name)+ \".\" + values.code + \"@vanlanguni.vn\" : values.email}\r\n                        onChange={handleInputChange}\r\n                        error={errors.email}\r\n                        disabled={values.tickDefaultEmail}\r\n                    />\r\n                    <Checkbox\r\n                        name=\"tickDefaultEmail\"\r\n                        label=\"Default\"\r\n                        value={values.tickDefaultEmail}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <Input\r\n                        name=\"username\"\r\n                        label=\"Username\"\r\n                        placeholder=\"Ex: an.197CT11122\"\r\n                        value={values.tickDefaultUsername ? values.username = getNameFromFullName(values.name)+ \".\" + values.code : values.username}\r\n                        onChange={handleInputChange}\r\n                        error={errors.username}\r\n                        disabled={values.tickDefaultUsername}\r\n                    />\r\n                    <Checkbox \r\n                        name=\"tickDefaultUsername\"\r\n                        label=\"Default\"\r\n                        value={values.tickDefaultUsername}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <Input\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        value={values.tickDefaultPassword ? values.password = values.code: values.password}\r\n                        onChange={handleInputChange}\r\n                        error={errors.password}\r\n                        disabled={values.tickDefaultPassword}\r\n                    \r\n                    />\r\n                    <Checkbox\r\n                        name=\"tickDefaultPassword\"\r\n                        label=\"Default\"\r\n                        value={values.tickDefaultPassword}\r\n                        onChange={handleInputChange}\r\n                    />\r\n\r\n                    {/* {isAddMode\r\n                    ? \"abc\"\r\n                    : <Select\r\n                        name=\"facultyId\"\r\n                        label=\"Faculty\"\r\n                        value={values.facultyId}\r\n                        onChange={handleInputChange}\r\n                        options={FACULTY_LIST()}\r\n                        error={errors.facultyId}\r\n                        />\r\n                    }   */}\r\n                    </FormGroup>\r\n                </Grid>\r\n            \r\n            </Grid>\r\n            <Grid item xs={12} className={classes.submit}>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        text={isAddMode ? \"Save\": \"Update\"} \r\n                        startIcon={isAddMode ? <SaveIcon />: <UpdateIcon />}\r\n                        onClick={handleSubmit}\r\n                        background = {SET_BACKGROUND_COLOR_PRIMARY_DARK}\r\n                    />\r\n                    <Button\r\n                    \r\n                        text=\"Reset\"\r\n                        color=\"default\"\r\n                        startIcon={<RefreshIcon />}\r\n                        onClick={resetForm} \r\n                    />\r\n            </Grid>\r\n            \r\n            </FormGroup>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Checkbox\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\pages\\AddEdit\\index.jsx",["267","268","269","270","271","272","273","274","275"],"import React, { useState, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { FormGroup, FormLabel, Grid, makeStyles, Paper, } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\nimport Input from 'custom-fields/Input';\r\nimport RadioGroup from 'custom-fields/RadioGroup';\r\nimport DatePicker from 'custom-fields/DatePicker';\r\nimport Select from 'custom-fields/Select';\r\nimport { useForm } from 'custom-fields/Use/useForm';\r\nimport studentApi from 'api/studentApi';\r\nimport { FACULTY_LIST } from 'constant/dataDemo';\r\nimport { getNameFromFullName } from 'utils/converter';\r\nimport { SET_BACKGROUND_COLOR_PRIMARY_DARK } from 'constant/color';\r\nimport Button from 'custom-fields/Button';\r\nimport Checkbox from 'custom-fields/Checkbox';\r\nimport DealinesTable from 'features/Topic/components/Deadline';\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: \"5rem auto 1rem auto\",\r\n        flexGrow: 1,\r\n    },\r\n   \r\n    icon: {\r\n        fontSize: theme.spacing(10),\r\n    },\r\n    grid: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        padding: theme.spacing(1),\r\n    },\r\n    gridLeft: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    gridRight: {\r\n        padding: theme.spacing(2)\r\n    },\r\n    gridItem: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    formGroup: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        //background: \"red\",\r\n    },\r\n    // paper: {\r\n    //     padding: theme.spacing(1),\r\n    // }\r\n   \r\n    \r\n}));\r\n\r\n\r\nconst initialFValuesDefault = {\r\n    id: 0,\r\n    code: '',\r\n    name: '',\r\n    startTime: new Date('2001-01-01T12:00:00'),\r\n    endTime: new Date('2001-01-01T12:00:00'),\r\n    typeTopicId: '',\r\n}\r\n\r\nexport default function AddEditPage(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const { studentId } = useParams();\r\n\r\n  //  const [student, setStudent] = useState([]);\r\n\r\n    const isAddMode = !studentId;\r\n\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('code' in fieldValues)\r\n            temp.code = fieldValues.code ? \"\" : \"This field is required.\"\r\n        if ('name' in fieldValues)\r\n            temp.name = fieldValues.name ? \"\" : \"This field is required.\"\r\n        if ('typeTopicId' in fieldValues)\r\n        temp.typeTopicId = fieldValues.typeTopicId.length !== 0 ? \"\" : \"This field is required.\"\r\n        \r\n        setErrors({ ...temp })\r\n\r\n        if (fieldValues === values)\r\n            return Object.values(temp).every(x => x === \"\")\r\n    }\r\n\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    } = useForm(initialFValuesDefault, isAddMode, true, validate);\r\n\r\n    const handleSubmit = e => {\r\n        //add or update \r\n        e.preventDefault();\r\n        const teacherObject = {\r\n            code: values.code,\r\n            name: values.name,\r\n            startTime:values.startTime.toISOString(),\r\n            endTime:values.endTime.toISOString(),\r\n            typeTopicId: Number(values.typeTopicId)\r\n        }\r\n\r\n        if(isAddMode){\r\n            \r\n            console.log(teacherObject);\r\n            //studentApi.create(teacherObject);\r\n        }else{\r\n\r\n            console.log(teacherObject);\r\n           // studentApi.create(studentNew);\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n        <FormGroup onSubmit={handleSubmit}>\r\n            <FormLabel>\r\n                {isAddMode \r\n                ? <h1>Create a Topic</h1>\r\n                : <h1>Update Topic</h1>\r\n                }\r\n            </FormLabel>\r\n            \r\n            <Grid container className={classes.grid}>\r\n\r\n                <Grid item xs={12} sm={3}>\r\n                {/* <h3>Info</h3> */}\r\n\r\n                    <FormGroup>\r\n                    <Input\r\n                        name=\"code\"\r\n                        label=\"Code\"\r\n                        placeholder=\"Ex: 197CT11122\"\r\n                        value={values.code}\r\n                        onChange={handleInputChange}\r\n                        error={errors.code}\r\n                    />\r\n                    <br/>\r\n                    <Input\r\n                        name=\"name\"\r\n                        label=\"Name\"\r\n                        placeholder=\"Ex: Nguyễn Văn An\"\r\n                        value={values.name}\r\n                        onChange={handleInputChange}\r\n                        error={errors.name}\r\n                    />\r\n                    <br/>\r\n                    <DatePicker\r\n                        name=\"startTime\"\r\n                        label=\"Start Time\"\r\n                        value={values.startTime}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <br/>\r\n                    <DatePicker\r\n                        name=\"endTime\"\r\n                        label=\"End Time\"\r\n                        value={values.endTime}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <br/>\r\n                    <Select\r\n                        nampe=\"typeTopicId\"\r\n                        label=\"Type Topic\"\r\n                        value={values.typeTopicId}\r\n                        onChange={handleInputChange}\r\n                        options={FACULTY_LIST()}\r\n                        error={errors.typeTopicId}\r\n                    />\r\n                    </FormGroup>\r\n\r\n\r\n                </Grid>\r\n             \r\n            </Grid>\r\n\r\n\r\n\r\n            {/* <DealinesTable /> */}\r\n\r\n            <Grid item xs={12} className={classes.submit}>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        text={isAddMode ? \"Save\": \"Update\"} \r\n                        startIcon={isAddMode ? <SaveIcon />: <UpdateIcon />}\r\n                        onClick={handleSubmit}\r\n                        background = {SET_BACKGROUND_COLOR_PRIMARY_DARK}\r\n                    />\r\n                    <Button\r\n                    \r\n                        text=\"Reset\"\r\n                        color=\"default\"\r\n                        startIcon={<RefreshIcon />}\r\n                        onClick={resetForm} \r\n                    />\r\n            </Grid>\r\n            \r\n            </FormGroup>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\components\\Deadline\\index.jsx",["276","277","278","279","280","281","282"],"import React, { useState, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { FormGroup, FormLabel, Grid, makeStyles, Paper, } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport Input from 'custom-fields/Input';\r\nimport DatePicker from 'custom-fields/DatePicker';\r\nimport { useForm } from 'custom-fields/Use/useForm';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: \"5rem auto 1rem auto\",\r\n        flexGrow: 1,\r\n    },\r\n   \r\n    icon: {\r\n        fontSize: theme.spacing(10),\r\n    },\r\n    grid: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        padding: theme.spacing(1),\r\n    },\r\n    gridLeft: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    gridRight: {\r\n        padding: theme.spacing(2)\r\n    },\r\n    gridItem: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    formGroup: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        //background: \"red\",\r\n    },\r\n   \r\n    \r\n}));\r\n\r\n\r\nconst initialFValuesDefault = {\r\n    id: 0,\r\n    startTime: new Date('2001-01-01T12:00:00'),\r\n    endTime: new Date('2001-01-01T12:00:00'),\r\n    content: 'dcbdhcbh',\r\n\r\n}\r\n\r\nexport default function AddEditPage(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const { studentId } = useParams();\r\n\r\n  //  const [student, setStudent] = useState([]);\r\n\r\n    const isAddMode = !studentId;\r\n\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('code' in fieldValues)\r\n            temp.code = fieldValues.code ? \"\" : \"This field is required.\"\r\n        if ('name' in fieldValues)\r\n            temp.name = fieldValues.name ? \"\" : \"This field is required.\"\r\n        if ('typeTopicId' in fieldValues)\r\n        temp.typeTopicId = fieldValues.typeTopicId.length !== 0 ? \"\" : \"This field is required.\"\r\n        \r\n        setErrors({ ...temp })\r\n\r\n        if (fieldValues === values)\r\n            return Object.values(temp).every(x => x === \"\")\r\n    }\r\n\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    } = useForm(initialFValuesDefault, isAddMode, true, validate);\r\n\r\n    const handleSubmit = e => {\r\n        //add or update \r\n        e.preventDefault();\r\n        const teacherObject = {\r\n            code: values.code,\r\n            name: values.name,\r\n            startTime:values.startTime.toISOString(),\r\n            endTime:values.endTime.toISOString(),\r\n            typeTopicId: Number(values.typeTopicId)\r\n        }\r\n\r\n        if(isAddMode){\r\n            \r\n            console.log(teacherObject);\r\n            //studentApi.create(teacherObject);\r\n        }else{\r\n\r\n            console.log(teacherObject);\r\n           // studentApi.create(studentNew);\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n        \r\n        <FormGroup onSubmit={handleSubmit}>\r\n\r\n            <Grid container className={classes.grid}>\r\n\r\n                <Grid item xs={12} sm={3}>\r\n                    \r\n                    <FormGroup>\r\n                    <Input\r\n                        name=\"id\"\r\n                        label=\"Id\"\r\n                        placeholder=\"Ex: 1\"\r\n                        value={values.code}\r\n                        onChange={handleInputChange}\r\n                        error={errors.code}\r\n                    />\r\n                    <br/>\r\n                    <DatePicker\r\n                        name=\"startTime\"\r\n                        label=\"Start Time\"\r\n                        value={values.startTime}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <br/>\r\n                    <DatePicker\r\n                        name=\"endTime\"\r\n                        label=\"End Time\"\r\n                        value={values.endTime}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <br/>\r\n                    <Input\r\n                        name=\"content\"\r\n                        label=\"Cotent\"\r\n                        placeholder=\"Ex: 197CT11122\"\r\n                        value={values.content}\r\n                        onChange={handleInputChange}\r\n                        error={errors.content}\r\n                    />\r\n                    </FormGroup>\r\n\r\n                </Grid>\r\n             \r\n            </Grid>\r\n\r\n            </FormGroup>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","F:\\MTS-ReactJs\\mts-v2\\src\\app\\App.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\AddEdit\\index.jsx",["283","284","285","286","287"],"import React, { useState, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { FormGroup, FormLabel, Grid, makeStyles, Paper, } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\nimport Input from 'custom-fields/Input';\r\nimport Select from 'custom-fields/Select';\r\nimport { useForm } from 'custom-fields/Use/useForm';\r\nimport studentApi from 'api/studentApi';\r\nimport { FACULTY_LIST } from 'constant/dataDemo';\r\nimport { SET_BACKGROUND_COLOR_PRIMARY_DARK } from 'constant/color';\r\nimport Button from 'custom-fields/Button';\r\n\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: \"5rem auto 1rem auto\",\r\n        flexGrow: 1,\r\n    },\r\n   \r\n    icon: {\r\n        fontSize: theme.spacing(10),\r\n    },\r\n    grid: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        padding: theme.spacing(1),\r\n    },\r\n    gridLeft: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    gridRight: {\r\n        padding: theme.spacing(2)\r\n    },\r\n    gridItem: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    formGroup: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        //background: \"red\",\r\n    },\r\n    // paper: {\r\n    //     padding: theme.spacing(1),\r\n    // }\r\n   \r\n    \r\n}));\r\n\r\n\r\nconst initialFValuesDefault = {\r\n    id: 0,\r\n    name: '',\r\n    topicId: '',\r\n}\r\n\r\nexport default function AddEditPage(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const { studentId } = useParams();\r\n\r\n  //  const [student, setStudent] = useState([]);\r\n\r\n    const isAddMode = !studentId;\r\n\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('code' in fieldValues)\r\n            temp.code = fieldValues.code ? \"\" : \"This field is required.\"\r\n        if ('name' in fieldValues)\r\n            temp.name = fieldValues.name ? \"\" : \"This field is required.\"\r\n        if ('topicId' in fieldValues)\r\n        temp.topicId = fieldValues.topicId.length !== 0 ? \"\" : \"This field is required.\"\r\n        \r\n        setErrors({ ...temp })\r\n\r\n        if (fieldValues === values)\r\n            return Object.values(temp).every(x => x === \"\")\r\n    }\r\n\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    } = useForm(initialFValuesDefault, isAddMode, true, validate);\r\n\r\n    const handleSubmit = e => {\r\n        //add or update \r\n        e.preventDefault();\r\n        const teacherObject = {\r\n            name: values.name,\r\n            topicId: Number(values.topicId)\r\n        }\r\n\r\n        if(isAddMode){\r\n            \r\n            console.log(teacherObject);\r\n            //studentApi.create(teacherObject);\r\n        }else{\r\n\r\n            console.log(teacherObject);\r\n           // studentApi.create(studentNew);\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n        <FormGroup onSubmit={handleSubmit}>\r\n            <FormLabel>\r\n                {isAddMode \r\n                ? <h1>Create a Team</h1>\r\n                : <h1>Update Team</h1>\r\n                }\r\n            </FormLabel>\r\n            \r\n            <Grid container className={classes.grid}>\r\n\r\n                <Grid item xs={12} sm={3}>\r\n\r\n                    <FormGroup>\r\n                   \r\n                    <Input\r\n                        name=\"name\"\r\n                        label=\"Team Name\"\r\n                        placeholder=\"Ex: Team Vui Ve\"\r\n                        value={values.name}\r\n                        onChange={handleInputChange}\r\n                        error={errors.name}\r\n                    />\r\n                    <br/>\r\n                    <Select\r\n                        nampe=\"topicId\"\r\n                        label=\"Topic\"\r\n                        value={values.topicId}\r\n                        onChange={handleInputChange}\r\n                        options={FACULTY_LIST()}\r\n                        error={errors.topicId}\r\n                    />\r\n                    </FormGroup>\r\n\r\n                </Grid>\r\n             \r\n            </Grid>\r\n\r\n\r\n            <Grid item xs={12} className={classes.submit}>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        text={isAddMode ? \"Save\": \"Update\"} \r\n                        startIcon={isAddMode ? <SaveIcon />: <UpdateIcon />}\r\n                        onClick={handleSubmit}\r\n                        background = {SET_BACKGROUND_COLOR_PRIMARY_DARK}\r\n                    />\r\n                    <Button\r\n                    \r\n                        text=\"Reset\"\r\n                        color=\"default\"\r\n                        startIcon={<RefreshIcon />}\r\n                        onClick={resetForm} \r\n                    />\r\n            </Grid>\r\n            \r\n            </FormGroup>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\Table\\index.jsx",["288","289","290","291","292","293","294"],"import React, { useEffect, useState } from 'react'\r\nimport {makeStyles, TableBody, TableRow, TableCell, Toolbar, FormLabel, InputAdornment } from '@material-ui/core';\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport { Search } from '@material-ui/icons';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport ButtonIcon from 'custom-fields/ButtonIcon';\r\nimport ConfirmDialog from 'custom-fields/ConfirmDialog';\r\nimport Popup from 'custom-fields/Popup';\r\nimport { TEAM_LIST, TOPIC_LIST } from 'constant/dataDemo';\r\nimport studentApi from 'api/studentApi';\r\nimport useTable from 'custom-fields/Use/useTable';\r\nimport Input from 'custom-fields/Input';\r\nimport { changeListToText } from 'utils/converter';\r\nimport Notification from 'custom-fields/Notification';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(1),\r\n    },\r\n    title: {\r\n        marginTop: theme.spacing(10),\r\n    },\r\n    tableCell: {\r\n        maxWidth: theme.spacing(35),\r\n    }\r\n}));\r\n\r\nconst headCells = [\r\n    { id: 'id', label: 'ID' },\r\n    { id: 'name', label: 'Name' },\r\n    { id: 'topicName', label: 'Type Topic ' },\r\n    { id: 'studentTotal', label: 'Total' },\r\n    { id: 'action', label: 'Action' },\r\n   \r\n]\r\n\r\nexport default function TablePage(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const {history} = props;\r\n\r\n    const [records, setRecords] = useState(TEAM_LIST);\r\n\r\n    const [filterFn, setFilterFn] = useState({ fn: items => { return items; } });\r\n\r\n    const [openPopup, setOpenPopup] = useState(false)\r\n\r\n    const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' })\r\n\r\n    const [confirmDialog, setConfirmDialog] = useState({ isOpen: false, title: '', subTitle: '' })\r\n\r\n    //console.log(history.location.pathname); <=> useRouteMatch()???\r\n\r\n    // // Define the function that fetches the data from API\r\n    // const fetchData = async () => {\r\n        \r\n    //     studentApi.search().then(res=>{\r\n    //         setRecords(res);\r\n    //     });\r\n    \r\n    // };\r\n\r\n    // // Trigger the fetchData after the initial render by using the useEffect hook\r\n    // useEffect(() => { fetchData(); }, []);\r\n\r\n    const handleSearch = e => {\r\n        let target = e.target;\r\n\r\n        setFilterFn({\r\n            fn: items => {\r\n                if (target.value === \"\")\r\n                    return items;\r\n                else\r\n                    //console.log(items);\r\n                    return items.filter(\r\n                        x => x.name.toLowerCase().includes(target.value.toLowerCase())\r\n                    );\r\n            }\r\n        })\r\n    };\r\n\r\n    const onDelete = id => {\r\n        setConfirmDialog({\r\n            ...confirmDialog,\r\n            isOpen: false\r\n        })\r\n        \r\n        studentApi.delete(id);\r\n        setNotify({\r\n            isOpen: true,\r\n            message: 'Deleted Successfully',\r\n            type: 'error'\r\n        })\r\n    }\r\n\r\n    const {\r\n        TblContainer,\r\n        TblHead,\r\n        TblPagination,\r\n        recordsAfterPagingAndSorting\r\n    } = useTable(records, headCells, filterFn);\r\n\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <FormLabel>\r\n                <h1 className={classes.title}>Team List</h1>\r\n            </FormLabel>\r\n            \r\n            <Toolbar>\r\n                <Input\r\n                    label=\"Search For Team Name\"\r\n                    className={classes.searchInput}\r\n                    InputProps={{\r\n                        startAdornment: (<InputAdornment position=\"start\">\r\n                            <Search />\r\n                        </InputAdornment>)\r\n                    }}\r\n                    onChange={handleSearch}\r\n                />\r\n            </Toolbar>\r\n\r\n             <TblContainer>\r\n                    <TblHead />\r\n                    <TableBody>\r\n                        {\r\n                            recordsAfterPagingAndSorting().map(item =>\r\n                                (<TableRow key={item.id}>\r\n                                    <TableCell>{item.id}</TableCell>\r\n                                    <TableCell>{item.name}</TableCell>\r\n                                    <TableCell>{item.topicName}</TableCell>\r\n                                    <TableCell>{item.studentTotal}</TableCell>\r\n                                    <TableCell>\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<EditOutlinedIcon fontSize=\"small\" />}   \r\n                                            onClick= {() => history.push(`${history.location.pathname}/${item.id}`)} \r\n                                        />\r\n\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<DeleteIcon fontSize=\"small\" />}    \r\n                                           // onClick= {() => history.push(`/student/delete/${item.id}`)}\r\n                                           onClick={() => {\r\n                                            setConfirmDialog({\r\n                                                isOpen: true,\r\n                                                title: 'Are you sure to delete this student?',\r\n                                                subTitle: \"You can't undo this operation\",\r\n                                                onConfirm: () => { onDelete(item.id) }\r\n                                            },)\r\n                                        }}>\r\n                                        </ButtonIcon>\r\n\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<VisibilityIcon fontSize=\"small\" />}   \r\n                                            onClick= {() => history.push(`${history.location.pathname}/${item.id}/s`)} \r\n                                        />\r\n                                        \r\n                                    </TableCell>\r\n                                </TableRow>)\r\n                            )\r\n                        }\r\n                    </TableBody>\r\n                </TblContainer>\r\n                <TblPagination />\r\n\r\n                <Notification\r\n                    notify={notify}\r\n                    setNotify={setNotify}\r\n                />\r\n                <ConfirmDialog\r\n                    confirmDialog={confirmDialog}\r\n                    setConfirmDialog={setConfirmDialog}\r\n                />\r\n                \r\n        </div>\r\n    );\r\n}","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBarForUser\\index.jsx",["295","296","297","298","299","300","301"],"import React from \"react\";\r\nimport {\r\n  ListItem,\r\n  List,\r\n  ListItemIcon,\r\n  ListItemText\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { ExpandLess, ExpandMore } from \"@material-ui/icons\";\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport ViewListIcon from '@material-ui/icons/ViewList';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport AssignmentIndIcon from '@material-ui/icons/AssignmentInd';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\nimport { SET_COLOR_PRIMARY, SET_COLOR_TEAL } from \"constant/color\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  nested: {\r\n    paddingLeft: theme.spacing(4),\r\n  },\r\n}));\r\n\r\nconst StudentSide = props => {\r\n\r\n  const { history } = props;\r\n  const classes = useStyles();\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const itemsList = [\r\n   \r\n    {\r\n      text: \"Topics \",\r\n      icon: <ViewListIcon style={SET_COLOR_PRIMARY}/>,\r\n      onClick: () => history.push(\"/mts/topic\")\r\n    },\r\n    {\r\n      text: \"Add Team\",\r\n      icon: <GroupAddIcon style={SET_COLOR_PRIMARY}/>,\r\n      onClick: () => history.push(\"/mts/team/add\")\r\n    },\r\n    {\r\n      text: \"My Topic\",\r\n      icon: <FolderOpenIcon style={SET_COLOR_PRIMARY}/>,\r\n      onClick: () => history.push(\"/mts/my\")\r\n    },\r\n    {\r\n      text: \"My Info\",\r\n      icon: <AssignmentIndIcon style={SET_COLOR_PRIMARY}/>,\r\n      onClick: () => history.push(\"/mts/info\")\r\n    },\r\n    {\r\n      text: \"My Accout\",\r\n      icon: <AccountCircleIcon style={SET_COLOR_PRIMARY}/>,\r\n      onClick: () => history.push(\"/mts/account\")\r\n    },\r\n\r\n  ];\r\n  return (\r\n      <div>\r\n\r\n        <List \r\n          component=\"div\" \r\n          disablePadding\r\n        >\r\n            {itemsList.map((item) => {\r\n\r\n            const { text, icon, onClick } = item;\r\n\r\n            return (\r\n            <ListItem \r\n              className={classes.nested} \r\n              button key={text} \r\n              onClick={onClick}\r\n              >\r\n                {icon \r\n                && <ListItemIcon>{icon}</ListItemIcon>\r\n                }\r\n\r\n                <ListItemText \r\n                  primary={text} \r\n                  style={SET_COLOR_PRIMARY}\r\n                />\r\n            </ListItem>\r\n            );\r\n        })}\r\n        </List>\r\n       \r\n      </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(StudentSide);","F:\\MTS-ReactJs\\mts-v2\\src\\routes\\User\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\routes\\Admin\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\Account\\index.jsx",["302","303","304","305","306","307","308","309","310","311","312","313"],{"ruleId":"314","replacedBy":"315"},{"ruleId":"316","replacedBy":"317"},{"ruleId":"318","severity":1,"message":"319","line":148,"column":18,"nodeType":"320","messageId":"321","endLine":148,"endColumn":20},{"ruleId":"322","severity":1,"message":"323","line":1,"column":17,"nodeType":"324","messageId":"325","endLine":1,"endColumn":25},{"ruleId":"322","severity":1,"message":"326","line":1,"column":27,"nodeType":"324","messageId":"325","endLine":1,"endColumn":36},{"ruleId":"322","severity":1,"message":"327","line":12,"column":8,"nodeType":"324","messageId":"325","endLine":12,"endColumn":18},{"ruleId":"322","severity":1,"message":"328","line":119,"column":9,"nodeType":"324","messageId":"325","endLine":119,"endColumn":18},{"ruleId":"322","severity":1,"message":"326","line":1,"column":17,"nodeType":"324","messageId":"325","endLine":1,"endColumn":26},{"ruleId":"322","severity":1,"message":"329","line":10,"column":8,"nodeType":"324","messageId":"325","endLine":10,"endColumn":13},{"ruleId":"322","severity":1,"message":"330","line":47,"column":21,"nodeType":"324","messageId":"325","endLine":47,"endColumn":31},{"ruleId":"322","severity":1,"message":"331","line":51,"column":12,"nodeType":"324","messageId":"325","endLine":51,"endColumn":21},{"ruleId":"322","severity":1,"message":"332","line":51,"column":23,"nodeType":"324","messageId":"325","endLine":51,"endColumn":35},{"ruleId":"322","severity":1,"message":"326","line":1,"column":17,"nodeType":"324","messageId":"325","endLine":1,"endColumn":26},{"ruleId":"322","severity":1,"message":"327","line":13,"column":8,"nodeType":"324","messageId":"325","endLine":13,"endColumn":18},{"ruleId":"322","severity":1,"message":"333","line":48,"column":13,"nodeType":"324","messageId":"325","endLine":48,"endColumn":22},{"ruleId":"322","severity":1,"message":"334","line":50,"column":25,"nodeType":"324","messageId":"325","endLine":50,"endColumn":39},{"ruleId":"335","severity":1,"message":"336","line":11,"column":16,"nodeType":"337","messageId":"338","endLine":11,"endColumn":18},{"ruleId":"322","severity":1,"message":"326","line":1,"column":17,"nodeType":"324","messageId":"325","endLine":1,"endColumn":26},{"ruleId":"322","severity":1,"message":"329","line":9,"column":8,"nodeType":"324","messageId":"325","endLine":9,"endColumn":13},{"ruleId":"322","severity":1,"message":"330","line":46,"column":21,"nodeType":"324","messageId":"325","endLine":46,"endColumn":31},{"ruleId":"322","severity":1,"message":"331","line":50,"column":12,"nodeType":"324","messageId":"325","endLine":50,"endColumn":21},{"ruleId":"322","severity":1,"message":"332","line":50,"column":23,"nodeType":"324","messageId":"325","endLine":50,"endColumn":35},{"ruleId":"322","severity":1,"message":"326","line":1,"column":17,"nodeType":"324","messageId":"325","endLine":1,"endColumn":26},{"ruleId":"322","severity":1,"message":"333","line":64,"column":13,"nodeType":"324","messageId":"325","endLine":64,"endColumn":22},{"ruleId":"322","severity":1,"message":"339","line":66,"column":25,"nodeType":"324","messageId":"325","endLine":66,"endColumn":39},{"ruleId":"322","severity":1,"message":"326","line":1,"column":17,"nodeType":"324","messageId":"325","endLine":1,"endColumn":26},{"ruleId":"322","severity":1,"message":"329","line":10,"column":8,"nodeType":"324","messageId":"325","endLine":10,"endColumn":13},{"ruleId":"322","severity":1,"message":"340","line":12,"column":10,"nodeType":"324","messageId":"325","endLine":12,"endColumn":22},{"ruleId":"322","severity":1,"message":"330","line":48,"column":21,"nodeType":"324","messageId":"325","endLine":48,"endColumn":31},{"ruleId":"322","severity":1,"message":"331","line":52,"column":12,"nodeType":"324","messageId":"325","endLine":52,"endColumn":21},{"ruleId":"322","severity":1,"message":"332","line":52,"column":23,"nodeType":"324","messageId":"325","endLine":52,"endColumn":35},{"ruleId":"322","severity":1,"message":"323","line":1,"column":17,"nodeType":"324","messageId":"325","endLine":1,"endColumn":25},{"ruleId":"322","severity":1,"message":"326","line":1,"column":27,"nodeType":"324","messageId":"325","endLine":1,"endColumn":36},{"ruleId":"322","severity":1,"message":"327","line":12,"column":8,"nodeType":"324","messageId":"325","endLine":12,"endColumn":18},{"ruleId":"322","severity":1,"message":"328","line":117,"column":9,"nodeType":"324","messageId":"325","endLine":117,"endColumn":18},{"ruleId":"322","severity":1,"message":"323","line":1,"column":17,"nodeType":"324","messageId":"325","endLine":1,"endColumn":25},{"ruleId":"322","severity":1,"message":"326","line":1,"column":27,"nodeType":"324","messageId":"325","endLine":1,"endColumn":36},{"ruleId":"322","severity":1,"message":"341","line":3,"column":50,"nodeType":"324","messageId":"325","endLine":3,"endColumn":55},{"ruleId":"322","severity":1,"message":"342","line":8,"column":8,"nodeType":"324","messageId":"325","endLine":8,"endColumn":18},{"ruleId":"322","severity":1,"message":"327","line":12,"column":8,"nodeType":"324","messageId":"325","endLine":12,"endColumn":18},{"ruleId":"322","severity":1,"message":"343","line":14,"column":10,"nodeType":"324","messageId":"325","endLine":14,"endColumn":29},{"ruleId":"322","severity":1,"message":"344","line":17,"column":8,"nodeType":"324","messageId":"325","endLine":17,"endColumn":16},{"ruleId":"322","severity":1,"message":"345","line":18,"column":8,"nodeType":"324","messageId":"325","endLine":18,"endColumn":21},{"ruleId":"322","severity":1,"message":"328","line":97,"column":9,"nodeType":"324","messageId":"325","endLine":97,"endColumn":18},{"ruleId":"322","severity":1,"message":"323","line":1,"column":17,"nodeType":"324","messageId":"325","endLine":1,"endColumn":25},{"ruleId":"322","severity":1,"message":"326","line":1,"column":27,"nodeType":"324","messageId":"325","endLine":1,"endColumn":36},{"ruleId":"322","severity":1,"message":"346","line":3,"column":21,"nodeType":"324","messageId":"325","endLine":3,"endColumn":30},{"ruleId":"322","severity":1,"message":"341","line":3,"column":50,"nodeType":"324","messageId":"325","endLine":3,"endColumn":55},{"ruleId":"322","severity":1,"message":"347","line":4,"column":8,"nodeType":"324","messageId":"325","endLine":4,"endColumn":19},{"ruleId":"322","severity":1,"message":"328","line":81,"column":9,"nodeType":"324","messageId":"325","endLine":81,"endColumn":18},{"ruleId":"322","severity":1,"message":"348","line":85,"column":9,"nodeType":"324","messageId":"325","endLine":85,"endColumn":18},{"ruleId":"322","severity":1,"message":"323","line":1,"column":17,"nodeType":"324","messageId":"325","endLine":1,"endColumn":25},{"ruleId":"322","severity":1,"message":"326","line":1,"column":27,"nodeType":"324","messageId":"325","endLine":1,"endColumn":36},{"ruleId":"322","severity":1,"message":"341","line":3,"column":50,"nodeType":"324","messageId":"325","endLine":3,"endColumn":55},{"ruleId":"322","severity":1,"message":"327","line":10,"column":8,"nodeType":"324","messageId":"325","endLine":10,"endColumn":18},{"ruleId":"322","severity":1,"message":"328","line":90,"column":9,"nodeType":"324","messageId":"325","endLine":90,"endColumn":18},{"ruleId":"322","severity":1,"message":"326","line":1,"column":17,"nodeType":"324","messageId":"325","endLine":1,"endColumn":26},{"ruleId":"322","severity":1,"message":"329","line":9,"column":8,"nodeType":"324","messageId":"325","endLine":9,"endColumn":13},{"ruleId":"322","severity":1,"message":"349","line":10,"column":21,"nodeType":"324","messageId":"325","endLine":10,"endColumn":31},{"ruleId":"322","severity":1,"message":"350","line":14,"column":10,"nodeType":"324","messageId":"325","endLine":14,"endColumn":26},{"ruleId":"322","severity":1,"message":"330","line":44,"column":21,"nodeType":"324","messageId":"325","endLine":44,"endColumn":31},{"ruleId":"322","severity":1,"message":"331","line":48,"column":12,"nodeType":"324","messageId":"325","endLine":48,"endColumn":21},{"ruleId":"322","severity":1,"message":"332","line":48,"column":23,"nodeType":"324","messageId":"325","endLine":48,"endColumn":35},{"ruleId":"322","severity":1,"message":"351","line":10,"column":10,"nodeType":"324","messageId":"325","endLine":10,"endColumn":20},{"ruleId":"322","severity":1,"message":"352","line":10,"column":22,"nodeType":"324","messageId":"325","endLine":10,"endColumn":32},{"ruleId":"322","severity":1,"message":"353","line":11,"column":8,"nodeType":"324","messageId":"325","endLine":11,"endColumn":16},{"ruleId":"322","severity":1,"message":"354","line":12,"column":8,"nodeType":"324","messageId":"325","endLine":12,"endColumn":21},{"ruleId":"322","severity":1,"message":"355","line":14,"column":8,"nodeType":"324","messageId":"325","endLine":14,"endColumn":18},{"ruleId":"322","severity":1,"message":"356","line":19,"column":29,"nodeType":"324","messageId":"325","endLine":19,"endColumn":43},{"ruleId":"322","severity":1,"message":"357","line":38,"column":9,"nodeType":"324","messageId":"325","endLine":38,"endColumn":20},{"ruleId":"322","severity":1,"message":"323","line":1,"column":17,"nodeType":"324","messageId":"325","endLine":1,"endColumn":25},{"ruleId":"322","severity":1,"message":"326","line":1,"column":27,"nodeType":"324","messageId":"325","endLine":1,"endColumn":36},{"ruleId":"322","severity":1,"message":"341","line":3,"column":50,"nodeType":"324","messageId":"325","endLine":3,"endColumn":55},{"ruleId":"322","severity":1,"message":"342","line":8,"column":8,"nodeType":"324","messageId":"325","endLine":8,"endColumn":18},{"ruleId":"322","severity":1,"message":"358","line":9,"column":8,"nodeType":"324","messageId":"325","endLine":9,"endColumn":18},{"ruleId":"322","severity":1,"message":"359","line":10,"column":8,"nodeType":"324","messageId":"325","endLine":10,"endColumn":14},{"ruleId":"322","severity":1,"message":"327","line":12,"column":8,"nodeType":"324","messageId":"325","endLine":12,"endColumn":18},{"ruleId":"322","severity":1,"message":"360","line":13,"column":10,"nodeType":"324","messageId":"325","endLine":13,"endColumn":22},{"ruleId":"322","severity":1,"message":"343","line":14,"column":10,"nodeType":"324","messageId":"325","endLine":14,"endColumn":29},{"ruleId":"322","severity":1,"message":"344","line":17,"column":8,"nodeType":"324","messageId":"325","endLine":17,"endColumn":16},{"ruleId":"322","severity":1,"message":"345","line":18,"column":8,"nodeType":"324","messageId":"325","endLine":18,"endColumn":21},{"ruleId":"322","severity":1,"message":"328","line":93,"column":9,"nodeType":"324","messageId":"325","endLine":93,"endColumn":18},"no-native-reassign",["361"],"no-negated-in-lhs",["362"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'studentApi' is defined but never used.","'setValues' is assigned a value but never used.","'Popup' is defined but never used.","'setRecords' is assigned a value but never used.","'openPopup' is assigned a value but never used.","'setOpenPopup' is assigned a value but never used.","'studentId' is assigned a value but never used.","'setStudentInfo' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'setteacherInfo' is assigned a value but never used.","'STUDENT_LIST' is defined but never used.","'Paper' is defined but never used.","'RadioGroup' is defined but never used.","'getNameFromFullName' is defined but never used.","'Checkbox' is defined but never used.","'DealinesTable' is defined but never used.","'FormLabel' is defined but never used.","'RefreshIcon' is defined but never used.","'resetForm' is assigned a value but never used.","'TOPIC_LIST' is defined but never used.","'changeListToText' is defined but never used.","'ExpandLess' is defined but never used.","'ExpandMore' is defined but never used.","'Collapse' is defined but never used.","'PersonAddIcon' is defined but never used.","'PersonIcon' is defined but never used.","'SET_COLOR_TEAL' is defined but never used.","'handleClick' is assigned a value but never used.","'DatePicker' is defined but never used.","'Select' is defined but never used.","'FACULTY_LIST' is defined but never used.","no-global-assign","no-unsafe-negation"]