[{"F:\\MTS-ReactJs\\mts-v2\\src\\index.js":"1","F:\\MTS-ReactJs\\mts-v2\\src\\reportWebVitals.js":"2","F:\\MTS-ReactJs\\mts-v2\\src\\components\\Header\\index.jsx":"3","F:\\MTS-ReactJs\\mts-v2\\src\\components\\NotFound\\index.jsx":"4","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\index.jsx":"5","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Home\\index.jsx":"6","F:\\MTS-ReactJs\\mts-v2\\src\\App\\App.js":"7","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\AddEdit\\index.jsx":"8","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\Table\\index.jsx":"9","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\index.jsx":"10","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\StudentSide.jsx":"11","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\AccountSide.jsx":"12","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\HomeSide.jsx":"13","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TeamSide.jsx":"14","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TeacherSide.jsx":"15","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TopicSide.jsx":"16","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\NotiProfileSide.jsx":"17","F:\\MTS-ReactJs\\mts-v2\\src\\components\\Loader\\index.jsx":"18","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\Info\\index.jsx":"19","F:\\MTS-ReactJs\\mts-v2\\src\\utils\\converter.js":"20","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Login\\index.jsx":"21","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\pages\\Table\\index.jsx":"22","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Input\\index.jsx":"23","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Button\\index.jsx":"24","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Use\\useTable.jsx":"25","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Notification\\index.jsx":"26","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Popup\\index.jsx":"27","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\ConfirmDialog\\index.jsx":"28","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\ButtonIcon\\index.jsx":"29","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\RadioGroup\\index.jsx":"30","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\DatePicker\\index.jsx":"31","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Select\\index.jsx":"32","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\index.jsx":"33","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\Info\\index.jsx":"34","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\Table\\index.jsx":"35","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\AddEdit\\index.jsx":"36","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Checkbox\\index.jsx":"37","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\index.jsx":"38","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\pages\\AddEdit\\index.jsx":"39","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\components\\Deadline\\index.jsx":"40","F:\\MTS-ReactJs\\mts-v2\\src\\app\\App.js":"41","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\index.jsx":"42","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\AddEdit\\index.jsx":"43","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\Table\\index.jsx":"44","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBarForUser\\index.jsx":"45","F:\\MTS-ReactJs\\mts-v2\\src\\routes\\User\\index.jsx":"46","F:\\MTS-ReactJs\\mts-v2\\src\\routes\\Admin\\index.jsx":"47","F:\\MTS-ReactJs\\mts-v2\\src\\api\\Select\\facultyList.js":"48","F:\\MTS-ReactJs\\mts-v2\\src\\api\\Select\\positionList.js":"49","F:\\MTS-ReactJs\\mts-v2\\src\\api\\Select\\academyList.js":"50","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Use\\useFormCustom.jsx":"51","F:\\MTS-ReactJs\\mts-v2\\src\\api\\Student\\studentApi.js":"52","F:\\MTS-ReactJs\\mts-v2\\src\\api\\Handle\\handleApi.js":"53","F:\\MTS-ReactJs\\mts-v2\\src\\api\\URL\\urlApi.js":"54","F:\\MTS-ReactJs\\mts-v2\\src\\api\\Handle\\executeError.js":"55","F:\\MTS-ReactJs\\mts-v2\\src\\api\\Teacher\\teacherApi.js":"56","F:\\MTS-ReactJs\\mts-v2\\src\\utils\\getObject.js":"57","F:\\MTS-ReactJs\\mts-v2\\src\\constants\\color.js":"58","F:\\MTS-ReactJs\\mts-v2\\src\\constants\\initialValues.js":"59","F:\\MTS-ReactJs\\mts-v2\\src\\constants\\type.js":"60","F:\\MTS-ReactJs\\mts-v2\\src\\constants\\dataDemo.js":"61","F:\\MTS-ReactJs\\mts-v2\\src\\styles\\index.jsx":"62","F:\\MTS-ReactJs\\mts-v2\\src\\api\\Team\\teamApi.js":"63","F:\\MTS-ReactJs\\mts-v2\\src\\api\\Topic\\topicApi.js":"64","F:\\MTS-ReactJs\\mts-v2\\src\\api\\Select\\topicListAPI.js":"65","F:\\MTS-ReactJs\\mts-v2\\src\\api\\Select\\typeTopicList.js":"66","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\Views\\index.jsx":"67"},{"size":478,"mtime":1612624921304,"results":"68","hashOfConfig":"69"},{"size":362,"mtime":499162500000,"results":"70","hashOfConfig":"69"},{"size":4695,"mtime":1612870775339,"results":"71","hashOfConfig":"69"},{"size":350,"mtime":1611891067957,"results":"72","hashOfConfig":"69"},{"size":976,"mtime":1612749091124,"results":"73","hashOfConfig":"69"},{"size":336,"mtime":1611927046554,"results":"74","hashOfConfig":"69"},{"size":875,"mtime":1612628540611,"results":"75","hashOfConfig":"69"},{"size":11704,"mtime":1612839997244,"results":"76","hashOfConfig":"69"},{"size":7268,"mtime":1612841364815,"results":"77","hashOfConfig":"69"},{"size":652,"mtime":1612541712194,"results":"78","hashOfConfig":"69"},{"size":2675,"mtime":1612839733038,"results":"79","hashOfConfig":"69"},{"size":2524,"mtime":1612839733038,"results":"80","hashOfConfig":"69"},{"size":716,"mtime":1612839733038,"results":"81","hashOfConfig":"69"},{"size":2571,"mtime":1612839733038,"results":"82","hashOfConfig":"69"},{"size":2566,"mtime":1612839733038,"results":"83","hashOfConfig":"69"},{"size":2628,"mtime":1612839733038,"results":"84","hashOfConfig":"69"},{"size":4676,"mtime":1611852677402,"results":"85","hashOfConfig":"69"},{"size":791,"mtime":1612170899960,"results":"86","hashOfConfig":"69"},{"size":3494,"mtime":1612841601676,"results":"87","hashOfConfig":"69"},{"size":1504,"mtime":1612876207381,"results":"88","hashOfConfig":"69"},{"size":3774,"mtime":1612839733038,"results":"89","hashOfConfig":"69"},{"size":7289,"mtime":1612887230679,"results":"90","hashOfConfig":"69"},{"size":818,"mtime":1612714959393,"results":"91","hashOfConfig":"69"},{"size":872,"mtime":1612709235287,"results":"92","hashOfConfig":"69"},{"size":3921,"mtime":1612839733038,"results":"93","hashOfConfig":"69"},{"size":1001,"mtime":1612176107875,"results":"94","hashOfConfig":"69"},{"size":1338,"mtime":1612176868306,"results":"95","hashOfConfig":"69"},{"size":1522,"mtime":1612183677279,"results":"96","hashOfConfig":"69"},{"size":665,"mtime":1612709157898,"results":"97","hashOfConfig":"69"},{"size":1231,"mtime":1612020005178,"results":"98","hashOfConfig":"69"},{"size":1291,"mtime":1612621346307,"results":"99","hashOfConfig":"69"},{"size":1488,"mtime":1612808580579,"results":"100","hashOfConfig":"69"},{"size":968,"mtime":1612624903112,"results":"101","hashOfConfig":"69"},{"size":3657,"mtime":1612841888000,"results":"102","hashOfConfig":"69"},{"size":7349,"mtime":1612841491884,"results":"103","hashOfConfig":"69"},{"size":12859,"mtime":1612840248399,"results":"104","hashOfConfig":"69"},{"size":987,"mtime":1612839733038,"results":"105","hashOfConfig":"69"},{"size":1159,"mtime":1612887433239,"results":"106","hashOfConfig":"69"},{"size":7006,"mtime":1612884765898,"results":"107","hashOfConfig":"69"},{"size":4868,"mtime":1612719025933,"results":"108","hashOfConfig":"69"},{"size":875,"mtime":1612628540611,"results":"109","hashOfConfig":"69"},{"size":950,"mtime":1612886996348,"results":"110","hashOfConfig":"69"},{"size":7339,"mtime":1612875018558,"results":"111","hashOfConfig":"69"},{"size":7501,"mtime":1612893187682,"results":"112","hashOfConfig":"69"},{"size":2544,"mtime":1612871116153,"results":"113","hashOfConfig":"69"},{"size":1284,"mtime":1612839704518,"results":"114","hashOfConfig":"69"},{"size":1336,"mtime":1612628586565,"results":"115","hashOfConfig":"69"},{"size":523,"mtime":1612779174120,"results":"116","hashOfConfig":"69"},{"size":532,"mtime":1612801183454,"results":"117","hashOfConfig":"69"},{"size":525,"mtime":1612801083591,"results":"118","hashOfConfig":"69"},{"size":3793,"mtime":1612869969100,"results":"119","hashOfConfig":"69"},{"size":2265,"mtime":1612797585220,"results":"120","hashOfConfig":"69"},{"size":773,"mtime":1612863137990,"results":"121","hashOfConfig":"69"},{"size":301,"mtime":1612862706517,"results":"122","hashOfConfig":"69"},{"size":0,"mtime":1612790390579,"results":"123","hashOfConfig":"69"},{"size":2201,"mtime":1612839555971,"results":"124","hashOfConfig":"69"},{"size":3500,"mtime":1612869762221,"results":"125","hashOfConfig":"69"},{"size":1128,"mtime":1612343843839,"results":"126","hashOfConfig":"69"},{"size":1479,"mtime":1612879529308,"results":"127","hashOfConfig":"69"},{"size":134,"mtime":1612850827845,"results":"128","hashOfConfig":"69"},{"size":15520,"mtime":1612841838840,"results":"129","hashOfConfig":"69"},{"size":2041,"mtime":1612866182790,"results":"130","hashOfConfig":"69"},{"size":2866,"mtime":1612891405909,"results":"131","hashOfConfig":"69"},{"size":2628,"mtime":1612877781999,"results":"132","hashOfConfig":"69"},{"size":518,"mtime":1612863919908,"results":"133","hashOfConfig":"69"},{"size":539,"mtime":1612884767952,"results":"134","hashOfConfig":"69"},{"size":5056,"mtime":1612893632125,"results":"135","hashOfConfig":"69"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},"3c2w8d",{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"138"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"138"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"138"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"138"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"138"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"138"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"138"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":2,"source":"233","usedDeprecatedRules":"138"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"138"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"138"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"138"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"138"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"138"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\MTS-ReactJs\\mts-v2\\src\\index.js",[],["287","288"],"F:\\MTS-ReactJs\\mts-v2\\src\\reportWebVitals.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\Header\\index.jsx",["289"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\n\r\nimport { COLOR_PRIMARY, COLOR_WHITE, SET_COLOR_PRIMARY } from 'constants/color';\r\nimport SideBar from 'components/SideBar';\r\nimport NotiProfileSide from 'components/SideBar/components/NotiProfileSide';\r\nimport SideBarForUser from 'components/SideBarForUser';\r\nconst drawerWidth = 190;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-end',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n}));\r\n\r\nexport default function Header(props) {\r\n\r\n  const { mode } = props;\r\n\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n        style={{background: COLOR_PRIMARY}}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            style={{color: COLOR_WHITE}}\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, open && classes.hide)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n\r\n          <Typography \r\n            variant=\"h6\" \r\n            noWrap\r\n            >\r\n              MTS\r\n          </Typography>\r\n          \r\n          <NotiProfileSide />\r\n          \r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'ltr' \r\n            ? <ChevronLeftIcon style={SET_COLOR_PRIMARY}/> \r\n            : <ChevronRightIcon />\r\n            }\r\n          </IconButton>\r\n        </div>\r\n\r\n        {/* SideMenu */}\r\n        <Divider />\r\n          {\r\n            mode == \"ADMIN\" \r\n            ?<SideBar /> \r\n            :<SideBarForUser />\r\n          }\r\n        <Divider />\r\n       \r\n      </Drawer>\r\n\r\n      {/* <main\r\n        className={clsx(classes.content, {\r\n          [classes.contentShift]: open,\r\n        })}\r\n      >\r\n        <div className={classes.drawerHeader} />\r\n        <Typography paragraph>\r\n          Consequat mauris nunc congue nisi vitae suscipit. Fringilla est ullamcorper eget nulla\r\n          facilisi etiam dignissim diam. \r\n        </Typography>\r\n      </main> */}\r\n    </div>\r\n  );\r\n}\r\n","F:\\MTS-ReactJs\\mts-v2\\src\\components\\NotFound\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Home\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\App\\App.js",[],["290","291"],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\AddEdit\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\Table\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\StudentSide.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\AccountSide.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\HomeSide.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TeamSide.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TeacherSide.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TopicSide.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\NotiProfileSide.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\components\\Loader\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\Info\\index.jsx",["292","293"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Avatar, Grid, ListItem, ListItemAvatar, ListItemText, Paper } from \"@material-ui/core\";\r\nimport DateRangeIcon from '@material-ui/icons/DateRange';\r\nimport PhoneIphoneIcon from '@material-ui/icons/PhoneIphone';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport ClassIcon from '@material-ui/icons/Class';\r\nimport ContactsIcon from '@material-ui/icons/Contacts';\r\nimport WcIcon from '@material-ui/icons/Wc';\r\nimport { SET_BACKGROUND_COLOR_PRIMARY } from \"constants/color\";\r\nimport studentApi from \"api/Student/studentApi\";\r\nimport Notification from \"custom-fields/Notification\";\r\nimport { formatDate } from \"utils/converter\";\r\nimport { useInfoStyles } from \"styles\";\r\n\r\n\r\nexport default function InfoPage() {\r\n\r\n    const classes = useInfoStyles();\r\n    const { studentId } = useParams();\r\n    const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' })\r\n    const [studentInfo, setStudentInfo] = useState({});\r\n\r\n    const fetchData = async () => {\r\n        studentApi.info(studentId).then(res=>{\r\n            res.errorMessage\r\n            ? setNotify({\r\n                isOpen: true,\r\n                message: res.errorMessage,\r\n                type: 'error'\r\n            })\r\n            : setStudentInfo(res.result);            \r\n        });\r\n    };\r\n\r\n    useEffect(() => { fetchData(); }, []);\r\n    \r\n    const renderRow = (icon, title, info) =>{\r\n        return(\r\n            <ListItem className={classes.left}>\r\n                <ListItemAvatar>\r\n                    <Avatar style={SET_BACKGROUND_COLOR_PRIMARY}>\r\n                    {icon}\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={title} secondary={info} />\r\n            </ListItem>\r\n        );\r\n    }\r\n\r\n    const renderRowRight = (icon, title, info) =>{\r\n        return(\r\n            <ListItem className={classes.right}>\r\n                <ListItemAvatar>\r\n                    <Avatar style={SET_BACKGROUND_COLOR_PRIMARY}>\r\n                    {icon}\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={title} secondary={info} />\r\n            </ListItem>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n        <Grid container className={classes.grid}>\r\n            <Grid item xs={12} sm={4}>\r\n                <Paper elevation={4} className={classes.pager}>\r\n                    \r\n                    <h1 className={classes.title}>Student Info</h1>\r\n                    {renderRow(<ContactsIcon/>, \"Code\", studentInfo.code)}\r\n                    {renderRowRight(<PersonIcon />, \"Name\", studentInfo.name)}\r\n                    {renderRow(<WcIcon />, \"Gender\", studentInfo.gender)}\r\n                    {renderRowRight(<DateRangeIcon />, \"Birthday\", formatDate(studentInfo.birthday))}\r\n                    {renderRow(<EmailIcon />, \"Email\", studentInfo.email)}\r\n                    {renderRowRight(<PhoneIphoneIcon />, \"Phone\", studentInfo.phone)}\r\n                    {renderRow(<ClassIcon />, \"Faculty\", studentInfo.facultyName)}\r\n                </Paper>\r\n                \r\n            </Grid>\r\n        </Grid>\r\n        <Notification\r\n            notify={notify}\r\n            setNotify={setNotify}\r\n        />\r\n        </div>\r\n        \r\n    );\r\n}","F:\\MTS-ReactJs\\mts-v2\\src\\utils\\converter.js",["294"],"\r\nconst removeUft8 = (char) => {\r\n    if([225,226,259,7855,7845,224,7857,7847,7843,7859,7849,227,7861,7851,7841,7863,7853]\r\n        .includes(char.charCodeAt(0))){\r\n        return \"a\";\r\n    }\r\n    if([234,7871,7873,7875,7877,7879]\r\n        .includes(char.charCodeAt(0))){\r\n        return \"e\";\r\n    }\r\n    if([432,7913,7915,7917,7919,7921 ]\r\n        .includes(char.charCodeAt(0))){\r\n        return \"u\";\r\n    }\r\n    if(char.charCodeAt(0) === 273){\r\n        return \"d\";\r\n    }\r\n\r\n    return char;\r\n}\r\n\r\nexport const getNameFromFullName = (fullName) => {\r\n    \r\n    let result = \"\";\r\n    const fullNameArr = fullName.split(\" \");\r\n    let name = fullNameArr[fullNameArr.length - 1];\r\n    Array.from(name).forEach(char => {\r\n        result += removeUft8(char)\r\n    });\r\n    \r\n    return result;\r\n}\r\n\r\n//change date => string / fix backend\r\n\r\nexport const changeListToText = (list) => {\r\n    let str = \"\"\r\n    list.map(i => {str += \" |\" +i} );\r\n    return str;\r\n}\r\n\r\nexport const formatDate = (date) =>{\r\n    let d = new Date(date);\r\n    return d.getDate()  + \"/\" + (d.getMonth()+1) + \"/\" + d.getFullYear();\r\n}\r\n\r\nexport const formatDateTime = (date) =>{\r\n    let d = new Date(date);\r\n    return d.getDate()  + \"/\" + (d.getMonth()+1) + \"/\" + d.getFullYear() + \" \"+d.toLocaleTimeString();\r\n}\r\n\r\n// export const handleEmail = (tickDefaultEmail, email, name, code) => {\r\n//     if(tickDefaultEmail){\r\n//         return getNameFromFullName(name)+ \".\" + code + \"@vanlanguni.vn\";\r\n//     }\r\n//     return email;\r\n// }","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Login\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\pages\\Table\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Input\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Button\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Use\\useTable.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Notification\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Popup\\index.jsx",[],["295","296"],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\ConfirmDialog\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\ButtonIcon\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\RadioGroup\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\DatePicker\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Select\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\Info\\index.jsx",["297","298","299"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Avatar, Grid, ListItem, ListItemAvatar, ListItemText, Paper } from \"@material-ui/core\";\r\nimport DateRangeIcon from '@material-ui/icons/DateRange';\r\nimport PhoneIphoneIcon from '@material-ui/icons/PhoneIphone';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport ClassIcon from '@material-ui/icons/Class';\r\nimport ContactsIcon from '@material-ui/icons/Contacts';\r\nimport WcIcon from '@material-ui/icons/Wc';\r\nimport WorkOutlineIcon from '@material-ui/icons/WorkOutline';\r\nimport SchoolIcon from '@material-ui/icons/School';\r\nimport { SET_BACKGROUND_COLOR_PRIMARY } from \"constants/color\";\r\nimport teacherApi from \"api/Teacher/teacherApi\";\r\nimport { useInfoStyles } from \"styles\";\r\nimport { formatDate } from \"utils/converter\";\r\n\r\nexport default function InfoPage() {\r\n\r\n    const classes = useInfoStyles();\r\n    const { teacherId } = useParams();\r\n    const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' })\r\n    const [teacherInfo, setTeacherInfo] = useState({});\r\n\r\n    const fetchData = async () => {\r\n        teacherApi.info(teacherId).then(res=>{\r\n            res.errorMessage\r\n            ? setNotify({\r\n                isOpen: true,\r\n                message: res.errorMessage,\r\n                type: 'error'\r\n            })\r\n            : setTeacherInfo(res.result);            \r\n        });\r\n    };\r\n\r\n    useEffect(() => { fetchData(); }, []);\r\n    \r\n    const renderRow = (icon, title, info) =>{\r\n        return(\r\n            <ListItem className={classes.left}>\r\n                <ListItemAvatar>\r\n                    <Avatar style={SET_BACKGROUND_COLOR_PRIMARY}>\r\n                    {icon}\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={title} secondary={info} />\r\n            </ListItem>\r\n        );\r\n    }\r\n\r\n    const renderRowRight = (icon, title, info) =>{\r\n        return(\r\n            <ListItem className={classes.right}>\r\n                <ListItemAvatar>\r\n                    <Avatar style={SET_BACKGROUND_COLOR_PRIMARY}>\r\n                    {icon}\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={title} secondary={info} />\r\n            </ListItem>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n        <Grid container className={classes.grid}>\r\n            <Grid item xs={12} sm={4}>\r\n                <Paper elevation={4} className={classes.pager}>\r\n                    \r\n                    <h1 className={classes.title}>Teacher Info</h1>\r\n                    {renderRow(<ContactsIcon/>, \"Code\", teacherInfo.code)}\r\n                    {renderRowRight(<PersonIcon />, \"Name\", teacherInfo.name)}\r\n                    {renderRow(<WcIcon />, \"Gender\", teacherInfo.gender)}\r\n                    {renderRowRight(<DateRangeIcon />, \"Birthday\", formatDate(teacherInfo.birthday))}\r\n                    {renderRow(<EmailIcon />, \"Email\", teacherInfo.email)}\r\n                    {renderRowRight(<PhoneIphoneIcon />, \"Phone\", teacherInfo.phone)}\r\n                    {renderRow(<SchoolIcon />, \"Academy\", teacherInfo.academyName)}\r\n                    {renderRowRight(<WorkOutlineIcon />, \"Position\", teacherInfo.positionName)}\r\n                    {renderRow(<ClassIcon />, \"Faculty\", teacherInfo.facultyName)}\r\n                    \r\n                </Paper>\r\n                \r\n            </Grid>\r\n        </Grid>\r\n        </div>\r\n        \r\n    );\r\n}","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\Table\\index.jsx",["300"],"import React, { useEffect, useState } from 'react'\r\nimport {makeStyles, TableBody, TableRow, TableCell, InputAdornment, Toolbar, FormLabel } from '@material-ui/core';\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport { Search } from '@material-ui/icons';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AssignmentIndIcon from '@material-ui/icons/AssignmentInd';\r\nimport useTable from 'custom-fields/Use/useTable';\r\nimport Input from 'custom-fields/Input';\r\nimport ButtonIcon from 'custom-fields/ButtonIcon';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport ConfirmDialog from 'custom-fields/ConfirmDialog';\r\nimport Notification from 'custom-fields/Notification';\r\nimport { changeListToText } from 'utils/converter';\r\nimport teacherApi from 'api/Teacher/teacherApi';\r\nimport { useTableStyles } from 'styles';\r\n\r\nconst headCells = [\r\n    { id: 'id', label: 'ID' },\r\n    { id: 'code', label: 'Code' },\r\n    { id: 'name', label: 'Name' },\r\n    { id: 'academyName', label: 'Academy' },\r\n    { id: 'positonName', label: 'Positon' },\r\n    { id: 'facultyName', label: 'Faculty' },\r\n    { id: 'topicNames', label: 'Topic' },\r\n    { id: 'status', label: 'Status' },\r\n    { id: 'action', label: 'Action' },\r\n]\r\n\r\nexport default function TablePage(props) {\r\n\r\n    const classes = useTableStyles();\r\n    const {history} = props;\r\n    const [records, setRecords] = useState([]);\r\n    const [filterFn, setFilterFn] = useState({ fn: items => { return items; } });\r\n    const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' })\r\n    const [confirmDialog, setConfirmDialog] = useState({ isOpen: false, title: '', subTitle: '' })\r\n\r\n    const fetchData = async () => {\r\n        \r\n        teacherApi.search().then(res=>{\r\n            res.errorMessage\r\n            ? setNotify({\r\n                isOpen: true,\r\n                message: res.errorMessage,\r\n                type: 'error'\r\n            })\r\n            : setRecords(res.result);\r\n\r\n        });\r\n    };\r\n\r\n    useEffect(() => { fetchData(); }, []);\r\n\r\n    const handleSearch = e => {\r\n        let target = e.target;\r\n\r\n        setFilterFn({\r\n            fn: items => {\r\n                if (target.value === \"\")\r\n                    return items;\r\n                else\r\n                    //console.log(items);\r\n                    return items.filter(\r\n                        x => x.code.toLowerCase().includes(target.value.toLowerCase())\r\n                    );\r\n            }\r\n        })\r\n    };\r\n\r\n    const onDelete = id => {\r\n        setConfirmDialog({\r\n            ...confirmDialog,\r\n            isOpen: false\r\n        })\r\n        teacherApi.delete(id).then(res=>{\r\n           res.success\r\n           ? setNotify({\r\n                isOpen: true,\r\n                message: 'Deleted Successfully',\r\n                type: 'error'\r\n            })\r\n           : setNotify({\r\n                isOpen: true,\r\n                message: 'Sory, Deleted Unsuccessfully',\r\n                type: 'error'\r\n            })\r\n        })\r\n    }\r\n\r\n    const onRefresh = () => {\r\n        console.log(\"Refresh!\")\r\n        fetchData();\r\n    }\r\n\r\n\r\n    const {\r\n        TblContainer,\r\n        TblHead,\r\n        TblPagination,\r\n        recordsAfterPagingAndSorting\r\n    } = useTable(records, headCells, filterFn);\r\n\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <FormLabel>\r\n                <h1 className={classes.title}>Teacher List</h1>\r\n            </FormLabel>\r\n            \r\n            <Toolbar>\r\n                <Input\r\n                    label=\"Search For Code\"\r\n                    className={classes.searchInput}\r\n                    InputProps={{\r\n                        startAdornment: (<InputAdornment position=\"start\">\r\n                            <Search />\r\n                        </InputAdornment>)\r\n                    }}\r\n                    onChange={handleSearch}\r\n                />\r\n                <ButtonIcon\r\n                    icon={<CachedIcon />}   \r\n                    onClick= {onRefresh} \r\n                />\r\n            </Toolbar>\r\n\r\n             <TblContainer>\r\n                    <TblHead />\r\n                    <TableBody>\r\n                        {\r\n                            recordsAfterPagingAndSorting().map(item =>\r\n                                (<TableRow key={item.id}>\r\n                                    <TableCell>{item.id}</TableCell>\r\n                                    <TableCell>{item.code}</TableCell>\r\n                                    <TableCell>{item.name}</TableCell>\r\n                                    <TableCell>{item.academyName}</TableCell>\r\n                                    <TableCell>{item.positonName}</TableCell>\r\n                                    <TableCell>{item.facultyName}</TableCell>\r\n                                    <TableCell className={classes.tableCell}>{changeListToText(item.topicNames)}</TableCell>\r\n                                    <TableCell>{item.status}</TableCell>\r\n                                    <TableCell>\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<EditOutlinedIcon fontSize=\"small\" />}   \r\n                                            onClick= {() => history.push(`${history.location.pathname}/${item.id}`)} \r\n                                        />\r\n\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<DeleteIcon fontSize=\"small\" />}    \r\n                                           // onClick= {() => history.push(`/student/delete/${item.id}`)}\r\n                                           onClick={() => {\r\n                                            setConfirmDialog({\r\n                                                isOpen: true,\r\n                                                title: 'Are you sure to delete this teacher?',\r\n                                                subTitle: \"You can't undo this operation\",\r\n                                                onConfirm: () => { onDelete(item.id) }\r\n                                            },)\r\n                                        }}>\r\n                                        </ButtonIcon>\r\n\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<AssignmentIndIcon fontSize=\"small\" />}   \r\n                                            onClick= {() => history.push(`${history.location.pathname}/${item.id}/info`)} \r\n                                        />\r\n                                        \r\n                                    </TableCell>\r\n                                </TableRow>)\r\n                            )\r\n                        }\r\n                    </TableBody>\r\n                </TblContainer>\r\n                <TblPagination />\r\n\r\n            \r\n                <Notification\r\n                    notify={notify}\r\n                    setNotify={setNotify}\r\n                />\r\n                <ConfirmDialog\r\n                    confirmDialog={confirmDialog}\r\n                    setConfirmDialog={setConfirmDialog}\r\n                />\r\n                \r\n        </div>\r\n    );\r\n}","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\AddEdit\\index.jsx",["301"],"import React from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { FormGroup, FormLabel, Grid, makeStyles, } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\nimport Input from 'custom-fields/Input';\r\nimport RadioGroup from 'custom-fields/RadioGroup';\r\nimport DatePicker from 'custom-fields/DatePicker';\r\nimport Select from 'custom-fields/Select';\r\nimport { getNameFromFullName, handleEmail } from 'utils/converter';\r\nimport { SET_BACKGROUND_COLOR_PRIMARY_DARK } from 'constants/color';\r\nimport Button from 'custom-fields/Button';\r\nimport Checkbox from 'custom-fields/Checkbox';\r\nimport FacultyListAPI from 'api/Select/facultyList';\r\nimport Notification from 'custom-fields/Notification';\r\nimport { useFormCustom } from 'custom-fields/Use/useFormCustom';\r\nimport { initialValuesTeacherDefault, GENDER_LIST, LIST_DEFAULT } from 'constants/initialValues';\r\nimport PositionListAPI from 'api/Select/positionList';\r\nimport AcademyListAPI from 'api/Select/academyList';\r\nimport teacherApi from 'api/Teacher/teacherApi';\r\nimport { TYPE } from 'constants/type';\r\nimport { getTeacherCreateObject, getTeacherUpdateObject } from 'utils/getObject';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: \"5rem auto 1rem auto\",\r\n        flexGrow: 1,\r\n    },\r\n   \r\n    icon: {\r\n        fontSize: theme.spacing(10),\r\n    },\r\n    grid: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n    },\r\n    gridLeft: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    gridRight: {\r\n        padding: theme.spacing(2)\r\n    },\r\n    gridItem: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    formGroup: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        //background: \"red\",\r\n    },\r\n   \r\n}));\r\n\r\n\r\nexport default function AddEditPage(props) {\r\n\r\n    const classes = useStyles();\r\n    const { teacherId } = useParams();\r\n    const {history} = props;\r\n    const isAddMode = !teacherId;\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('code' in fieldValues)\r\n            temp.code = fieldValues.code ? \"\" : \"This field is required.\"\r\n        if ('name' in fieldValues)\r\n            temp.name = fieldValues.name ? \"\" : \"This field is required.\"\r\n        if ('email' in fieldValues)\r\n            temp.email = (/$^|.+@.+..+/).test(fieldValues.email) ? \"\" : \"Email is not valid.\"\r\n        if ('phone' in fieldValues)\r\n            temp.phone = fieldValues.phone ? \"\" : \"This field is required.\"\r\n        if ('academyId' in fieldValues)\r\n            temp.academyId = fieldValues.academyId.length !== 0 ? \"\" : \"This field is required.\"\r\n        if ('positionId' in fieldValues)\r\n            temp.positionId = fieldValues.positionId.length !== 0 ? \"\" : \"This field is required.\"\r\n        if ('facultyId' in fieldValues)\r\n            temp.facultyId = fieldValues.facultyId.length !== 0 ? \"\" : \"This field is required.\"\r\n        if ('username' in fieldValues)\r\n            temp.username = fieldValues.username ? \"\" : \"This field is required.\"\r\n        if ('password' in fieldValues)\r\n            temp.password = fieldValues.password ? (fieldValues.password.length > 8 ? \"\" : \"Password must be geater than 8\") : \"This field is required\"\r\n\r\n        setErrors({ ...temp })\r\n\r\n        if (fieldValues === values)\r\n            return Object.values(temp).every(x => x === \"\")\r\n    }\r\n\r\n    const {\r\n        values,\r\n        errors,\r\n        setErrors,\r\n        notify,\r\n        setNotify,\r\n        notFound,\r\n        handleInputChange,\r\n        onReset\r\n    } = useFormCustom(initialValuesTeacherDefault , isAddMode, TYPE.TEACHER, teacherId, true, validate);\r\n\r\n    const handleSubmit = e => {\r\n        //add or update \r\n        e.preventDefault();\r\n        \r\n        if(isAddMode){\r\n            const teacherCreate = getTeacherCreateObject(values);\r\n            teacherApi.create(teacherCreate).then(res=>{\r\n                if(res.success){\r\n                    setNotify({\r\n                        isOpen: true,\r\n                        message: \"Create Successfully\",\r\n                        type: \"success\"\r\n                    });\r\n                    setTimeout(() => history.push('/admin/teacher'), 1500);\r\n                    \r\n                }else{\r\n                    setNotify({\r\n                        isOpen: true,\r\n                        message: \"Sorry, Create Unsuccessfully\",\r\n                        type: \"error\"\r\n                    });\r\n                }\r\n            });\r\n\r\n        }else{\r\n            const teacherUpdate = getTeacherUpdateObject(values);\r\n            teacherApi.update(teacherId, teacherUpdate).then(res=>{\r\n                if(res.success){\r\n                    setNotify({\r\n                        isOpen: true,\r\n                        message: \"Update Successfully\",\r\n                        type: \"success\"\r\n                    });\r\n                    setTimeout(() => history.push('/admin/teacher'), 1500);\r\n                    \r\n                }else{\r\n                    setNotify({\r\n                        isOpen: true,\r\n                        message: \"Sory, Update Unsuccessfully\",\r\n                        type: \"error\"\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div className={classes.root} >\r\n        <FormGroup onSubmit={handleSubmit}>\r\n\r\n            <FormLabel>\r\n                {isAddMode \r\n                ? <h1>Create a teacher</h1>\r\n                : <h1>Update teacher</h1>\r\n                }\r\n            </FormLabel>\r\n            \r\n            <Grid container className={classes.grid}>\r\n            \r\n                <Grid item xs={12} sm={3} className={classes.gridLeft}>\r\n                    <FormGroup>\r\n                    <Input\r\n                        name=\"code\"\r\n                        label=\"Code\"\r\n                        placeholder=\"Ex: 197CT11122\"\r\n                        value={values.code || \"\"}\r\n                        onChange={handleInputChange}\r\n                        error={errors.code}\r\n                        disabled={\r\n                            !isAddMode\r\n                            ? true\r\n                            : false\r\n                        }\r\n                    />\r\n                    <br/>\r\n                    <Input\r\n                        name=\"name\"\r\n                        label=\"Name\"\r\n                        placeholder=\"Ex: Nguyễn Văn An\"\r\n                        value={values.name || \"\"}\r\n                        onChange={handleInputChange}\r\n                        error={errors.name}\r\n                    />\r\n                    <br/>\r\n                    <RadioGroup\r\n                        name=\"gender\"\r\n                        label=\"Gender\"\r\n                        value={values.gender || \"MALE\"}\r\n                        onChange={handleInputChange}\r\n                        items={GENDER_LIST}\r\n                    />\r\n                    <br/>\r\n                    <DatePicker\r\n                        name=\"birthday\"\r\n                        label=\"Birthday\"\r\n                        value={values.birthday || new Date()}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <br/>\r\n                    <Input\r\n                        name=\"phone\"\r\n                        label=\"Phone\"\r\n                        placeholder=\"Ex: 0946111222\"\r\n                        value={values.phone || ''}\r\n                        onChange={handleInputChange}\r\n                        error={errors.phone}\r\n                    />\r\n                    <br/>\r\n                    <Select\r\n                        name=\"positionId\"\r\n                        label=\"Position\"\r\n                        value={values.positionId || ''}\r\n                        onChange={handleInputChange}\r\n                        options={PositionListAPI() || LIST_DEFAULT()}\r\n                        error={errors.positionId}\r\n                    />\r\n                    </FormGroup>\r\n\r\n                </Grid>\r\n                <Grid item xs={12} sm={3} className={classes.gridRight}>\r\n                    <FormGroup>\r\n                    <Select\r\n                        name=\"academyId\"\r\n                        label=\"Academy\"\r\n                        value={values.academyId || ''}\r\n                        onChange={handleInputChange}\r\n                        options={AcademyListAPI() || LIST_DEFAULT()}\r\n                        error={errors.academyId}\r\n                    />\r\n                    <br/>\r\n                    <Select\r\n                        name=\"facultyId\"\r\n                        label=\"Faculty\"\r\n                        value={values.facultyId || \"\"}\r\n                        onChange={handleInputChange}\r\n                        options={FacultyListAPI() || LIST_DEFAULT()}\r\n                        error={errors.facultyId}\r\n                    />\r\n                    <br/>\r\n                    <Input\r\n                        name=\"email\"\r\n                        label=\"Email\"\r\n                        placeholder=\"Ex: an.197CT11122@vanlanguni.vn\"\r\n                        value={\r\n                            ! isAddMode\r\n                            ? values.email = values.email || \"\"\r\n                            :\r\n                                values.tickDefaultEmail \r\n                                ? values.email = getNameFromFullName(values.name)+ \".\" + values.code + \"@vanlanguni.vn\" \r\n                                : values.email \r\n                            \r\n                        }\r\n                        onChange={handleInputChange}\r\n                        error={errors.email}\r\n                        disabled={values.tickDefaultEmail}\r\n                    />\r\n                    <Checkbox\r\n                        name=\"tickDefaultEmail\"\r\n                        label=\"Default\"\r\n                        value={values.tickDefaultEmail || false}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <Input\r\n                        name=\"username\"\r\n                        label=\"Username\"\r\n                        placeholder=\"Ex: an.197CT11122\"\r\n                        value={\r\n                            !isAddMode\r\n                            ? values.username || \"\"\r\n                            : \r\n                                values.tickDefaultUsername \r\n                                ? values.username = getNameFromFullName(values.name)+ \".\" + values.code \r\n                                : values.username\r\n                            \r\n                            }\r\n                        onChange={handleInputChange}\r\n                        error={errors.username}\r\n                        disabled={\r\n                                !isAddMode\r\n                                ? true\r\n                                : values.tickDefaultUsername\r\n                            }\r\n                    />\r\n                    <Checkbox \r\n                        name=\"tickDefaultUsername\"\r\n                        label=\"Default\"\r\n                        value={values.tickDefaultUsername || false}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <Input\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        value={\r\n                            !isAddMode \r\n                            ? values.password || \"\"\r\n                            :\r\n                                values.tickDefaultPassword \r\n                                ? values.password = values.code\r\n                                : values.password\r\n                           \r\n                            }\r\n                        onChange={handleInputChange}\r\n                        error={errors.password}\r\n                        disabled={\r\n                            !isAddMode\r\n                            ? true\r\n                            : values.tickDefaultPassword\r\n                        }\r\n                    \r\n                    />\r\n                    <Checkbox\r\n                        name=\"tickDefaultPassword\"\r\n                        label=\"Default\"\r\n                        value={values.tickDefaultPassword || false}\r\n                        onChange={handleInputChange}\r\n                    />\r\n\r\n                    </FormGroup>\r\n                </Grid>\r\n            \r\n            </Grid>\r\n            <Grid item xs={12} className={classes.submit}>\r\n                <Button\r\n                    type=\"submit\"\r\n                    text={isAddMode ? \"Save\": \"Update\"} \r\n                    startIcon={isAddMode ? <SaveIcon />: <UpdateIcon />}\r\n                    onClick={handleSubmit}\r\n                    background = {SET_BACKGROUND_COLOR_PRIMARY_DARK}\r\n                    disabled={notFound ? true : false}\r\n                />\r\n                <Button\r\n                    text=\"Reset\"\r\n                    color=\"default\"\r\n                    startIcon={<RefreshIcon />}\r\n                    onClick={onReset} \r\n                />\r\n            </Grid>\r\n            </FormGroup>\r\n\r\n            <Notification\r\n                notify={notify}\r\n                setNotify={setNotify}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Checkbox\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\pages\\AddEdit\\index.jsx",["302","303","304","305","306","307","308","309","310","311","312","313","314","315","316"],"import React, { useState, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { FormGroup, FormLabel, Grid, List, ListItem, ListItemText, ListSubheader, makeStyles, Paper, } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\nimport Input from 'custom-fields/Input';\r\nimport { SET_BACKGROUND_COLOR_PRIMARY_DARK } from 'constants/color';\r\nimport Button from 'custom-fields/Button';\r\nimport { useFormCustom } from 'custom-fields/Use/useFormCustom';\r\nimport { useFormStyles } from 'styles';\r\nimport { TYPE } from 'constants/type';\r\nimport { initialFValuesTopicDefault } from 'constants/initialValues';\r\nimport { useSelectTopicStyles } from 'styles';\r\nimport TopicListAPI from 'api/Select/topicListAPI';\r\nimport { gettopicUpdateObject, gettopicCreateObject } from 'utils/getObject';\r\nimport Notification from 'custom-fields/Notification';\r\nimport DatePicker from 'custom-fields/DatePicker';\r\nimport FacultyListAPI from 'api/Select/facultyList';\r\nimport Select from 'custom-fields/Select';\r\nimport TypeTopicListAPI from 'api/Select/typeTopicList';\r\n\r\n\r\nexport default function AddEditPage(props) {\r\n\r\n    const classes = useFormStyles();\r\n    const {history} = props;\r\n    const { topicId } = useParams();\r\n    const isAddMode = !topicId;\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('code' in fieldValues)\r\n            temp.code = fieldValues.code ? \"\" : \"This field is required.\"\r\n        if ('name' in fieldValues)\r\n            temp.name = fieldValues.name ? \"\" : \"This field is required.\"\r\n        if ('topicId' in fieldValues)\r\n            temp.topicId = fieldValues.topicId.length !== 0 ? \"\" : \"This field is required.\"\r\n        \r\n        setErrors({ ...temp })\r\n\r\n        if (fieldValues === values)\r\n            return Object.values(temp).every(x => x === \"\")\r\n    }\r\n\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        notify,\r\n        setNotify,\r\n        notFound,\r\n        handleInputChange,\r\n        onReset\r\n    } = useFormCustom(initialFValuesTopicDefault, isAddMode, TYPE.TOPIC, topicId, true, validate);\r\n   \r\n   const handleSubmit = e => {\r\n    //add or update \r\n        e.preventDefault();\r\n        \r\n        // if(isAddMode){\r\n\r\n        //     const topicCreate = gettopicCreateObject(values);\r\n        //     topicApi.create(topicCreate).then(res=>{\r\n        //         if(res.success){\r\n        //             setNotify({\r\n        //                 isOpen: true,\r\n        //                 message: \"Create Successfully\",\r\n        //                 type: \"success\"\r\n        //             });\r\n        //             setTimeout(() => history.push('/admin/topic'), 1500);\r\n                    \r\n        //         }else{\r\n        //             setNotify({\r\n        //                 isOpen: true,\r\n        //                 message: \"Sorry, Create Unsuccessfully\",\r\n        //                 type: \"error\"\r\n        //             });\r\n        //         }\r\n        //     });\r\n\r\n        // }else{\r\n\r\n        //     const topicUpdate = gettopicUpdateObject(values);\r\n        //     topicApi.update(topicId, topicUpdate).then(res=>{\r\n        //         if(res.success){\r\n        //             setNotify({\r\n        //                 isOpen: true,\r\n        //                 message: \"Update Successfully\",\r\n        //                 type: \"success\"\r\n        //             });\r\n        //             setTimeout(() => history.push('/admin/topic'), 1500);\r\n                    \r\n        //         }else{\r\n        //             setNotify({\r\n        //                 isOpen: true,\r\n        //                 message: \"Sory, Update Unsuccessfully\",\r\n        //                 type: \"error\"\r\n        //             });\r\n        //         }\r\n        //     });\r\n        // }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n        <FormGroup onSubmit={handleSubmit}>\r\n            <FormLabel>\r\n                {isAddMode \r\n                ? <h1>Create a Topic</h1>\r\n                : <h1>Update Topic</h1>\r\n                }\r\n            </FormLabel>\r\n            \r\n            <Grid container className={classes.grid}>\r\n                <Grid item xs={12} sm={3}>\r\n                <FormGroup>\r\n                    <Input\r\n                        name=\"code\"\r\n                        label=\"Code\"\r\n                        placeholder=\"Ex: 197CT11122\"\r\n                        value={values.code}\r\n                        onChange={handleInputChange}\r\n                        error={errors.code}\r\n                    />\r\n                    <br/>\r\n                    <Input\r\n                        name=\"name\"\r\n                        label=\"Name\"\r\n                        placeholder=\"Ex: Nguyễn Văn An\"\r\n                        value={values.name}\r\n                        onChange={handleInputChange}\r\n                        error={errors.name}\r\n                    />\r\n                    <br/>\r\n                    <DatePicker\r\n                        name=\"startTime\"\r\n                        label=\"Start Time\"\r\n                        value={values.startTime}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <br/>\r\n                    <DatePicker\r\n                        name=\"endTime\"\r\n                        label=\"End Time\"\r\n                        value={values.endTime}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <br/>\r\n                    <Select\r\n                        nampe=\"typeTopicId\"\r\n                        label=\"Type Topic\"\r\n                        value={values.typeTopicId}\r\n                        onChange={handleInputChange}\r\n                        options={TypeTopicListAPI() || \"\"}\r\n                        error={errors.typeTopicId}\r\n                    />\r\n                    <br/>\r\n                    DEADLINE??\r\n                    </FormGroup>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} className={classes.submit}>\r\n                <Button\r\n                    type=\"submit\"\r\n                    text={isAddMode ? \"Save\": \"Update\"} \r\n                    startIcon={isAddMode ? <SaveIcon />: <UpdateIcon />}\r\n                    onClick={handleSubmit}\r\n                    background = {SET_BACKGROUND_COLOR_PRIMARY_DARK}\r\n                    disabled={notFound ? true : false}\r\n                />\r\n                <Button\r\n                    text=\"Reset\"\r\n                    color=\"default\"\r\n                    startIcon={<RefreshIcon />}\r\n                    onClick={onReset} \r\n                />\r\n            </Grid>\r\n            \r\n            </FormGroup>\r\n\r\n            <Notification\r\n                notify={notify}\r\n                setNotify={setNotify}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\components\\Deadline\\index.jsx",[],["317","318"],"F:\\MTS-ReactJs\\mts-v2\\src\\app\\App.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\AddEdit\\index.jsx",["319","320","321","322","323","324"],"import React, { useState, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { FormGroup, FormLabel, Grid, List, ListItem, ListItemText, ListSubheader, makeStyles, Paper, } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\nimport Input from 'custom-fields/Input';\r\nimport { SET_BACKGROUND_COLOR_PRIMARY_DARK } from 'constants/color';\r\nimport Button from 'custom-fields/Button';\r\nimport { useFormCustom } from 'custom-fields/Use/useFormCustom';\r\nimport { useFormStyles } from 'styles';\r\nimport { TYPE } from 'constants/type';\r\nimport { initialFValuesTeamDefault } from 'constants/initialValues';\r\nimport { useSelectTopicStyles } from 'styles';\r\nimport TopicListAPI from 'api/Select/topicListAPI';\r\nimport teamApi from 'api/Team/teamApi';\r\nimport { getTeamUpdateObject, getTeamCreateObject } from 'utils/getObject';\r\nimport Notification from 'custom-fields/Notification';\r\n\r\n\r\nexport default function AddEditPage(props) {\r\n\r\n    const classes = useFormStyles();\r\n    const classesSelectTopic = useSelectTopicStyles();\r\n    const {history} = props;\r\n    const { teamId } = useParams();\r\n    const isAddMode = !teamId;\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('code' in fieldValues)\r\n            temp.code = fieldValues.code ? \"\" : \"This field is required.\"\r\n        if ('name' in fieldValues)\r\n            temp.name = fieldValues.name ? \"\" : \"This field is required.\"\r\n        if ('topicId' in fieldValues)\r\n            temp.topicId = fieldValues.topicId.length !== 0 ? \"\" : \"This field is required.\"\r\n        \r\n        setErrors({ ...temp })\r\n\r\n        if (fieldValues === values)\r\n            return Object.values(temp).every(x => x === \"\")\r\n    }\r\n\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        notify,\r\n        setNotify,\r\n        notFound,\r\n        handleInputChange,\r\n        onReset\r\n    } = useFormCustom(initialFValuesTeamDefault, isAddMode, TYPE.TEAM, teamId, true, validate);\r\n\r\n    const handleTouchTap = (topicId, topicName) => {\r\n        setValues({\r\n            ...values,\r\n            [\"topicName\"]: topicName,\r\n            [\"topicId\"]:topicId\r\n        })\r\n   }\r\n   \r\n   const handleSubmit = e => {\r\n    //add or update \r\n        e.preventDefault();\r\n        \r\n        if(isAddMode){\r\n\r\n            const teamCreate = getTeamCreateObject(values);\r\n            teamApi.create(teamCreate).then(res=>{\r\n                if(res.success){\r\n                    setNotify({\r\n                        isOpen: true,\r\n                        message: \"Create Successfully\",\r\n                        type: \"success\"\r\n                    });\r\n                    setTimeout(() => history.push('/admin/team'), 1500);\r\n                    \r\n                }else{\r\n                    setNotify({\r\n                        isOpen: true,\r\n                        message: \"Sorry, Create Unsuccessfully\",\r\n                        type: \"error\"\r\n                    });\r\n                }\r\n            });\r\n\r\n        }else{\r\n\r\n            const teamUpdate = getTeamUpdateObject(values);\r\n            teamApi.update(teamId, teamUpdate).then(res=>{\r\n                if(res.success){\r\n                    setNotify({\r\n                        isOpen: true,\r\n                        message: \"Update Successfully\",\r\n                        type: \"success\"\r\n                    });\r\n                    setTimeout(() => history.push('/admin/team'), 1500);\r\n                    \r\n                }else{\r\n                    setNotify({\r\n                        isOpen: true,\r\n                        message: \"Sory, Update Unsuccessfully\",\r\n                        type: \"error\"\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n        <FormGroup onSubmit={handleSubmit}>\r\n            <FormLabel>\r\n                {isAddMode \r\n                ? <h1>Create a Team</h1>\r\n                : <h1>Update Team</h1>\r\n                }\r\n            </FormLabel>\r\n            \r\n            <Grid container className={classes.grid}>\r\n                <Grid item xs={12} sm={3}>\r\n                    <FormGroup>\r\n                        <Input\r\n                            name=\"name\"\r\n                            label=\"Name\"\r\n                            placeholder=\"Ex: Team vui ve khong quao\"\r\n                            value={values.name || \"\"}\r\n                            onChange={handleInputChange}\r\n                            error={errors.name}\r\n                        />\r\n                        <br/>\r\n                        <Input\r\n                            name=\"topicName\"\r\n                            label=\"Select Topic\"\r\n                            value={values.topicName || \"\"}\r\n                            disabled={true}\r\n                        />\r\n                        <br/>\r\n                        <List className={classesSelectTopic.root} subheader={<li />}>\r\n                            {TopicListAPI().map((items) => (\r\n                                <li key={items.facultyName} className={classesSelectTopic.listSection}>\r\n                                <ul className={classesSelectTopic.ul}>\r\n\r\n                                    <ListSubheader className={classesSelectTopic.subHeader}> {items.facultyName} </ListSubheader>\r\n                                        \r\n                                        {items.topicList.map((item) => (\r\n                                        <ListItem\r\n                                            key={item.topicId}\r\n                                            button\r\n                                            onClick={() => handleTouchTap(item.topicId, item.topicName)}\r\n                                            >\r\n                                            <ListItemText\r\n                                                primary={`- `+item.topicName}\r\n                                            />\r\n                                        </ListItem>\r\n                                        ))}\r\n                                </ul>\r\n                                </li>\r\n                            ))}\r\n                        </List>\r\n                        <br/>\r\n                    </FormGroup>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} className={classes.submit}>\r\n                <Button\r\n                    type=\"submit\"\r\n                    text={isAddMode ? \"Save\": \"Update\"} \r\n                    startIcon={isAddMode ? <SaveIcon />: <UpdateIcon />}\r\n                    onClick={handleSubmit}\r\n                    background = {SET_BACKGROUND_COLOR_PRIMARY_DARK}\r\n                    disabled={notFound ? true : false}\r\n                />\r\n                <Button\r\n                    text=\"Reset\"\r\n                    color=\"default\"\r\n                    startIcon={<RefreshIcon />}\r\n                    onClick={onReset} \r\n                />\r\n            </Grid>\r\n            \r\n            </FormGroup>\r\n\r\n            <Notification\r\n                notify={notify}\r\n                setNotify={setNotify}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","F:\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\Table\\index.jsx",["325"],"import React, { useEffect, useState } from 'react'\r\nimport { TableBody, TableRow, TableCell, InputAdornment, Toolbar, FormLabel } from '@material-ui/core';\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport { Search } from '@material-ui/icons';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport useTable from 'custom-fields/Use/useTable';\r\nimport Input from 'custom-fields/Input';\r\nimport ButtonIcon from 'custom-fields/ButtonIcon';\r\nimport ConfirmDialog from 'custom-fields/ConfirmDialog';\r\nimport Notification from 'custom-fields/Notification';\r\nimport { useTableStyles } from 'styles';\r\nimport teamApi from 'api/Team/teamApi';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst headCells = [\r\n    { id: 'id', label: 'ID' },\r\n    { id: 'name', label: 'Name' },\r\n    { id: 'facultyName', label: 'Faculty' },\r\n    { id: 'topicName', label: 'Topic ' },\r\n    { id: 'studentTotal', label: 'Total' },\r\n    { id: 'status', label: 'Status' },\r\n    { id: 'action', label: 'Action' },\r\n   \r\n]\r\n\r\nexport default function TablePage(props) {\r\n\r\n    const classes = useTableStyles();\r\n    const {history} = props;\r\n    const { topicId } = useParams();\r\n    const [records, setRecords] = useState([]);\r\n    const [filterFn, setFilterFn] = useState({ fn: items => { return items; } });\r\n    const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' })\r\n    const [confirmDialog, setConfirmDialog] = useState({ isOpen: false, title: '', subTitle: '' })\r\n\r\n    //console.log(history.location.pathname); <=> useRouteMatch()???\r\n\r\n    const fetchData = async () => {\r\n\r\n        if(topicId){\r\n            teamApi.searchByTopicId(topicId).then(res=>{\r\n                res.errorMessage\r\n                ? setNotify({\r\n                    isOpen: true,\r\n                    message: res.errorMessage,\r\n                    type: 'error'\r\n                })\r\n                : setRecords(res.result);\r\n\r\n            })\r\n        }else{\r\n            teamApi.search().then(res=>{\r\n                res.errorMessage\r\n                ? setNotify({\r\n                    isOpen: true,\r\n                    message: res.errorMessage,\r\n                    type: 'error'\r\n                })\r\n                : setRecords(res.result);\r\n\r\n            })\r\n        }\r\n    };\r\n\r\n    useEffect(() => { fetchData(); }, []);\r\n\r\n    const handleSearch = e => {\r\n        let target = e.target;\r\n\r\n        setFilterFn({\r\n            fn: items => {\r\n                if (target.value === \"\")\r\n                    return items;\r\n                else\r\n                    //console.log(items);\r\n                    return items.filter(\r\n                        x => x.name.toLowerCase().includes(target.value.toLowerCase())\r\n                    );\r\n            }\r\n        })\r\n    };\r\n\r\n    const onDelete = id => {\r\n        setConfirmDialog({\r\n            ...confirmDialog,\r\n            isOpen: false\r\n        })\r\n        \r\n        teamApi.delete(id).then(res=>{\r\n            res.success\r\n            ? setNotify({\r\n                 isOpen: true,\r\n                 message: 'Deleted Successfully',\r\n                 type: 'error'\r\n             })\r\n            : setNotify({\r\n                 isOpen: true,\r\n                 message: 'Sory, Deleted Unsuccessfully',\r\n                 type: 'error'\r\n             })\r\n        })\r\n    }\r\n\r\n    const onRefresh = () => {\r\n        console.log(\"Refresh!\")\r\n        fetchData();\r\n    }\r\n\r\n    const {\r\n        TblContainer,\r\n        TblHead,\r\n        TblPagination,\r\n        recordsAfterPagingAndSorting\r\n    } = useTable(records, headCells, filterFn);\r\n\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <FormLabel>\r\n                <h1 className={classes.title}>Team List</h1>\r\n            </FormLabel>\r\n            \r\n            <Toolbar>\r\n                <Input\r\n                    label=\"Search For Name\"\r\n                    className={classes.searchInput}\r\n                    InputProps={{\r\n                        startAdornment: (<InputAdornment position=\"start\">\r\n                            <Search />\r\n                        </InputAdornment>)\r\n                    }}\r\n                    onChange={handleSearch}\r\n                />\r\n                <ButtonIcon\r\n                    icon={<CachedIcon />}   \r\n                    onClick= {onRefresh} \r\n                />\r\n            </Toolbar>\r\n\r\n             <TblContainer>\r\n                    <TblHead />\r\n                    <TableBody>\r\n                        {\r\n                            recordsAfterPagingAndSorting().map(item =>\r\n                                (<TableRow key={item.id}>\r\n                                    <TableCell>{item.id}</TableCell>\r\n                                    <TableCell>{item.name}</TableCell>\r\n                                    <TableCell>{item.facultyName}</TableCell>\r\n                                    <TableCell>{item.topicName}</TableCell>\r\n                                    <TableCell>{item.studentTotal}</TableCell>\r\n                                    <TableCell>{item.status}</TableCell>\r\n                             \r\n                                    <TableCell>\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<EditOutlinedIcon fontSize=\"small\" />}   \r\n                                            onClick= {() => history.push(`${history.location.pathname}/${item.id}`)} \r\n                                        />\r\n\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<DeleteIcon fontSize=\"small\" />}    \r\n                                            onClick={() => {\r\n                                                setConfirmDialog({\r\n                                                    isOpen: true,\r\n                                                    title: 'Are you sure to delete this Team?',\r\n                                                    subTitle: \"You can't undo this operation\",\r\n                                                    onConfirm: () => { onDelete(item.id) }\r\n                                                },)\r\n                                        }}>\r\n                                        </ButtonIcon>\r\n\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<VisibilityIcon fontSize=\"small\" />}   \r\n                                            onClick= {() => history.push(`${history.location.pathname}/${item.id}/view`)} \r\n                                        />\r\n                                        \r\n                                    </TableCell>\r\n                                </TableRow>)\r\n                            )\r\n                        }\r\n                    </TableBody>\r\n                </TblContainer>\r\n                <TblPagination />\r\n\r\n            \r\n                <Notification\r\n                    notify={notify}\r\n                    setNotify={setNotify}\r\n                />\r\n                <ConfirmDialog\r\n                    confirmDialog={confirmDialog}\r\n                    setConfirmDialog={setConfirmDialog}\r\n                />\r\n                \r\n        </div>\r\n    );\r\n}","F:\\MTS-ReactJs\\mts-v2\\src\\components\\SideBarForUser\\index.jsx",["326"],"import React from \"react\";\r\nimport {\r\n  ListItem,\r\n  List,\r\n  ListItemIcon,\r\n  ListItemText\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport ViewListIcon from '@material-ui/icons/ViewList';\r\nimport AssignmentIndIcon from '@material-ui/icons/AssignmentInd';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\nimport { SET_COLOR_PRIMARY } from \"constants/color\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  nested: {\r\n    paddingLeft: theme.spacing(4),\r\n  },\r\n}));\r\n\r\nconst StudentSide = props => {\r\n\r\n  const { history } = props;\r\n  const classes = useStyles();\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const itemsList = [\r\n   \r\n    {\r\n      text: \"Topics \",\r\n      icon: <ViewListIcon style={SET_COLOR_PRIMARY}/>,\r\n      onClick: () => history.push(\"/mts/topic\")\r\n    },\r\n    {\r\n      text: \"Add Team\",\r\n      icon: <GroupAddIcon style={SET_COLOR_PRIMARY}/>,\r\n      onClick: () => history.push(\"/mts/team/add\")\r\n    },\r\n    {\r\n      text: \"My Topic\",\r\n      icon: <FolderOpenIcon style={SET_COLOR_PRIMARY}/>,\r\n      onClick: () => history.push(\"/mts/my\")\r\n    },\r\n    {\r\n      text: \"My Info\",\r\n      icon: <AssignmentIndIcon style={SET_COLOR_PRIMARY}/>,\r\n      onClick: () => history.push(\"/mts/info\")\r\n    },\r\n    {\r\n      text: \"My Accout\",\r\n      icon: <AccountCircleIcon style={SET_COLOR_PRIMARY}/>,\r\n      onClick: () => history.push(\"/mts/account\")\r\n    },\r\n\r\n  ];\r\n  return (\r\n      <div>\r\n\r\n        <List \r\n          component=\"div\" \r\n          disablePadding\r\n        >\r\n            {itemsList.map((item) => {\r\n\r\n            const { text, icon, onClick } = item;\r\n\r\n            return (\r\n            <ListItem \r\n              className={classes.nested} \r\n              button key={text} \r\n              onClick={onClick}\r\n              >\r\n                {icon \r\n                && <ListItemIcon>{icon}</ListItemIcon>\r\n                }\r\n\r\n                <ListItemText \r\n                  primary={text} \r\n                  style={SET_COLOR_PRIMARY}\r\n                />\r\n            </ListItem>\r\n            );\r\n        })}\r\n        </List>\r\n       \r\n      </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(StudentSide);","F:\\MTS-ReactJs\\mts-v2\\src\\routes\\User\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\routes\\Admin\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\Select\\facultyList.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\Select\\positionList.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\Select\\academyList.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Use\\useFormCustom.jsx",["327"],"import studentApi from 'api/Student/studentApi';\r\nimport teacherApi from 'api/Teacher/teacherApi';\r\nimport teamApi from 'api/Team/teamApi';\r\nimport { TYPE } from 'constants/type';\r\nimport { useEffect, useState } from 'react'\r\nimport { getStudentObject, getTeacherObject, getTeamObject } from 'utils/getObject';\r\n\r\nexport function useFormCustom(initialFValuesDefault, isAddMode, type , id, validateOnChange = false, validate) {\r\n\r\n    const [values, setValues] = useState(isAddMode ? initialFValuesDefault : []);\r\n    const [errors, setErrors] = useState({});\r\n    const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' });\r\n    const [notFound, setNotFound] = useState(false);\r\n\r\n    function getInfo(){\r\n        console.log(isAddMode);\r\n        console.log(type);\r\n        switch(type){\r\n\r\n            case TYPE.STUDENT:\r\n                studentApi.find(id).then(res => {\r\n                    if(res.errorMessage === null){\r\n                        let object = getStudentObject(res.result);\r\n                        console.log(object);\r\n                        setValues(object);\r\n                    }else{\r\n                        setValues(initialFValuesDefault);\r\n                        setNotify({\r\n                            isOpen: true,\r\n                            message: res.errorMessage,\r\n                            type: 'error'\r\n                        });\r\n                        setNotFound(true);\r\n                    }\r\n                });\r\n                break;\r\n            \r\n            case TYPE.TEACHER:\r\n                teacherApi.find(id).then(res => {\r\n                    if(res.errorMessage === null){\r\n                        let object = getTeacherObject(res.result);\r\n                        console.log(object);\r\n                        setValues(object);\r\n                    }else{\r\n                        setValues(initialFValuesDefault);\r\n                        setNotify({\r\n                            isOpen: true,\r\n                            message: res.errorMessage,\r\n                            type: 'error'\r\n                        });\r\n                        setNotFound(true);\r\n                    }\r\n                });\r\n                break;\r\n\r\n                case TYPE.TEAM:\r\n                    teamApi.find(id).then(res => {\r\n                        if(res.errorMessage === null){\r\n                            let object = getTeamObject(res.result);\r\n                            console.log(object);\r\n                            setValues(object);\r\n                        }else{\r\n                            setValues(initialFValuesDefault);\r\n                            setNotify({\r\n                                isOpen: true,\r\n                                message: res.errorMessage,\r\n                                type: 'error'\r\n                            });\r\n                            setNotFound(true);\r\n                        }\r\n                    });\r\n                    break;\r\n\r\n            default:\r\n                setValues([]);\r\n                setNotFound(true);\r\n                break;\r\n\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    useEffect(isAddMode? ()=>{console.log('add mode!')} : () => { getInfo(); }, []);\r\n      \r\n    const handleInputChange = e => {\r\n        const { name, value } = e.target\r\n        setValues({\r\n            ...values,\r\n            [name]: value\r\n        })\r\n        if (validateOnChange)\r\n            validate({ [name]: value })\r\n    }\r\n\r\n    const onReset = () => {\r\n        setValues(initialFValuesDefault);\r\n        setErrors({})\r\n    }\r\n\r\n    return {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        notify,\r\n        setNotify,\r\n        notFound,\r\n        handleInputChange,\r\n        onReset\r\n    }\r\n}\r\n\r\n\r\n\r\n","F:\\MTS-ReactJs\\mts-v2\\src\\api\\Student\\studentApi.js",["328"],"import { executeErrorHandler } from 'api/Handle/executeError';\r\nimport { handleApi } from 'api/Handle/handleApi';\r\nimport axios from 'axios';\r\nimport urlApi from '../URL/urlApi';\r\n\r\nconst studentApi = {\r\n  \r\n  search: async (params) => {\r\n    try{\r\n\r\n      const url = urlApi.BASE_URL_ADMIN + '/student/search';  \r\n      let result = await handleApi(await axios.get(url));\r\n      console.log(result);\r\n      return result;\r\n\r\n    }catch(error){\r\n      return {\r\n        result: null,\r\n        success: false,\r\n        errorMessage: \"Sorry, Server Connection Problem!\"\r\n      };\r\n    }\r\n  },\r\n\r\n  find: async (id) => {\r\n    try{\r\n\r\n      const url = urlApi.BASE_URL_STUDENT +`/${id}`;\r\n      return await handleApi(await axios.get(url));\r\n      \r\n    }catch(error){\r\n      return {\r\n        result: null,\r\n        success: false,\r\n        errorMessage: \"Sorry, Server Connection Problem!\"\r\n      };\r\n    }\r\n  },\r\n\r\n  info: async(id) => {\r\n    try{\r\n      const url = urlApi.BASE_URL_STUDENT + `/${id}/info`;\r\n      return await handleApi(await axios.get(url));\r\n    }catch(error){\r\n      return {\r\n        result: null,\r\n        success: false,\r\n        errorMessage: \"Sorry, Server Connection Problem!\"\r\n      };\r\n    }\r\n  },\r\n\r\n  create: async(student) => {\r\n    try{\r\n\r\n      const url = urlApi.BASE_URL_ADMIN + '/student';\r\n      return await handleApi(await axios.post(url, student));\r\n\r\n    }catch(error){\r\n      return {\r\n        result: null,\r\n        success: false,\r\n        errorMessage: \"Sorry, Server Connection Problem!\"\r\n      };\r\n    }\r\n  },\r\n\r\n  update: async(id, student) => {\r\n    try{\r\n\r\n      const url = urlApi.BASE_URL_STUDENT + `/${id}`;\r\n      return await handleApi(await axios.post(url, student));\r\n\r\n    }catch(error){\r\n      return {\r\n        result: null,\r\n        success: false,\r\n        errorMessage: \"Sorry, Server Connection Problem!\"\r\n      };\r\n    }\r\n   \r\n  },\r\n\r\n  delete: async(id) => {\r\n    try{\r\n\r\n      const url = urlApi.BASE_URL_ADMIN + `/student/${id}/delete`;\r\n      return await handleApi(await axios.post(url, id));\r\n\r\n    }catch(error){\r\n      return {\r\n        result: null,\r\n        success: false,\r\n        errorMessage: \"Sorry, Server Connection Problem!\"\r\n      };\r\n    }\r\n  },\r\n\r\n}\r\n\r\nexport default studentApi;","F:\\MTS-ReactJs\\mts-v2\\src\\api\\Handle\\handleApi.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\URL\\urlApi.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\Handle\\executeError.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\Teacher\\teacherApi.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\utils\\getObject.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\constants\\color.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\constants\\initialValues.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\constants\\type.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\constants\\dataDemo.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\styles\\index.jsx",[],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\Team\\teamApi.js",["329"],"import { handleApi } from 'api/Handle/handleApi';\r\nimport axios from 'axios';\r\nimport urlApi from '../URL/urlApi';\r\n\r\nconst teamApi = {\r\n  \r\n  search: async (params) => {\r\n    try{\r\n\r\n      const url = urlApi.BASE_URL_TEAM + '/search';  \r\n      let result = await handleApi(await axios.get(url));\r\n      console.log(result);\r\n      return result;\r\n\r\n    }catch(error){\r\n      return {\r\n        result: null,\r\n        success: false,\r\n        errorMessage: \"Sorry, Server Connection Problem!\"\r\n      };\r\n    }\r\n  },\r\n\r\n  searchByTopicId: async (id, params) => {\r\n    try{\r\n\r\n      const url = urlApi.BASE_URL_TEAM + `/search/${id}`;  \r\n      let result = await handleApi(await axios.get(url));\r\n      console.log(result);\r\n      return result;\r\n\r\n    }catch(error){\r\n      return {\r\n        result: null,\r\n        success: false,\r\n        errorMessage: \"Sorry, Server Connection Problem!\"\r\n      };\r\n    }\r\n  },\r\n\r\n  find: async (id) => {\r\n    try{\r\n\r\n      const url = urlApi.BASE_URL_TEAM +`/${id}`;\r\n      return await handleApi(await axios.get(url));\r\n      \r\n    }catch(error){\r\n      return {\r\n        result: null,   \r\n        success: false,\r\n        errorMessage: \"Sorry, Server Connection Problem!\"\r\n      };\r\n    }\r\n  },\r\n\r\n  info: async(id) => {\r\n    try{\r\n      const url = urlApi.BASE_URL_TEAM + `/${id}/info`;\r\n      return await handleApi(await axios.get(url));\r\n    }catch(error){\r\n      return {\r\n        result: null,\r\n        success: false,\r\n        errorMessage: \"Sorry, Server Connection Problem!\"\r\n      };\r\n    }\r\n  },\r\n\r\n  create: async(team) => {\r\n    try{\r\n\r\n      const url = urlApi.BASE_URL_TEAM;\r\n      return await handleApi(await axios.post(url, team));\r\n\r\n    }catch(error){\r\n      return {\r\n        result: null,\r\n        success: false,\r\n        errorMessage: \"Sorry, Server Connection Problem!\"\r\n      };\r\n    }\r\n  },\r\n\r\n  update: async(id, team) => {\r\n    try{\r\n\r\n      const url = urlApi.BASE_URL_TEAM + `/${id}`;\r\n      return await handleApi(await axios.post(url, team));\r\n\r\n    }catch(error){\r\n      return {\r\n        result: null,\r\n        success: false,\r\n        errorMessage: \"Sorry, Server Connection Problem!\"\r\n      };\r\n    }\r\n   \r\n  },\r\n\r\n  delete: async(id) => {\r\n    try{\r\n\r\n      const url = urlApi.BASE_URL_TEAM + `/${id}/delete`;\r\n      return await handleApi(await axios.post(url, id));\r\n\r\n    }catch(error){\r\n      return {\r\n        result: null,\r\n        success: false,\r\n        errorMessage: \"Sorry, Server Connection Problem!\"\r\n      };\r\n    }\r\n  },\r\n\r\n}\r\n\r\nexport default teamApi;","F:\\MTS-ReactJs\\mts-v2\\src\\api\\Topic\\topicApi.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\Select\\topicListAPI.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\api\\Select\\typeTopicList.js",[],"F:\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\Views\\index.jsx",["330","331","332","333","334"],{"ruleId":"335","replacedBy":"336"},{"ruleId":"337","replacedBy":"338"},{"ruleId":"339","severity":1,"message":"340","line":148,"column":18,"nodeType":"341","messageId":"342","endLine":148,"endColumn":20},{"ruleId":"335","replacedBy":"343"},{"ruleId":"337","replacedBy":"344"},{"ruleId":"345","severity":1,"message":"346","line":3,"column":10,"nodeType":"347","messageId":"348","endLine":3,"endColumn":20},{"ruleId":"349","severity":1,"message":"350","line":38,"column":39,"nodeType":"351","endLine":38,"endColumn":41,"suggestions":"352"},{"ruleId":"353","severity":1,"message":"354","line":38,"column":16,"nodeType":"355","messageId":"356","endLine":38,"endColumn":18},{"ruleId":"335","replacedBy":"357"},{"ruleId":"337","replacedBy":"358"},{"ruleId":"345","severity":1,"message":"346","line":3,"column":10,"nodeType":"347","messageId":"348","endLine":3,"endColumn":20},{"ruleId":"345","severity":1,"message":"359","line":23,"column":12,"nodeType":"347","messageId":"348","endLine":23,"endColumn":18},{"ruleId":"349","severity":1,"message":"350","line":38,"column":39,"nodeType":"351","endLine":38,"endColumn":41,"suggestions":"360"},{"ruleId":"345","severity":1,"message":"346","line":2,"column":9,"nodeType":"347","messageId":"348","endLine":2,"endColumn":19},{"ruleId":"345","severity":1,"message":"361","line":11,"column":31,"nodeType":"347","messageId":"348","endLine":11,"endColumn":42},{"ruleId":"345","severity":1,"message":"362","line":1,"column":17,"nodeType":"347","messageId":"348","endLine":1,"endColumn":25},{"ruleId":"345","severity":1,"message":"363","line":1,"column":27,"nodeType":"347","messageId":"348","endLine":1,"endColumn":36},{"ruleId":"345","severity":1,"message":"364","line":3,"column":38,"nodeType":"347","messageId":"348","endLine":3,"endColumn":42},{"ruleId":"345","severity":1,"message":"365","line":3,"column":44,"nodeType":"347","messageId":"348","endLine":3,"endColumn":52},{"ruleId":"345","severity":1,"message":"366","line":3,"column":54,"nodeType":"347","messageId":"348","endLine":3,"endColumn":66},{"ruleId":"345","severity":1,"message":"367","line":3,"column":68,"nodeType":"347","messageId":"348","endLine":3,"endColumn":81},{"ruleId":"345","severity":1,"message":"346","line":3,"column":83,"nodeType":"347","messageId":"348","endLine":3,"endColumn":93},{"ruleId":"345","severity":1,"message":"368","line":3,"column":95,"nodeType":"347","messageId":"348","endLine":3,"endColumn":100},{"ruleId":"345","severity":1,"message":"369","line":14,"column":10,"nodeType":"347","messageId":"348","endLine":14,"endColumn":30},{"ruleId":"345","severity":1,"message":"370","line":15,"column":8,"nodeType":"347","messageId":"348","endLine":15,"endColumn":20},{"ruleId":"345","severity":1,"message":"371","line":16,"column":10,"nodeType":"347","messageId":"348","endLine":16,"endColumn":30},{"ruleId":"345","severity":1,"message":"372","line":16,"column":32,"nodeType":"347","messageId":"348","endLine":16,"endColumn":52},{"ruleId":"345","severity":1,"message":"373","line":19,"column":8,"nodeType":"347","messageId":"348","endLine":19,"endColumn":22},{"ruleId":"345","severity":1,"message":"374","line":27,"column":12,"nodeType":"347","messageId":"348","endLine":27,"endColumn":19},{"ruleId":"345","severity":1,"message":"375","line":48,"column":9,"nodeType":"347","messageId":"348","endLine":48,"endColumn":18},{"ruleId":"335","replacedBy":"376"},{"ruleId":"337","replacedBy":"377"},{"ruleId":"345","severity":1,"message":"362","line":1,"column":17,"nodeType":"347","messageId":"348","endLine":1,"endColumn":25},{"ruleId":"345","severity":1,"message":"363","line":1,"column":27,"nodeType":"347","messageId":"348","endLine":1,"endColumn":36},{"ruleId":"345","severity":1,"message":"346","line":3,"column":83,"nodeType":"347","messageId":"348","endLine":3,"endColumn":93},{"ruleId":"345","severity":1,"message":"368","line":3,"column":95,"nodeType":"347","messageId":"348","endLine":3,"endColumn":100},{"ruleId":"378","severity":1,"message":"379","line":59,"column":13,"nodeType":"380","messageId":"381","endLine":59,"endColumn":37,"fix":"382"},{"ruleId":"378","severity":1,"message":"383","line":60,"column":13,"nodeType":"380","messageId":"381","endLine":60,"endColumn":32,"fix":"384"},{"ruleId":"349","severity":1,"message":"350","line":67,"column":39,"nodeType":"351","endLine":67,"endColumn":41,"suggestions":"385"},{"ruleId":"345","severity":1,"message":"386","line":34,"column":9,"nodeType":"347","messageId":"348","endLine":34,"endColumn":20},{"ruleId":"349","severity":1,"message":"387","line":84,"column":5,"nodeType":"347","endLine":84,"endColumn":14},{"ruleId":"345","severity":1,"message":"388","line":1,"column":10,"nodeType":"347","messageId":"348","endLine":1,"endColumn":29},{"ruleId":"389","severity":1,"message":"390","line":24,"column":3,"nodeType":"391","messageId":"342","endLine":24,"endColumn":9},{"ruleId":"345","severity":1,"message":"392","line":9,"column":8,"nodeType":"347","messageId":"348","endLine":9,"endColumn":20},{"ruleId":"345","severity":1,"message":"393","line":12,"column":8,"nodeType":"347","messageId":"348","endLine":12,"endColumn":16},{"ruleId":"345","severity":1,"message":"394","line":15,"column":8,"nodeType":"347","messageId":"348","endLine":15,"endColumn":13},{"ruleId":"345","severity":1,"message":"359","line":39,"column":10,"nodeType":"347","messageId":"348","endLine":39,"endColumn":16},{"ruleId":"349","severity":1,"message":"350","line":54,"column":37,"nodeType":"351","endLine":54,"endColumn":39,"suggestions":"395"},"no-native-reassign",["396"],"no-negated-in-lhs",["397"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["396"],["397"],"no-unused-vars","'makeStyles' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["398"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["396"],["397"],"'notify' is assigned a value but never used.",["399"],"'handleEmail' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'ListSubheader' is defined but never used.","'Paper' is defined but never used.","'useSelectTopicStyles' is defined but never used.","'TopicListAPI' is defined but never used.","'gettopicUpdateObject' is defined but never used.","'gettopicCreateObject' is defined but never used.","'FacultyListAPI' is defined but never used.","'history' is assigned a value but never used.","'setValues' is assigned a value but never used.",["396"],["397"],"no-useless-computed-key","Unnecessarily computed property [\"topicName\"] found.","Property","unnecessarilyComputedProperty",{"range":"400","text":"401"},"Unnecessarily computed property [\"topicId\"] found.",{"range":"402","text":"403"},["404"],"'handleClick' is assigned a value but never used.","React Hook useEffect received a function whose dependencies are unknown. Pass an inline function instead.","'executeErrorHandler' is defined but never used.","no-dupe-keys","Duplicate key 'search'.","ObjectExpression","'ListItemIcon' is defined but never used.","'SendIcon' is defined but never used.","'Input' is defined but never used.",["405"],"no-global-assign","no-unsafe-negation",{"desc":"406","fix":"407"},{"desc":"406","fix":"408"},[2269,2282],"\"topicName\"",[2308,2319],"\"topicId\"",{"desc":"406","fix":"409"},{"desc":"406","fix":"410"},"Update the dependencies array to be: [fetchData]",{"range":"411","text":"412"},{"range":"413","text":"412"},{"range":"414","text":"412"},{"range":"415","text":"412"},[1537,1539],"[fetchData]",[1595,1597],[2447,2449],[1888,1890]]