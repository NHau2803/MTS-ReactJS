[{"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\index.js":"1","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\reportWebVitals.js":"2","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\app\\App.js":"3","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Login\\index.jsx":"4","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\routes\\Admin\\index.jsx":"5","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\Loader\\index.jsx":"6","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\Header\\index.jsx":"7","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\NotFound\\index.jsx":"8","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\routes\\User\\index.jsx":"9","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Home\\index.jsx":"10","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\index.jsx":"11","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\index.jsx":"12","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\index.jsx":"13","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Account\\index.jsx":"14","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\index.jsx":"15","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Account\\pages\\Update\\index.jsx":"16","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\NotiProfileSide.jsx":"17","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\Info\\index.jsx":"18","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\pages\\Table\\index.jsx":"19","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\styles\\Color\\index.js":"20","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\styles\\Login\\index.jsx":"21","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\index.jsx":"22","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Input\\index.jsx":"23","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Button\\index.jsx":"24","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\SideBarForUser\\index.jsx":"25","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\pages\\AddEdit\\index.jsx":"26","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TeamSide.jsx":"27","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\AddEdit\\index.jsx":"28","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\AddEdit\\index.jsx":"29","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\Info\\index.jsx":"30","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\utils\\converter.js":"31","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Account\\pages\\Table\\index.jsx":"32","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\Table\\index.jsx":"33","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\Table\\index.jsx":"34","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\AccountSide.jsx":"35","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\HomeSide.jsx":"36","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\StudentSide.jsx":"37","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TeacherSide.jsx":"38","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TopicSide.jsx":"39","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Use\\useTableCustom.jsx":"40","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\Topic\\index.js":"41","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\styles\\Table\\index.jsx":"42","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Notification\\index.jsx":"43","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\ConfirmDialog\\index.jsx":"44","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\ButtonIcon\\index.jsx":"45","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\utils\\getObject.js":"46","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\Team\\index.js":"47","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\Teacher\\index.js":"48","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\Student\\index.js":"49","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\styles\\Side\\index.jsx":"50","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\styles\\Form\\index.jsx":"51","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\styles\\Info\\index.jsx":"52","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\constants\\InitialValues\\index.js":"53","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Select\\index.jsx":"54","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\URL\\index.js":"55","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\Handle\\handleApi.js":"56","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\GetListForSelect\\positionList.js":"57","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\GetListForSelect\\academyList.js":"58","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\constants\\Type\\type.js":"59","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\GetListForSelect\\facultyList.js":"60","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\GetListForSelect\\typeTopicListAPI.js":"61","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\Account\\index.js":"62","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Use\\useFormCustom.jsx":"63","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Checkbox\\index.jsx":"64","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\DatePicker\\index.jsx":"65","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\RadioGroup\\index.jsx":"66","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\DateTimePicker\\index.jsx":"67","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\GetListForSelect\\topicListAPI.js":"68","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\styles\\SelectTopic\\index.jsx":"69","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\utils\\validation.js":"70","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\pages\\AddEdit\\index.jsx":"71","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\pages\\Views\\index.jsx":"72","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\pages\\Table\\index.jsx":"73","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\AnalysisSide.jsx":"74","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Chart\\Analysis\\index.jsx":"75","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Chart\\Analysis\\components\\index.jsx":"76","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\Analysis\\index.js":"77","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\Login\\index.js":"78"},{"size":478,"mtime":1612624921304,"results":"79","hashOfConfig":"80"},{"size":362,"mtime":499162500000,"results":"81","hashOfConfig":"80"},{"size":875,"mtime":1612628540611,"results":"82","hashOfConfig":"80"},{"size":4855,"mtime":1613923826827,"results":"83","hashOfConfig":"80"},{"size":2439,"mtime":1613919498376,"results":"84","hashOfConfig":"80"},{"size":791,"mtime":1612170899960,"results":"85","hashOfConfig":"80"},{"size":4679,"mtime":1613919250302,"results":"86","hashOfConfig":"80"},{"size":350,"mtime":1611891067957,"results":"87","hashOfConfig":"80"},{"size":1625,"mtime":1613923823466,"results":"88","hashOfConfig":"80"},{"size":336,"mtime":1611927046554,"results":"89","hashOfConfig":"80"},{"size":1159,"mtime":1613703822030,"results":"90","hashOfConfig":"80"},{"size":976,"mtime":1612749091124,"results":"91","hashOfConfig":"80"},{"size":968,"mtime":1612624903112,"results":"92","hashOfConfig":"80"},{"size":915,"mtime":1612969056170,"results":"93","hashOfConfig":"80"},{"size":968,"mtime":1613703530156,"results":"94","hashOfConfig":"80"},{"size":5112,"mtime":1613703700494,"results":"95","hashOfConfig":"80"},{"size":4766,"mtime":1613741383610,"results":"96","hashOfConfig":"80"},{"size":3720,"mtime":1613703750127,"results":"97","hashOfConfig":"80"},{"size":8243,"mtime":1613703807079,"results":"98","hashOfConfig":"80"},{"size":1237,"mtime":1613795025648,"results":"99","hashOfConfig":"80"},{"size":712,"mtime":1613072620323,"results":"100","hashOfConfig":"80"},{"size":723,"mtime":1613794711617,"results":"101","hashOfConfig":"80"},{"size":818,"mtime":1613708364528,"results":"102","hashOfConfig":"80"},{"size":872,"mtime":1612709235287,"results":"103","hashOfConfig":"80"},{"size":2597,"mtime":1613229303453,"results":"104","hashOfConfig":"80"},{"size":11642,"mtime":1613727561850,"results":"105","hashOfConfig":"80"},{"size":2402,"mtime":1613073281730,"results":"106","hashOfConfig":"80"},{"size":10926,"mtime":1613703745220,"results":"107","hashOfConfig":"80"},{"size":11757,"mtime":1613703769244,"results":"108","hashOfConfig":"80"},{"size":3592,"mtime":1613072818346,"results":"109","hashOfConfig":"80"},{"size":1646,"mtime":1613698789649,"results":"110","hashOfConfig":"80"},{"size":8273,"mtime":1613703722774,"results":"111","hashOfConfig":"80"},{"size":7352,"mtime":1613703777593,"results":"112","hashOfConfig":"80"},{"size":7281,"mtime":1613703755595,"results":"113","hashOfConfig":"80"},{"size":2357,"mtime":1613073281730,"results":"114","hashOfConfig":"80"},{"size":713,"mtime":1613072620324,"results":"115","hashOfConfig":"80"},{"size":2506,"mtime":1613073245535,"results":"116","hashOfConfig":"80"},{"size":2341,"mtime":1613732479967,"results":"117","hashOfConfig":"80"},{"size":2459,"mtime":1613073281730,"results":"118","hashOfConfig":"80"},{"size":3924,"mtime":1613072620324,"results":"119","hashOfConfig":"80"},{"size":3002,"mtime":1613573336119,"results":"120","hashOfConfig":"80"},{"size":297,"mtime":1613072103812,"results":"121","hashOfConfig":"80"},{"size":1001,"mtime":1612176107875,"results":"122","hashOfConfig":"80"},{"size":1522,"mtime":1612183677279,"results":"123","hashOfConfig":"80"},{"size":665,"mtime":1612709157898,"results":"124","hashOfConfig":"80"},{"size":5908,"mtime":1613892273487,"results":"125","hashOfConfig":"80"},{"size":3542,"mtime":1613901170502,"results":"126","hashOfConfig":"80"},{"size":2194,"mtime":1613923814992,"results":"127","hashOfConfig":"80"},{"size":2218,"mtime":1613923809362,"results":"128","hashOfConfig":"80"},{"size":299,"mtime":1613073132700,"results":"129","hashOfConfig":"80"},{"size":776,"mtime":1613727562177,"results":"130","hashOfConfig":"80"},{"size":739,"mtime":1613072620324,"results":"131","hashOfConfig":"80"},{"size":2481,"mtime":1613573823262,"results":"132","hashOfConfig":"80"},{"size":1488,"mtime":1612808580579,"results":"133","hashOfConfig":"80"},{"size":351,"mtime":1613904148566,"results":"134","hashOfConfig":"80"},{"size":773,"mtime":1612863137990,"results":"135","hashOfConfig":"80"},{"size":532,"mtime":1612801183454,"results":"136","hashOfConfig":"80"},{"size":525,"mtime":1612801083591,"results":"137","hashOfConfig":"80"},{"size":226,"mtime":1613319931814,"results":"138","hashOfConfig":"80"},{"size":523,"mtime":1612779174120,"results":"139","hashOfConfig":"80"},{"size":539,"mtime":1613072847718,"results":"140","hashOfConfig":"80"},{"size":2336,"mtime":1613659640550,"results":"141","hashOfConfig":"80"},{"size":3680,"mtime":1613704696203,"results":"142","hashOfConfig":"80"},{"size":984,"mtime":1613072620324,"results":"143","hashOfConfig":"80"},{"size":906,"mtime":1613314346994,"results":"144","hashOfConfig":"80"},{"size":1231,"mtime":1612020005178,"results":"145","hashOfConfig":"80"},{"size":1000,"mtime":1613314551068,"results":"146","hashOfConfig":"80"},{"size":518,"mtime":1612863919908,"results":"147","hashOfConfig":"80"},{"size":511,"mtime":1613072197043,"results":"148","hashOfConfig":"80"},{"size":1612,"mtime":1613898787833,"results":"149","hashOfConfig":"80"},{"size":7057,"mtime":1613704115105,"results":"150","hashOfConfig":"80"},{"size":8153,"mtime":1613902333099,"results":"151","hashOfConfig":"80"},{"size":7512,"mtime":1613072818346,"results":"152","hashOfConfig":"80"},{"size":750,"mtime":1613795350075,"results":"153","hashOfConfig":"80"},{"size":5463,"mtime":1613894353145,"results":"154","hashOfConfig":"80"},{"size":2058,"mtime":1613837457030,"results":"155","hashOfConfig":"80"},{"size":559,"mtime":1613881083813,"results":"156","hashOfConfig":"80"},{"size":1027,"mtime":1613913916732,"results":"157","hashOfConfig":"80"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},"abgurw",{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"160"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"160"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"160"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"160"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"160"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"160"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"160"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"160"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"160"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"160"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"160"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"160"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"160"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"160"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"315","usedDeprecatedRules":"160"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"160"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"160"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"160"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\index.js",[],["333","334"],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\reportWebVitals.js",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\app\\App.js",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Login\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\routes\\Admin\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\Loader\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\Header\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\NotFound\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\routes\\User\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Home\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Account\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Account\\pages\\Update\\index.jsx",["335","336","337","338"],"import React from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { FormGroup, FormLabel, Grid } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\nimport Input from 'custom-fields/Input';\r\nimport { SET_BACKGROUND_COLOR_PRIMARY_DARK } from 'styles/Color';\r\nimport Button from 'custom-fields/Button';\r\nimport { useFormCustom } from 'custom-fields/Use/useFormCustom';\r\nimport { TYPE } from 'constants/Type/type';\r\nimport { useSelectTopicStyles } from 'styles/SelectTopic';\r\nimport Notification from 'custom-fields/Notification';\r\nimport { useFormStyles } from 'styles/Form';\r\nimport { initialValuesAccountDefault } from 'constants/InitialValues';\r\n\r\n\r\nexport default function UpdateAccountPage(props) {\r\n\r\n    const classes = useFormStyles();\r\n    const classesSelectTopic = useSelectTopicStyles();\r\n    const {history} = props;\r\n    const { teamId } = useParams();\r\n    const isAddMode = !teamId;\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('username' in fieldValues)\r\n            temp.username = fieldValues.username ? \"\" : \"This field is required.\"\r\n        if ('passwordOld' in fieldValues)\r\n            temp.passwordOld = fieldValues.passwordOld ? (fieldValues.passwordOld.length > 8 ? \"\" : \"Password must be geater than 8\") : \"This field is required\"\r\n        if ('passwordNew' in fieldValues)\r\n            temp.passwordNew = fieldValues.passwordNew ? (fieldValues.passwordNew.length > 8 ? \"\" : \"Password must be geater than 8\") : \"This field is required\"\r\n        if ('passwordConfirm' in fieldValues)\r\n            temp.passwordConfirm = fieldValues.passwordConfirm === values.passwordNew ? \"\" : \"Password do not match\"\r\n\r\n        setErrors({ ...temp })\r\n\r\n        if (fieldValues === values)\r\n            return Object.values(temp).every(x => x === \"\")\r\n    }\r\n\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        notify,\r\n        setNotify,\r\n        notFound,\r\n        handleInputChange,\r\n        onReset\r\n    } = useFormCustom(initialValuesAccountDefault, false, TYPE.ACCOUNT, teamId, true, validate);\r\n   \r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n        <FormGroup onSubmit={handleSubmit}>\r\n            <FormLabel>\r\n                <h1>Update Password</h1>\r\n            </FormLabel>\r\n            \r\n            <Grid container className={classes.grid}>\r\n                <Grid item xs={12} sm={3}>\r\n                    <FormGroup>\r\n                        <Input\r\n                            name=\"username\"\r\n                            label=\"username\"\r\n                            value={values.username || \"\"}\r\n                            onChange={handleInputChange}\r\n                            error={errors.username}\r\n                            disabled={true}\r\n                        />\r\n                        <br/>\r\n                        <Input\r\n                            name=\"passwordOld\"\r\n                            label=\"password Old\"\r\n                            value={values.passwordOld || \"\"}\r\n                            onChange={handleInputChange}\r\n                            error={errors.passwordOld}\r\n                        />\r\n                        <br/>\r\n                        <Input\r\n                            name=\"passwordNew\"\r\n                            label=\"Password New\"\r\n                            value={values.passwordNew || \"\"}\r\n                            onChange={handleInputChange}\r\n                            error={errors.passwordNew}\r\n                        />\r\n                        <br/>\r\n                        <Input\r\n                            name=\"passwordConfirm\"\r\n                            label=\"Password Confirm\"\r\n                            value={values.passwordConfirm || \"\"}\r\n                            onChange={handleInputChange}\r\n                            error={errors.passwordConfirm}\r\n                        />\r\n                        <br/>\r\n                    </FormGroup>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} className={classes.submit}>\r\n                <Button\r\n                    type=\"submit\"\r\n                    text={isAddMode ? \"Save\": \"Update\"} \r\n                    startIcon={isAddMode ? <SaveIcon />: <UpdateIcon />}\r\n                    onClick={handleSubmit}\r\n                    background = {SET_BACKGROUND_COLOR_PRIMARY_DARK}\r\n                    disabled={true}\r\n                />\r\n                <Button\r\n                    text=\"Reset\"\r\n                    color=\"default\"\r\n                    startIcon={<RefreshIcon />}\r\n                    onClick={onReset} \r\n                />\r\n            </Grid>\r\n            \r\n            </FormGroup>\r\n\r\n            <Notification\r\n                notify={notify}\r\n                setNotify={setNotify}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\NotiProfileSide.jsx",["339","340","341"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport PowerSettingsNewIcon from '@material-ui/icons/PowerSettingsNew';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport ButtonIcon from 'custom-fields/ButtonIcon'\r\nimport {NavLink} from 'react-router-dom'\r\nimport { COLOR_PRIMARY } from 'styles/Color';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n    display: \"flex\",\r\n    justifyContent: 'flex-end',\r\n  },\r\n  sectionDesktop: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('md')]: {\r\n      display: 'flex',\r\n    },\r\n  },\r\n  sectionMobile: {\r\n    display: 'flex',\r\n    [theme.breakpoints.up('md')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function NotiProfileSide(props) {\r\n\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\r\n\r\n  const isMenuOpen = Boolean(anchorEl);\r\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\r\n\r\n  const handleProfileMenuOpen = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMobileMenuClose = () => {\r\n    setMobileMoreAnchorEl(null);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n    handleMobileMenuClose();\r\n  };\r\n\r\n  const handleMobileMenuOpen = (event) => {\r\n    setMobileMoreAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  // const handleLogout = () =>{\r\n    \r\n\r\n  // }\r\n\r\n  const menuId = 'primary-search-account-menu';\r\n  // const renderMenu = (\r\n  //   <Menu\r\n  //     anchorEl={anchorEl}\r\n  //     anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n  //     id={menuId}\r\n  //     keepMounted\r\n  //     transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n  //     open={isMenuOpen}\r\n  //     onClose={handleMenuClose}\r\n  //   >\r\n  //     <MenuItem onClick={handleMenuClose}>Profile</MenuItem>\r\n  //     <MenuItem onClick={handleMenuClose}>My account</MenuItem>\r\n  //     <MenuItem onClick={handleMenuClose}>Logout</MenuItem>\r\n  //   </Menu>\r\n  // );\r\n\r\n  const mobileMenuId = 'primary-search-account-menu-mobile';\r\n\r\n  const renderMobileMenu = (\r\n    <Menu\r\n      anchorEl={mobileMoreAnchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={mobileMenuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isMobileMenuOpen}\r\n      onClose={handleMobileMenuClose}\r\n    >\r\n      <MenuItem>\r\n        <ButtonIcon aria-label=\"show 4 new mails\" color=\"inherit\">\r\n          <Badge badgeContent={4} color=\"secondary\">\r\n            <MailIcon />\r\n          </Badge>\r\n        </ButtonIcon>\r\n        <p>Messages</p>\r\n      </MenuItem>\r\n\r\n      <MenuItem>\r\n        <ButtonIcon aria-label=\"show 11 new notifications\" color=\"inherit\">\r\n          <Badge badgeContent={11} color=\"secondary\">\r\n            <NotificationsIcon />\r\n          </Badge>\r\n        </ButtonIcon>\r\n        <p>Notifications</p>\r\n      </MenuItem>\r\n\r\n      <NavLink\r\n          to=\"/\"\r\n          exact\r\n      >\r\n        <ButtonIcon\r\n            edge=\"end\"\r\n            aria-controls={menuId}\r\n            color={COLOR_PRIMARY}\r\n            icon={<PowerSettingsNewIcon />}\r\n          >\r\n            Logout\r\n          </ButtonIcon>\r\n      </NavLink>\r\n\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.grow}>\r\n     \r\n      <div className={classes.sectionDesktop}>\r\n        <ButtonIcon aria-label=\"show 4 new mails\" color=\"inherit\">\r\n          <Badge badgeContent={4} color=\"secondary\">\r\n            <MailIcon />\r\n          </Badge>\r\n        </ButtonIcon>\r\n\r\n        <ButtonIcon aria-label=\"show 18 new notifications\" color=\"inherit\">\r\n          <Badge badgeContent={18} color=\"secondary\">\r\n            <NotificationsIcon />\r\n          </Badge>\r\n        </ButtonIcon>\r\n\r\n        <NavLink\r\n            to=\"/\"\r\n            exact\r\n        >\r\n          <ButtonIcon\r\n            edge=\"end\"\r\n            aria-controls={menuId}\r\n            color={COLOR_PRIMARY}\r\n            icon={<PowerSettingsNewIcon />}\r\n          />\r\n          \r\n        </NavLink>\r\n        \r\n      </div>\r\n\r\n      <div className={classes.sectionMobile}>\r\n        <ButtonIcon\r\n          aria-label=\"show more\"\r\n          aria-controls={mobileMenuId}\r\n          aria-haspopup=\"true\"\r\n          onClick={handleMobileMenuOpen}\r\n          color=\"inherit\"\r\n          icon={<MoreIcon />}\r\n        />\r\n      </div>\r\n \r\n      {renderMobileMenu}\r\n      {/* {renderMenu} */}\r\n    </div>\r\n  );\r\n}\r\n","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\Info\\index.jsx",["342"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Avatar, Grid, ListItem, ListItemAvatar, ListItemText, Paper } from \"@material-ui/core\";\r\nimport DateRangeIcon from '@material-ui/icons/DateRange';\r\nimport PhoneIphoneIcon from '@material-ui/icons/PhoneIphone';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport ClassIcon from '@material-ui/icons/Class';\r\nimport ContactsIcon from '@material-ui/icons/Contacts';\r\nimport WcIcon from '@material-ui/icons/Wc';\r\nimport { SET_BACKGROUND_COLOR_PRIMARY } from \"styles/Color\";\r\nimport studentApi from \"api/Student\";\r\nimport Notification from \"custom-fields/Notification\";\r\nimport { formatDate } from \"utils/converter\";\r\nimport { useInfoStyles } from \"styles/Info\";\r\n\r\n\r\nexport default function InfoPage() {\r\n\r\n    const classes = useInfoStyles();\r\n    const { studentId } = useParams();\r\n    const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' })\r\n    const [studentInfo, setStudentInfo] = useState({});\r\n\r\n    const fetchData = async () => {\r\n        if(studentId !== undefined){\r\n            studentApi.info(studentId).then(res=>{\r\n                res.errorMessage\r\n                ? setNotify({\r\n                    isOpen: true,\r\n                    message: res.errorMessage,\r\n                    type: 'error'\r\n                })\r\n                : setStudentInfo(res.result);            \r\n            });\r\n        }else{\r\n            setNotify({\r\n                isOpen: true,\r\n                message: \"Sory, Not Found\",\r\n                type: 'error'\r\n            })\r\n            setStudentInfo([]); \r\n        }\r\n      \r\n    };\r\n\r\n    useEffect(() => { fetchData(); }, []);\r\n    \r\n    const renderRow = (icon, title, info) =>{\r\n        return(\r\n            <ListItem className={classes.left}>\r\n                <ListItemAvatar>\r\n                    <Avatar style={SET_BACKGROUND_COLOR_PRIMARY}>\r\n                    {icon}\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={title} secondary={info} />\r\n            </ListItem>\r\n        );\r\n    }\r\n\r\n    const renderRowRight = (icon, title, info) =>{\r\n        return(\r\n            <ListItem className={classes.right}>\r\n                <ListItemAvatar>\r\n                    <Avatar style={SET_BACKGROUND_COLOR_PRIMARY}>\r\n                    {icon}\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={title} secondary={info} />\r\n            </ListItem>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n        <Grid container className={classes.grid}>\r\n            <Grid item xs={12} sm={4}>\r\n                <Paper elevation={4} className={classes.pager}>\r\n                    \r\n                    <h1 className={classes.title}>Student Info</h1>\r\n                    {renderRow(<ContactsIcon/>, \"Code\", studentInfo.code)}\r\n                    {renderRowRight(<PersonIcon />, \"Name\", studentInfo.name)}\r\n                    {renderRow(<WcIcon />, \"Gender\", studentInfo.gender)}\r\n                    {renderRowRight(<DateRangeIcon />, \"Birthday\", formatDate(studentInfo.birthday))}\r\n                    {renderRow(<EmailIcon />, \"Email\", studentInfo.email)}\r\n                    {renderRowRight(<PhoneIphoneIcon />, \"Phone\", studentInfo.phone)}\r\n                    {renderRow(<ClassIcon />, \"Faculty\", studentInfo.facultyName)}\r\n                </Paper>\r\n                \r\n            </Grid>\r\n        </Grid>\r\n        <Notification\r\n            notify={notify}\r\n            setNotify={setNotify}\r\n        />\r\n        </div>\r\n        \r\n    );\r\n}","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\pages\\Table\\index.jsx",["343"],"import React, { useEffect, useState } from 'react'\r\nimport { TableBody, TableRow, TableCell, InputAdornment, Toolbar, FormLabel } from '@material-ui/core';\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport { Search } from '@material-ui/icons';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport useTableCustom from 'custom-fields/Use/useTableCustom';\r\nimport Input from 'custom-fields/Input';\r\nimport ButtonIcon from 'custom-fields/ButtonIcon';\r\nimport ConfirmDialog from 'custom-fields/ConfirmDialog';\r\nimport Notification from 'custom-fields/Notification';\r\nimport { useTableStyles } from 'styles/Table';\r\nimport topicApi from 'api/Topic';\r\nimport { changeListToText, formatDateTime } from 'utils/converter';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst headCells = [\r\n    { id: 'id', label: 'ID' },\r\n    { id: 'name', label: 'Name' },\r\n    { id: 'teamNames', label: 'Team ' },\r\n    { id: 'facultyName', label: 'Faculty ' },\r\n    { id: 'startTime', label: 'Start Time' },\r\n    { id: 'endTime', label: 'End Time' },\r\n    { id: 'teacherName', label: 'Teacher' },\r\n    { id: 'status', label: 'Status' },\r\n    { id: 'action', label: 'Action' },\r\n   \r\n]\r\n\r\nexport default function TablePage(props) {\r\n\r\n    const classes = useTableStyles();\r\n    const {history} = props;\r\n    const { studentId } = useParams();\r\n    const [records, setRecords] = useState([]);\r\n    const [filterFn, setFilterFn] = useState({ fn: items => { return items; } });\r\n    const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' })\r\n    const [confirmDialog, setConfirmDialog] = useState({ isOpen: false, title: '', subTitle: '' })\r\n\r\n    //console.log(history.location.pathname); <=> useRouteMatch()???\r\n\r\n    const fetchData = async () => {\r\n        \r\n        if(studentId === undefined){\r\n            topicApi.search().then(res=>{\r\n                \r\n                res.errorMessage\r\n                ? setNotify({\r\n                    isOpen: true,\r\n                    message: res.errorMessage,\r\n                    type: 'error'\r\n                })\r\n                : setRecords(res.result);\r\n\r\n            })\r\n         \r\n        }else{\r\n            topicApi.searchByStudentId(studentId).then(res=>{\r\n                \r\n                res.errorMessage\r\n                ? setNotify({\r\n                    isOpen: true,\r\n                    message: res.errorMessage,\r\n                    type: 'error'\r\n                })\r\n                : setRecords(res.result);\r\n\r\n            })\r\n        }\r\n    };\r\n\r\n    useEffect(() => { fetchData(); }, []);\r\n\r\n    const handleSearch = e => {\r\n        let target = e.target;\r\n\r\n        setFilterFn({\r\n            fn: items => {\r\n                if (target.value === \"\")\r\n                    return items;\r\n                else\r\n                    //console.log(items);\r\n                    return items.filter(\r\n                        x => x.name.toLowerCase().includes(target.value.toLowerCase())\r\n                    );\r\n            }\r\n        })\r\n    };\r\n\r\n    const onDelete = id => {\r\n        setConfirmDialog({\r\n            ...confirmDialog,\r\n            isOpen: false\r\n        })\r\n        \r\n        topicApi.delete(id).then(res=>{\r\n            res.success\r\n            ? setNotify({\r\n                 isOpen: true,\r\n                 message: 'Deleted Successfully',\r\n                 type: 'error'\r\n             })\r\n            : setNotify({\r\n                 isOpen: true,\r\n                 message: 'Sory, Deleted Unsuccessfully',\r\n                 type: 'error'\r\n             })\r\n        })\r\n    }\r\n\r\n    const onRefresh = () => {\r\n        console.log(\"Refresh!\")\r\n        fetchData();\r\n    }\r\n\r\n    const {\r\n        TblContainer,\r\n        TblHead,\r\n        TblPagination,\r\n        recordsAfterPagingAndSorting\r\n    } = useTableCustom(records, headCells, filterFn);\r\n\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <FormLabel>\r\n                <h1 className={classes.title}>{!studentId ? \"Topic List\" : \"My Topic\"}</h1>\r\n            </FormLabel>\r\n            \r\n            <Toolbar>\r\n                <Input\r\n                    label=\"Search For Name\"\r\n                    className={classes.searchInput}\r\n                    InputProps={{\r\n                        startAdornment: (<InputAdornment position=\"start\">\r\n                            <Search />\r\n                        </InputAdornment>)\r\n                    }}\r\n                    onChange={handleSearch}\r\n                />\r\n                <ButtonIcon\r\n                    icon={<CachedIcon />}   \r\n                    onClick= {onRefresh} \r\n                />\r\n            </Toolbar>\r\n\r\n             <TblContainer>\r\n                    <TblHead />\r\n                    <TableBody>\r\n                        {\r\n                            recordsAfterPagingAndSorting().map(item =>\r\n                                (<TableRow key={item.id}>\r\n                                    <TableCell>{item.id}</TableCell>\r\n                                    <TableCell>{item.name}</TableCell>\r\n                                    <TableCell className={classes.tableCell}>{changeListToText(item.teamNames)}</TableCell>\r\n                                    <TableCell>{item.facultyName}</TableCell>\r\n                                    <TableCell>{formatDateTime(item.startTime)}</TableCell>\r\n                                    <TableCell>{formatDateTime(item.endTime)}</TableCell>\r\n                                    <TableCell>{item.teacherName}</TableCell>\r\n                                    <TableCell>{item.status}</TableCell>\r\n                             \r\n                                    <TableCell>\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<EditOutlinedIcon fontSize=\"small\" />}   \r\n                                            onClick= {() => history.push(`${history.location.pathname}/${item.id}`)} \r\n                                            disabled = {studentId ? true : false}\r\n                                        />\r\n\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<DeleteIcon fontSize=\"small\" />}    \r\n                                            onClick={() => {\r\n                                                setConfirmDialog({\r\n                                                    isOpen: true,\r\n                                                    title: 'Are you sure to delete this topic?',\r\n                                                    subTitle: \"You can't undo this operation\",\r\n                                                    onConfirm: () => { onDelete(item.id) }\r\n                                                },)\r\n                                            }}\r\n                                            disabled = {studentId ? true : false}\r\n                                        />\r\n                                      \r\n\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<VisibilityIcon fontSize=\"small\" />}   \r\n                                            onClick= {() => history.push(`${history.location.pathname.replace(\"my\", \"topic\")}/${item.id}/view`)} \r\n                                        />\r\n                                        \r\n                                    </TableCell>\r\n                                </TableRow>)\r\n                            )\r\n                        }\r\n                    </TableBody>\r\n                </TblContainer>\r\n                <TblPagination />\r\n\r\n            \r\n                <Notification\r\n                    notify={notify}\r\n                    setNotify={setNotify}\r\n                />\r\n                <ConfirmDialog\r\n                    confirmDialog={confirmDialog}\r\n                    setConfirmDialog={setConfirmDialog}\r\n                />\r\n                \r\n        </div>\r\n    );\r\n}","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\styles\\Color\\index.js",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\styles\\Login\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Input\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Button\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\SideBarForUser\\index.jsx",["344"],"import React from \"react\";\r\nimport {\r\n  ListItem,\r\n  List,\r\n  ListItemIcon,\r\n  ListItemText\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport ViewListIcon from '@material-ui/icons/ViewList';\r\nimport AssignmentIndIcon from '@material-ui/icons/AssignmentInd';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\nimport { SET_COLOR_PRIMARY } from \"styles/Color\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  nested: {\r\n    paddingLeft: theme.spacing(4),\r\n  },\r\n}));\r\n\r\nconst StudentSide = props => {\r\n\r\n  const { history } = props;\r\n  const classes = useStyles();\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n  const studentId = 1;\r\n\r\n  const itemsList = [\r\n   \r\n    {\r\n      text: \"Topics \",\r\n      icon: <ViewListIcon style={SET_COLOR_PRIMARY}/>,\r\n      onClick: () => history.push(\"/mts/topic\")\r\n    },\r\n    {\r\n      text: \"Add Team\",\r\n      icon: <GroupAddIcon style={SET_COLOR_PRIMARY}/>,\r\n      onClick: () => history.push(\"/mts/team/add\")\r\n    },\r\n    {\r\n      text: \"My Topic\",\r\n      icon: <FolderOpenIcon style={SET_COLOR_PRIMARY}/>,\r\n      onClick: () => history.push(`/mts/my/${studentId}/view`)\r\n    },\r\n    {\r\n      text: \"My Info\",\r\n      icon: <AssignmentIndIcon style={SET_COLOR_PRIMARY}/>,\r\n      onClick: () => history.push(`/mts/info/${studentId}`)\r\n    },\r\n    {\r\n      text: \"My Account\",\r\n      icon: <AccountCircleIcon style={SET_COLOR_PRIMARY}/>,\r\n      onClick: () => history.push(\"/mts/account\")\r\n    },\r\n\r\n  ];\r\n  return (\r\n      <div>\r\n\r\n        <List \r\n          component=\"div\" \r\n          disablePadding\r\n        >\r\n            {itemsList.map((item) => {\r\n\r\n            const { text, icon, onClick } = item;\r\n\r\n            return (\r\n            <ListItem \r\n              className={classes.nested} \r\n              button key={text} \r\n              onClick={onClick}\r\n              >\r\n                {icon \r\n                && <ListItemIcon>{icon}</ListItemIcon>\r\n                }\r\n\r\n                <ListItemText \r\n                  primary={text} \r\n                  style={SET_COLOR_PRIMARY}\r\n                />\r\n            </ListItem>\r\n            );\r\n        })}\r\n        </List>\r\n       \r\n      </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(StudentSide);","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Topic\\pages\\AddEdit\\index.jsx",["345"],"import React, { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { FormGroup, FormLabel, Grid, IconButton } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\nimport Input from 'custom-fields/Input';\r\nimport { SET_BACKGROUND_COLOR_PRIMARY_DARK } from 'styles/Color';\r\nimport Button from 'custom-fields/Button';\r\nimport { useFormCustom } from 'custom-fields/Use/useFormCustom';\r\nimport { TYPE } from 'constants/Type/type';\r\nimport { initialFValuesDeadlinesDefault, initialFValuesTopicDefault, LIST_DEFAULT } from 'constants/InitialValues';\r\nimport Notification from 'custom-fields/Notification';\r\nimport Select from 'custom-fields/Select';\r\nimport TypeTopicListAPI from 'api/GetListForSelect/typeTopicListAPI';\r\nimport { useFormStyles } from 'styles/Form';\r\nimport HighlightOffOutlinedIcon from '@material-ui/icons/HighlightOffOutlined';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DateTimePicker from 'custom-fields/DateTimePicker';\r\nimport {  getTopicCreateObject } from 'utils/getObject';\r\nimport topicApi from 'api/Topic';\r\nimport { checkValidation } from 'utils/validation';\r\n\r\n\r\nexport default function AddEditPage(props) {\r\n\r\n    const classes = useFormStyles();\r\n    const {history} = props;\r\n    const { topicId } = useParams();\r\n    const isAddMode = !topicId;    \r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        temp = checkValidation(temp, fieldValues);\r\n        setErrors({ ...temp })\r\n        if (fieldValues === values)\r\n            return Object.values(temp).every(x => x === \"\")\r\n    }\r\n\r\n\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        notify,\r\n        setNotify,\r\n        notFound,\r\n        handleInputChange,\r\n        onReset\r\n    } = useFormCustom(initialFValuesTopicDefault, isAddMode, TYPE.TOPIC, topicId, true, validate);\r\n   \r\n    /**********************DEADLINE********************** */\r\n    const [deadlines, setDeadlines] = useState(isAddMode ? initialFValuesDeadlinesDefault : []); //get values first | after change values with hook\r\n    const [disableUseEffect, setDisableUseEffect] = useState(false);\r\n    \r\n\r\n    useEffect(() => { \r\n        const fetchData = async () => {\r\n            if(!disableUseEffect && !isAddMode){\r\n                if(values.deadlines !== undefined){\r\n                    setDeadlines(values.deadlines);\r\n                    setDisableUseEffect(true);\r\n                }\r\n            }\r\n        }\r\n        fetchData()\r\n     });\r\n\r\n    console.log(deadlines);\r\n\r\n    const handleRemoveFields = id => {\r\n        console.log(deadlines)\r\n        const deadlinesChange  = [...deadlines];\r\n        deadlinesChange.splice(deadlinesChange.findIndex(deadline => deadline.id === id), 1);\r\n        setDeadlines(deadlinesChange);\r\n        console.log(deadlines);\r\n    }\r\n\r\n    const handleAddFields = () => {\r\n        setDeadlines([...deadlines, \r\n            { id: Number(deadlines[deadlines.length-1].id) + 1,\r\n            startDeadline: new Date('2001-01-01T12:00:00'),\r\n            endDeadline: new Date('2001-01-07T12:00:00'),\r\n            content: '', }\r\n        ])\r\n    }\r\n\r\n    const handleDeadlineChange = (id, event) => {\r\n       \r\n        const { name, value } = event.target\r\n        const newValues = deadlines.map(deadline => {\r\n            if(id === deadline.id) {\r\n                deadline[name] = value\r\n            }\r\n            return deadline;\r\n        })  \r\n        setDeadlines(newValues);\r\n    }\r\n\r\n\r\n    /**************************************************** */\r\n\r\n    const handleSubmit = e => {\r\n    //add or update \r\n        e.preventDefault();\r\n\r\n        if(isAddMode){\r\n\r\n            const topicCreate = getTopicCreateObject(values, deadlines)\r\n            topicApi.create(topicCreate).then(res=>{\r\n                if(res.success){\r\n                    setNotify({\r\n                        isOpen: true,\r\n                        message: \"Create Successfully\",\r\n                        type: \"success\"\r\n                    });\r\n                    setTimeout(() => history.push('/admin/topic'), 1500);\r\n                    \r\n                }else{\r\n                    setNotify({\r\n                        isOpen: true,\r\n                        message: \"Sorry, Create Unsuccessfully\",\r\n                        type: \"error\"\r\n                    });\r\n                }\r\n            });\r\n\r\n        }else{\r\n\r\n            const topicUpdate = getTopicCreateObject(values, deadlines);\r\n            topicApi.update(topicId, topicUpdate).then(res=>{\r\n                if(res.success){\r\n                    setNotify({\r\n                        isOpen: true,\r\n                        message: \"Update Successfully\",\r\n                        type: \"success\"\r\n                    });\r\n                    setTimeout(() => history.push('/admin/topic'), 1500);\r\n                    \r\n                }else{\r\n                    setNotify({\r\n                        isOpen: true,\r\n                        message: \"Sory, Update Unsuccessfully\",\r\n                        type: \"error\"\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n        <FormGroup onSubmit={handleSubmit}>\r\n            <FormLabel>\r\n                {isAddMode \r\n                ? <h1>Create a Topic</h1>\r\n                : <h1>Update Topic</h1>\r\n                }\r\n            </FormLabel>\r\n            \r\n            <Grid container className={classes.grid}>\r\n                <Grid item xs={12} sm={3}>\r\n                <FormGroup>\r\n                    <Input\r\n                        name=\"code\"\r\n                        label=\"Code\"\r\n                        placeholder=\"Ex: do-an-cuoi-ky\"\r\n                        value={values.code || \"\"}\r\n                        onChange={handleInputChange}\r\n                        error={errors.code}\r\n                    />\r\n                    <br/>\r\n                    <Input\r\n                        name=\"name\"\r\n                        label=\"Name\"\r\n                        placeholder=\"Ex: Do An Cuoi Ki 2021\"\r\n                        value={values.name || \"\"}\r\n                        onChange={handleInputChange}\r\n                        error={errors.name}\r\n                    />\r\n                    <br/>\r\n                    <DateTimePicker\r\n                        name=\"startTime\"\r\n                        label=\"Start Time\"\r\n                        value={values.startTime || new Date()}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <br/>\r\n                    <DateTimePicker\r\n                        name=\"endTime\"\r\n                        label=\"End Time\"\r\n                        value={values.endTime || new Date()}\r\n                        onChange={handleInputChange}\r\n                        error={values.startTime >= values.endTime\r\n                            ? \"Invalid\"\r\n                            : \"\"\r\n                        }\r\n                    />\r\n                    <br/>\r\n                     <Select\r\n                        name=\"typeTopicId\"\r\n                        label=\"Type Topic\"\r\n                        value={values.typeTopicId || \"\"}\r\n                        onChange={handleInputChange}\r\n                        options={TypeTopicListAPI() || LIST_DEFAULT()}\r\n                        error={errors.typeTopicId}\r\n                    />\r\n                    <br/>\r\n                    <FormLabel>\r\n                        {isAddMode \r\n                        ? <h1>Create Deadlines</h1>\r\n                        : <h1>Update Deadlines</h1>\r\n                        }\r\n                    </FormLabel>\r\n                    {\r\n                        deadlines.map(deadline => (\r\n                            \r\n                            <FormGroup key={deadline.id}>\r\n                                {/* {setCount(count+1)} */}\r\n                                {/* <FormLabel>Deadline</FormLabel> */}\r\n                                <br/>\r\n                                <DateTimePicker\r\n                                    name=\"startDeadline\"\r\n                                    label=\"Start Deadline\"\r\n                                    value={deadline.startDeadline || new Date()}\r\n                                    onChange={event => handleDeadlineChange(deadline.id, event)}\r\n                                />\r\n                                <br/>\r\n                                <DateTimePicker\r\n                                    name=\"endDeadline\"\r\n                                    label=\"End Deadline\"\r\n                                    value={deadline.endDeadline || new Date()}\r\n                                    onChange={event => handleDeadlineChange(deadline.id, event)}\r\n                                    error={deadline.endDeadline <=  deadline.startDeadline\r\n                                           ? \"Invalid\"\r\n                                           : \"\"\r\n                                        }\r\n                                />\r\n                                <br/>\r\n                                <Input\r\n                                    name=\"content\"\r\n                                    label=\"content\"\r\n                                    placeholder=\"Ex: Finsh exams\"\r\n                                    value={deadline.content || \"\"}\r\n                                    onChange={event => handleDeadlineChange(deadline.id, event)}\r\n                                    error={errors.content}\r\n                                />\r\n                                \r\n                                <IconButton \r\n                                    className={classes.iconPrimary}\r\n                                    disabled={deadlines.length === 1} \r\n                                    onClick={() => handleRemoveFields(deadline.id)}\r\n                                >\r\n                                    <HighlightOffOutlinedIcon />\r\n                                </IconButton>\r\n                            </FormGroup>                          \r\n                        ))\r\n                    }\r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                        <br/>\r\n                        <IconButton \r\n                            className={classes.iconPrimary}\r\n                            onClick={() => handleAddFields()}\r\n                        >\r\n                            <AddIcon />\r\n                        </IconButton>\r\n                    </FormGroup>\r\n                    \r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} className={classes.submit}>\r\n                <Button\r\n                    type=\"submit\"\r\n                    text={isAddMode ? \"Save\": \"Update\"} \r\n                    startIcon={isAddMode ? <SaveIcon />: <UpdateIcon />}\r\n                    onClick={handleSubmit}\r\n                    background = {SET_BACKGROUND_COLOR_PRIMARY_DARK}\r\n                    disabled={notFound ? true : false}\r\n                />\r\n                <Button\r\n                    text=\"Reset\"\r\n                    color=\"default\"\r\n                    startIcon={<RefreshIcon />}\r\n                    onClick={onReset} \r\n                />\r\n            </Grid>\r\n            \r\n            </FormGroup>\r\n\r\n            <Notification\r\n                notify={notify}\r\n                setNotify={setNotify}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TeamSide.jsx",["346"],"import React from \"react\";\r\nimport {\r\n  ListItem,\r\n  List,\r\n  ListItemIcon,\r\n  ListItemText\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { ExpandLess, ExpandMore } from \"@material-ui/icons\";\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport ViewListIcon from '@material-ui/icons/ViewList';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport GroupWorkIcon from '@material-ui/icons/GroupWork';\r\nimport { SET_COLOR_AMBER } from \"styles/Color\";\r\nimport { useSideStyles } from \"styles/Side\";\r\n\r\n\r\nconst TeamSide = props => {\r\n\r\n  const { history } = props;\r\n  const classes = useSideStyles();\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const itemsList = [\r\n    {\r\n      text: \"View\",\r\n      icon: <ViewListIcon style={SET_COLOR_AMBER}/>,\r\n      onClick: () => history.push(\"/admin/team\")\r\n    },\r\n    {\r\n      text: \"Add\",\r\n      icon: <GroupAddIcon style={SET_COLOR_AMBER}/>,\r\n      onClick: () => history.push(\"/admin/team/add\")\r\n    },\r\n\r\n  ];\r\n  return (\r\n      <div>\r\n\r\n        <ListItem button onClick={handleClick}>\r\n\r\n        <ListItemIcon>\r\n          <GroupWorkIcon style={SET_COLOR_AMBER}/>\r\n        </ListItemIcon>\r\n\r\n        <ListItemText \r\n          primary=\"Team\" \r\n          style={SET_COLOR_AMBER}\r\n        />\r\n        \r\n        {open \r\n          ? <ExpandLess style={SET_COLOR_AMBER}/> \r\n          : <ExpandMore style={SET_COLOR_AMBER}/>\r\n        }\r\n        \r\n        </ListItem>\r\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n            <List component=\"div\" disablePadding>\r\n                {itemsList.map((item) => {\r\n\r\n                const { text, icon, onClick } = item;\r\n\r\n                return (\r\n\r\n                <ListItem \r\n                  className={classes.nested} \r\n                  button key={text} \r\n                  onClick={onClick}>\r\n                  {icon && \r\n                    <ListItemIcon>{icon}</ListItemIcon>\r\n                  }\r\n                    <ListItemText \r\n                      primary={text} \r\n                      style={SET_COLOR_AMBER}\r\n                    />\r\n                </ListItem>\r\n                );\r\n            })}\r\n            </List>\r\n        </Collapse>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(TeamSide);","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\AddEdit\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\AddEdit\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\Info\\index.jsx",["347","348"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Avatar, Grid, ListItem, ListItemAvatar, ListItemText, Paper } from \"@material-ui/core\";\r\nimport DateRangeIcon from '@material-ui/icons/DateRange';\r\nimport PhoneIphoneIcon from '@material-ui/icons/PhoneIphone';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport ClassIcon from '@material-ui/icons/Class';\r\nimport ContactsIcon from '@material-ui/icons/Contacts';\r\nimport WcIcon from '@material-ui/icons/Wc';\r\nimport WorkOutlineIcon from '@material-ui/icons/WorkOutline';\r\nimport SchoolIcon from '@material-ui/icons/School';\r\nimport { SET_BACKGROUND_COLOR_PRIMARY } from \"styles/Color\";\r\nimport teacherApi from \"api/Teacher\";\r\nimport { useInfoStyles } from \"styles/Info\";\r\nimport { formatDate } from \"utils/converter\";\r\n\r\nexport default function InfoPage() {\r\n\r\n    const classes = useInfoStyles();\r\n    const { teacherId } = useParams();\r\n    const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' })\r\n    const [teacherInfo, setTeacherInfo] = useState({});\r\n\r\n    const fetchData = async () => {\r\n        teacherApi.info(teacherId).then(res=>{\r\n            res.errorMessage\r\n            ? setNotify({\r\n                isOpen: true,\r\n                message: res.errorMessage,\r\n                type: 'error'\r\n            })\r\n            : setTeacherInfo(res.result);            \r\n        });\r\n    };\r\n\r\n    useEffect(() => { fetchData(); }, []);\r\n    \r\n    const renderRow = (icon, title, info) =>{\r\n        return(\r\n            <ListItem className={classes.left}>\r\n                <ListItemAvatar>\r\n                    <Avatar style={SET_BACKGROUND_COLOR_PRIMARY}>\r\n                    {icon}\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={title} secondary={info} />\r\n            </ListItem>\r\n        );\r\n    }\r\n\r\n    const renderRowRight = (icon, title, info) =>{\r\n        return(\r\n            <ListItem className={classes.right}>\r\n                <ListItemAvatar>\r\n                    <Avatar style={SET_BACKGROUND_COLOR_PRIMARY}>\r\n                    {icon}\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={title} secondary={info} />\r\n            </ListItem>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n        <Grid container className={classes.grid}>\r\n            <Grid item xs={12} sm={4}>\r\n                <Paper elevation={4} className={classes.pager}>\r\n                    \r\n                    <h1 className={classes.title}>Teacher Info</h1>\r\n                    {renderRow(<ContactsIcon/>, \"Code\", teacherInfo.code)}\r\n                    {renderRowRight(<PersonIcon />, \"Name\", teacherInfo.name)}\r\n                    {renderRow(<WcIcon />, \"Gender\", teacherInfo.gender)}\r\n                    {renderRowRight(<DateRangeIcon />, \"Birthday\", formatDate(teacherInfo.birthday))}\r\n                    {renderRow(<EmailIcon />, \"Email\", teacherInfo.email)}\r\n                    {renderRowRight(<PhoneIphoneIcon />, \"Phone\", teacherInfo.phone)}\r\n                    {renderRow(<SchoolIcon />, \"Academy\", teacherInfo.academyName)}\r\n                    {renderRowRight(<WorkOutlineIcon />, \"Position\", teacherInfo.positionName)}\r\n                    {renderRow(<ClassIcon />, \"Faculty\", teacherInfo.facultyName)}\r\n                    \r\n                </Paper>\r\n                \r\n            </Grid>\r\n        </Grid>\r\n        </div>\r\n        \r\n    );\r\n}","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\utils\\converter.js",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Account\\pages\\Table\\index.jsx",["349","350","351"],"import React, { useEffect, useState } from 'react'\r\nimport { TableBody, TableRow, TableCell, InputAdornment, Toolbar, FormLabel, Checkbox } from '@material-ui/core';\r\nimport { Search } from '@material-ui/icons';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport useTableCustom from 'custom-fields/Use/useTableCustom';\r\nimport Input from 'custom-fields/Input';\r\nimport ButtonIcon from 'custom-fields/ButtonIcon';\r\nimport ConfirmDialog from 'custom-fields/ConfirmDialog';\r\nimport Notification from 'custom-fields/Notification';\r\nimport studentApi from 'api/Student';\r\nimport { useTableStyles } from 'styles/Table';\r\nimport accountApi from 'api/Account';\r\nimport Select from 'custom-fields/Select';\r\nimport { LIST_DEFAULT, LIST_ROLES } from 'constants/InitialValues';\r\n\r\nconst headCells = [\r\n    { id: 'id', label: 'ID' },\r\n    { id: 'username', label: 'Username' },\r\n    { id: 'password', label: 'Password' },\r\n    { id: 'status', label: 'Status' },\r\n    { id: 'roles', label: 'Roles' },\r\n    { id: 'resetPassword', label: 'Reset Password' },\r\n    { id: 'changeRoles', label: 'Change Roles' },\r\n    { id: 'save', label: 'Save' },\r\n   \r\n]\r\n\r\nexport default function TablePage(props) {\r\n\r\n    const classes = useTableStyles();\r\n    const {history} = props;\r\n    const [records, setRecords] = useState([]);\r\n    const [saveChange, setSaveChange] = useState({newPassword: \"\", tickDefault: true, roles: \"\", status: \"\"});\r\n    const [filterFn, setFilterFn] = useState({ fn: items => { return items; } });\r\n    const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' })\r\n    const [confirmDialog, setConfirmDialog] = useState({ isOpen: false, title: '', subTitle: '' })\r\n\r\n    //console.log(history.location.pathname); <=> useRouteMatch()???\r\n\r\n    const fetchData = async () => {\r\n        \r\n        accountApi.search().then(res=>{\r\n            res.errorMessage\r\n            ? setNotify({\r\n                isOpen: true,\r\n                message: res.errorMessage,\r\n                type: 'error'\r\n            })\r\n            : setRecords(res.result);\r\n\r\n        })\r\n    };\r\n\r\n    useEffect(() => { fetchData(); }, []);\r\n\r\n    const handleSearch = e => {\r\n        let target = e.target;\r\n\r\n        setFilterFn({\r\n            fn: items => {\r\n                if (target.value === \"\")\r\n                    return items;\r\n                else\r\n                    //console.log(items);\r\n                    return items.filter(\r\n                        x => x.code.toLowerCase().includes(target.value.toLowerCase())\r\n                    );\r\n            }\r\n        })\r\n    };\r\n\r\n    const onDelete = id => {\r\n        setConfirmDialog({\r\n            ...confirmDialog,\r\n            isOpen: false\r\n        })\r\n        \r\n        studentApi.delete(id).then(res=>{\r\n            res.success\r\n            ? setNotify({\r\n                 isOpen: true,\r\n                 message: 'Deleted Successfully',\r\n                 type: 'error'\r\n             })\r\n            : setNotify({\r\n                 isOpen: true,\r\n                 message: 'Sory, Deleted Unsuccessfully',\r\n                 type: 'error'\r\n             })\r\n        })\r\n    }\r\n\r\n    const onRefresh = () => {\r\n        console.log(\"Refresh!\")\r\n        fetchData();\r\n    }\r\n\r\n    const {\r\n        TblContainer,\r\n        TblHead,\r\n        TblPagination,\r\n        recordsAfterPagingAndSorting\r\n    } = useTableCustom(records, headCells, filterFn);\r\n\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <FormLabel>\r\n                <h1 className={classes.title}>Account List</h1>\r\n            </FormLabel>\r\n            \r\n            <Toolbar>\r\n                <Input\r\n                    label=\"Search For Username\"\r\n                    className={classes.searchInput}\r\n                    InputProps={{\r\n                        startAdornment: (<InputAdornment position=\"start\">\r\n                            <Search />\r\n                        </InputAdornment>)\r\n                    }}\r\n                    onChange={handleSearch}\r\n                />\r\n                <ButtonIcon\r\n                    icon={<CachedIcon />}   \r\n                    onClick= {onRefresh} \r\n                />\r\n            </Toolbar>\r\n\r\n             <TblContainer>\r\n                    <TblHead />\r\n                    <TableBody>\r\n                        {\r\n                            recordsAfterPagingAndSorting().map(item =>\r\n                                (<TableRow key={item.id}>\r\n                                    <TableCell>{item.id}</TableCell>\r\n                                    <TableCell>{item.username}</TableCell>\r\n                                    <TableCell><VisibilityOffIcon fontSize=\"small\" color=\"primary\"/></TableCell>\r\n                                    <TableCell>{item.status}</TableCell>\r\n                                    <TableCell>{item.roles}</TableCell>\r\n                                    <TableCell>\r\n                                        <Input\r\n                                            name=\"password\"\r\n                                            label=\"New Password\"\r\n                                            value={\"\"}\r\n                                            // onChange={handleInputChange}\r\n                                            // error={errors.username}\r\n                                            // disabled={\r\n                                            //         !isAddMode\r\n                                            //         ? true\r\n                                            //         : values.tickDefaultUsername\r\n                                            //     }\r\n                                        />\r\n                                        <Checkbox \r\n                                            name=\"tickDefaultUsername\"\r\n                                            label=\"Default\"\r\n                                            value={false}\r\n                                            //onChange={handleInputChange}\r\n                                        />\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                    <Select\r\n                                        name=\"rolesId\"\r\n                                        label=\"Roles\"\r\n                                        value={\"a\"}\r\n                                        // onChange={handleInputChange}\r\n                                        options={LIST_ROLES() || LIST_DEFAULT()}\r\n                                        // error={errors.facultyId}\r\n                                    />                        \r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        <ButtonIcon\r\n                                        // size=\"small\"\r\n                                            icon={<SaveIcon fontSize={\"large\"}/>}    \r\n                                            onClick={() => {\r\n                                                setConfirmDialog({\r\n                                                    isOpen: true,\r\n                                                    title: 'Are you sure to reset password?',\r\n                                                    subTitle: \"You can't undo this operation\",\r\n                                                    onConfirm: () => { onDelete(item.id) }\r\n                                                },)\r\n                                            }}>\r\n                                        </ButtonIcon>\r\n                                    </TableCell>\r\n                                </TableRow>)\r\n                            )\r\n                        }\r\n                    </TableBody>\r\n                </TblContainer>\r\n                <TblPagination />\r\n\r\n            \r\n                <Notification\r\n                    notify={notify}\r\n                    setNotify={setNotify}\r\n                />\r\n                <ConfirmDialog\r\n                    confirmDialog={confirmDialog}\r\n                    setConfirmDialog={setConfirmDialog}\r\n                />\r\n                \r\n        </div>\r\n    );\r\n}","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Teacher\\pages\\Table\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Student\\pages\\Table\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\AccountSide.jsx",["352"],"import React from \"react\";\r\nimport {\r\n  ListItem,\r\n  List,\r\n  ListItemIcon,\r\n  ListItemText\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { ExpandLess, ExpandMore } from \"@material-ui/icons\";\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport ViewListIcon from '@material-ui/icons/ViewList';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport { SET_COLOR_PRIMARY } from \"styles/Color\";\r\nimport { useSideStyles } from \"styles/Side\";\r\n\r\n\r\n\r\nconst AccountSide = props => {\r\n\r\n  const { history } = props;\r\n  const classes = useSideStyles();\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const itemsList = [\r\n    {\r\n      text: \"View\",\r\n      icon: <ViewListIcon style={SET_COLOR_PRIMARY}/>,\r\n      onClick: () => history.push(\"/admin/account\")\r\n    },\r\n  ];\r\n  return (\r\n      <div>\r\n\r\n        <ListItem button onClick={handleClick}>\r\n\r\n        <ListItemIcon>\r\n          <AccountCircleIcon style={SET_COLOR_PRIMARY}/>\r\n        </ListItemIcon>\r\n\r\n        <ListItemText \r\n          primary=\"Account\" \r\n          style={SET_COLOR_PRIMARY}\r\n        />\r\n\r\n        {open  \r\n          ?<ExpandLess style={SET_COLOR_PRIMARY}/> \r\n          : <ExpandMore style={SET_COLOR_PRIMARY}\r\n        />}\r\n\r\n        </ListItem>\r\n          <Collapse \r\n            in={open} \r\n            timeout=\"auto\" \r\n            unmountOnExit\r\n          >\r\n            <List \r\n              component=\"div\" \r\n              disablePadding\r\n              >\r\n                {itemsList.map((item, index) => {\r\n\r\n                const { text, icon, onClick } = item;\r\n\r\n                return (\r\n                <ListItem \r\n                  className={classes.nested} \r\n                  button key={text} \r\n                  onClick={onClick}\r\n                  >\r\n                    {icon \r\n                      && <ListItemIcon>{icon}</ListItemIcon>\r\n                    }\r\n                    <ListItemText \r\n                      primary={text} \r\n                      style={SET_COLOR_PRIMARY}\r\n                    />\r\n                </ListItem>\r\n                );\r\n            })}\r\n            </List>\r\n        </Collapse>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(AccountSide);","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\HomeSide.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\StudentSide.jsx",["353"],"import React from \"react\";\r\nimport {\r\n  ListItem,\r\n  List,\r\n  ListItemIcon,\r\n  ListItemText\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { ExpandLess, ExpandMore } from \"@material-ui/icons\";\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport ViewListIcon from '@material-ui/icons/ViewList';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport { SET_COLOR_TEAL } from \"styles/Color\";\r\nimport { useSideStyles } from \"styles/Side\";\r\n\r\n\r\nconst StudentSide = props => {\r\n\r\n  const { history } = props;\r\n  const classes = useSideStyles();\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const itemsList = [\r\n    {\r\n      text: \"View\",\r\n      icon: <ViewListIcon style={SET_COLOR_TEAL}/>,\r\n      onClick: () => history.push(\"/admin/student\")\r\n    },\r\n    {\r\n      text: \"Add\",\r\n      icon: <PersonAddIcon style={SET_COLOR_TEAL}/>,\r\n      onClick: () => history.push(\"/admin/student/add\")\r\n    },\r\n\r\n  ];\r\n  return (\r\n      <div>\r\n\r\n        <ListItem button onClick={handleClick}>\r\n        <ListItemIcon>\r\n          <PersonIcon style={SET_COLOR_TEAL}/>\r\n        </ListItemIcon>\r\n\r\n        <ListItemText \r\n          primary=\"Student\" \r\n          style={SET_COLOR_TEAL} \r\n        />\r\n\r\n        {open \r\n        ? <ExpandLess style={SET_COLOR_TEAL}/> \r\n        : <ExpandMore style={SET_COLOR_TEAL}/>\r\n        }\r\n\r\n        </ListItem>\r\n          <Collapse \r\n            in={open} \r\n            timeout=\"auto\" \r\n            unmountOnExit\r\n          >\r\n            <List \r\n              component=\"div\" \r\n              disablePadding\r\n            >\r\n                {itemsList.map((item) => {\r\n\r\n                const { text, icon, onClick } = item;\r\n\r\n                return (\r\n                <ListItem \r\n                  className={classes.nested} \r\n                  button key={text} \r\n                  onClick={onClick}\r\n                  >\r\n                    {icon \r\n                    && <ListItemIcon>{icon}</ListItemIcon>\r\n                    }\r\n\r\n                    <ListItemText \r\n                      primary={text} \r\n                      style={SET_COLOR_TEAL}\r\n                    />\r\n                </ListItem>\r\n                );\r\n            })}\r\n            </List>\r\n        </Collapse>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(StudentSide);","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TeacherSide.jsx",["354"],"import React from \"react\";\r\nimport {\r\n  ListItem,\r\n  List,\r\n  ListItemIcon,\r\n  ListItemText\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { ExpandLess, ExpandMore } from \"@material-ui/icons\";\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport ViewListIcon from '@material-ui/icons/ViewList';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport { SET_COLOR_PURPLE } from \"styles/Color\";\r\nimport { useSideStyles } from \"styles/Side\";\r\n\r\n\r\nconst TeacherSide = props => {\r\n\r\n  const { history } = props;\r\n  const classes = useSideStyles();\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const itemsList = [\r\n    {\r\n      text: \"View\",\r\n      icon: <ViewListIcon style={SET_COLOR_PURPLE}/>,\r\n      onClick: () => history.push(\"/admin/teacher\")\r\n    },\r\n    {\r\n      text: \"Add\",\r\n      icon: <PersonAddIcon style={SET_COLOR_PURPLE}/>,\r\n      onClick: () => history.push(\"/admin/teacher/add\")\r\n    },\r\n\r\n  ];\r\n  return (\r\n      <div>\r\n        <ListItem button onClick={handleClick}>\r\n\r\n        <ListItemIcon>\r\n          <PersonIcon style={SET_COLOR_PURPLE}/>\r\n        </ListItemIcon>\r\n\r\n        <ListItemText \r\n          primary=\"Teacher\" \r\n          style={SET_COLOR_PURPLE}\r\n        />\r\n\r\n        {open \r\n        ? <ExpandLess style={SET_COLOR_PURPLE}/> \r\n        : <ExpandMore style={SET_COLOR_PURPLE}/>\r\n        }\r\n\r\n        </ListItem>\r\n\r\n          <Collapse \r\n            in={open} \r\n            timeout=\"auto\" \r\n            unmountOnExit\r\n          >\r\n            <List component=\"div\" disablePadding>\r\n                {itemsList.map((item,) => {\r\n\r\n                const { text, icon, onClick } = item;\r\n\r\n                return (\r\n                <ListItem className={classes.nested} button key={text} onClick={onClick}>\r\n                    {icon \r\n                    && <ListItemIcon>{icon}</ListItemIcon>\r\n                    }\r\n                    <ListItemText \r\n                      primary={text}  \r\n                      style={SET_COLOR_PURPLE}\r\n                    />\r\n                </ListItem>\r\n                );\r\n            })}\r\n            </List>\r\n        </Collapse>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(TeacherSide);","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\TopicSide.jsx",["355"],"import React from \"react\";\r\nimport {\r\n  ListItem,\r\n  List,\r\n  ListItemIcon,\r\n  ListItemText\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { ExpandLess, ExpandMore } from \"@material-ui/icons\";\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport ViewListIcon from '@material-ui/icons/ViewList';\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport { SET_COLOR_RED } from \"styles/Color\";\r\nimport { useSideStyles } from \"styles/Side\";\r\n\r\n\r\nconst TopicSide = props => {\r\n\r\n  const { history } = props;\r\n  const classes = useSideStyles();\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const itemsList = [\r\n    {\r\n      text: \"View\",\r\n      icon: <ViewListIcon style={SET_COLOR_RED}/>,\r\n      onClick: () => history.push(\"/admin/topic\")\r\n    },\r\n    {\r\n      text: \"Add\",\r\n      icon: <NoteAddIcon style={SET_COLOR_RED}/>,\r\n      onClick: () => history.push(\"/admin/topic/add\")\r\n    },\r\n\r\n  ];\r\n  return (\r\n      <div>\r\n        <ListItem button onClick={handleClick}>\r\n\r\n        <ListItemIcon>\r\n          <AssignmentIcon style={SET_COLOR_RED}/>\r\n        </ListItemIcon>\r\n\r\n        <ListItemText \r\n          primary=\"Topic\" \r\n          style={SET_COLOR_RED}\r\n        />\r\n        \r\n        {open ? \r\n          <ExpandLess style={SET_COLOR_RED}/> : \r\n          <ExpandMore style={SET_COLOR_RED}/>\r\n        }\r\n\r\n        </ListItem>\r\n          <Collapse \r\n            in={open} \r\n            timeout=\"auto\" \r\n            unmountOnExit\r\n          >\r\n            <List component=\"div\" disablePadding>\r\n                {itemsList.map((item) => {\r\n\r\n                const { text, icon, onClick } = item;\r\n\r\n                return (\r\n                <ListItem \r\n                  className={classes.nested} \r\n                  button key={text} \r\n                  onClick={onClick}\r\n                  >\r\n                    {icon && \r\n                      <ListItemIcon>{icon}</ListItemIcon>\r\n                    }\r\n                    <ListItemText \r\n                      primary={text} \r\n                      style={SET_COLOR_RED}\r\n                    />\r\n                </ListItem>\r\n                );\r\n            })}\r\n            </List>\r\n        </Collapse>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(TopicSide);","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Use\\useTableCustom.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\Topic\\index.js",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\styles\\Table\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Notification\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\ConfirmDialog\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\ButtonIcon\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\utils\\getObject.js",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\Team\\index.js",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\Teacher\\index.js",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\Student\\index.js",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\styles\\Side\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\styles\\Form\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\styles\\Info\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\constants\\InitialValues\\index.js",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Select\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\URL\\index.js",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\Handle\\handleApi.js",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\GetListForSelect\\positionList.js",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\GetListForSelect\\academyList.js",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\constants\\Type\\type.js",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\GetListForSelect\\facultyList.js",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\GetListForSelect\\typeTopicListAPI.js",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\Account\\index.js",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Use\\useFormCustom.jsx",["356"],"import studentApi from 'api/Student';\r\nimport teacherApi from 'api/Teacher';\r\nimport teamApi from 'api/Team';\r\nimport topicApi from 'api/Topic';\r\nimport { TYPE } from 'constants/Type/type';\r\nimport { useEffect, useState } from 'react'\r\nimport { getStudentObject, getTeacherObject, getTeamObject, getTopicObject } from 'utils/getObject';\r\n\r\nexport function useFormCustom(initialFValuesDefault, isAddMode, type , id, validateOnChange = false, validate) {\r\n\r\n    const [values, setValues] = useState(isAddMode ? initialFValuesDefault : []);\r\n    const [errors, setErrors] = useState({});\r\n    const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' });\r\n    const [notFound, setNotFound] = useState(false);\r\n    \r\n    useEffect(()=>{\r\n        if(isAddMode)\r\n        {\r\n            console.log('add mode!')\r\n        }\r\n        else{\r\n            const setValueOjb=(result, funcGetObj)=>{\r\n                if(result.errorMessage===null)\r\n                {\r\n                    let object = funcGetObj(result.result);\r\n                    console.log(object);\r\n                    setValues(object);\r\n                }\r\n                else{\r\n                    setValues(initialFValuesDefault);\r\n                    setNotify({\r\n                        isOpen: true,\r\n                        message: result.errorMessage,\r\n                        type: 'error'\r\n                    });\r\n                    setNotFound(true);\r\n                }\r\n            }\r\n            const getInfo=async ()=>{\r\n                console.log(type);\r\n                switch(type){\r\n                    case TYPE.STUDENT:\r\n                        const studentResult=await studentApi.find(id)\r\n                        setValueOjb(studentResult,getStudentObject)\r\n                        break;\r\n                    case TYPE.TEACHER:\r\n                        const teacherResult=await teacherApi.find(id)\r\n                        setValueOjb(teacherResult,getTeacherObject)\r\n                        break;\r\n                    case TYPE.TEAM:\r\n                        const teamResult=await teamApi.find(id)\r\n                        setValueOjb(teamResult,getTeamObject)\r\n                        break;\r\n                    case TYPE.TOPIC:\r\n                        const topicResult=await topicApi.find(id)\r\n                        setValueOjb(topicResult,getTopicObject)\r\n                        break;\r\n                    case TYPE.ACCOUNT:\r\n                        setValues({\r\n                            username: '',\r\n                            passwordOld: '',\r\n                            passwordNew: '',\r\n                            passwordConfirm: '',\r\n                        })     \r\n                        break;\r\n                    // case TYPE.DEADLINE:\r\n                    //     setValues(initialFValuesDeadlinesDefault)     \r\n                    //     break;\r\n                    default:\r\n                        setValues([]);\r\n                        setNotFound(true);\r\n                        break;\r\n                }\r\n            }\r\n            getInfo()\r\n        }\r\n    },[])\r\n\r\n    const handleInputChange = e => {\r\n        const { name, value } = e.target\r\n        setValues({\r\n            ...values,\r\n            [name]: value\r\n        })\r\n        if (validateOnChange){\r\n            validate({ [name]: value })\r\n        }\r\n    }\r\n\r\n    const onReset = () => {\r\n        setValues(initialFValuesDefault);\r\n        setErrors({})\r\n    }\r\n\r\n    return {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        notify,\r\n        setNotify,\r\n        notFound,\r\n        handleInputChange,\r\n        onReset\r\n    }\r\n}\r\n\r\n\r\n\r\n","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\Checkbox\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\DatePicker\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\RadioGroup\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\custom-fields\\DateTimePicker\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\GetListForSelect\\topicListAPI.js",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\styles\\SelectTopic\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\utils\\validation.js",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\pages\\AddEdit\\index.jsx",["357","358"],"import React from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { FormGroup, FormLabel, Grid, List, ListItem, ListItemText, ListSubheader } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\nimport Input from 'custom-fields/Input';\r\nimport { SET_BACKGROUND_COLOR_PRIMARY_DARK } from 'styles/Color';\r\nimport Button from 'custom-fields/Button';\r\nimport { useFormCustom } from 'custom-fields/Use/useFormCustom';\r\nimport { TYPE } from 'constants/Type/type';\r\nimport { initialFValuesTeamDefault } from 'constants/InitialValues';\r\nimport { useSelectTopicStyles } from 'styles/SelectTopic';\r\nimport TopicListAPI from 'api/GetListForSelect/topicListAPI';\r\nimport teamApi from 'api/Team';\r\nimport { getTeamUpdateObject, getTeamCreateObject } from 'utils/getObject';\r\nimport Notification from 'custom-fields/Notification';\r\nimport { useFormStyles } from 'styles/Form';\r\nimport { checkValidation } from 'utils/validation';\r\n\r\n\r\n\r\nexport default function AddEditPage(props) {\r\n\r\n    const classes = useFormStyles();\r\n    const classesSelectTopic = useSelectTopicStyles();\r\n    const {history} = props;\r\n    const { teamId } = useParams();\r\n    const isAddMode = !teamId;\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        temp = checkValidation(temp, fieldValues);\r\n        setErrors({ ...temp })\r\n        if (fieldValues === values)\r\n            return Object.values(temp).every(x => x === \"\")\r\n    }\r\n\r\n\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        notify,\r\n        setNotify,\r\n        notFound,\r\n        handleInputChange,\r\n        onReset\r\n    } = useFormCustom(initialFValuesTeamDefault, isAddMode, TYPE.TEAM, teamId, true, validate);\r\n\r\n    const handleTouchTap = (topicId, topicName) => {\r\n        setValues({\r\n            ...values,\r\n            [\"topicName\"]: topicName,\r\n            [\"topicId\"]:topicId\r\n        })\r\n   }\r\n   \r\n   const handleSubmit = e => {\r\n    //add or update \r\n        e.preventDefault();\r\n        \r\n        if(isAddMode){\r\n\r\n            const teamCreate = getTeamCreateObject(values);\r\n            teamApi.create(teamCreate).then(res=>{\r\n                if(res.success){\r\n                    setNotify({\r\n                        isOpen: true,\r\n                        message: \"Create Successfully\",\r\n                        type: \"success\"\r\n                    });\r\n                    setTimeout(() => history.push('/admin/team'), 1500);\r\n                    \r\n                }else{\r\n                    setNotify({\r\n                        isOpen: true,\r\n                        message: \"Sorry, Create Unsuccessfully\",\r\n                        type: \"error\"\r\n                    });\r\n                }\r\n            });\r\n\r\n        }else{\r\n\r\n            const teamUpdate = getTeamUpdateObject(values);\r\n            teamApi.update(teamId, teamUpdate).then(res=>{\r\n                if(res.success){\r\n                    setNotify({\r\n                        isOpen: true,\r\n                        message: \"Update Successfully\",\r\n                        type: \"success\"\r\n                    });\r\n                    setTimeout(() => history.push('/admin/team'), 1500);\r\n                    \r\n                }else{\r\n                    setNotify({\r\n                        isOpen: true,\r\n                        message: \"Sory, Update Unsuccessfully\",\r\n                        type: \"error\"\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n        <FormGroup onSubmit={handleSubmit}>\r\n            <FormLabel>\r\n                {isAddMode \r\n                ? <h1>Create a Team</h1>\r\n                : <h1>Update Team</h1>\r\n                }\r\n            </FormLabel>\r\n            \r\n            <Grid container className={classes.grid}>\r\n                <Grid item xs={12} sm={3}>\r\n                    <FormGroup>\r\n                        <Input\r\n                            name=\"name\"\r\n                            label=\"Name\"\r\n                            placeholder=\"Ex: Team vui ve khong quao\"\r\n                            value={values.name || \"\"}\r\n                            onChange={handleInputChange}\r\n                            error={errors.name}\r\n                        />\r\n                        <br/>\r\n                        <Input\r\n                            name=\"topicName\"\r\n                            label=\"Select Topic\"\r\n                            value={values.topicName || \"\"}\r\n                            disabled={true}\r\n                        />\r\n                        <br/>\r\n                        <List className={classesSelectTopic.root} subheader={<li />}>\r\n                            {TopicListAPI().map((items) => (\r\n                                <li key={items.facultyName} className={classesSelectTopic.listSection}>\r\n                                <ul className={classesSelectTopic.ul}>\r\n\r\n                                    <ListSubheader className={classesSelectTopic.subHeader}> {items.facultyName} </ListSubheader>\r\n                                        \r\n                                        {items.topicList.map((item) => (\r\n                                        <ListItem\r\n                                            key={item.topicId}\r\n                                            button\r\n                                            onClick={() => handleTouchTap(item.topicId, item.topicName)}\r\n                                            >\r\n                                            <ListItemText\r\n                                                primary={`- `+item.topicName}\r\n                                            />\r\n                                        </ListItem>\r\n                                        ))}\r\n                                </ul>\r\n                                </li>\r\n                            ))}\r\n                        </List>\r\n                        <br/>\r\n                    </FormGroup>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} className={classes.submit}>\r\n                <Button\r\n                    type=\"submit\"\r\n                    text={isAddMode ? \"Save\": \"Update\"} \r\n                    startIcon={isAddMode ? <SaveIcon />: <UpdateIcon />}\r\n                    onClick={handleSubmit}\r\n                    background = {SET_BACKGROUND_COLOR_PRIMARY_DARK}\r\n                    disabled={notFound ? true : false}\r\n                />\r\n                <Button\r\n                    text=\"Reset\"\r\n                    color=\"default\"\r\n                    startIcon={<RefreshIcon />}\r\n                    onClick={onReset} \r\n                />\r\n            </Grid>\r\n            \r\n            </FormGroup>\r\n\r\n            <Notification\r\n                notify={notify}\r\n                setNotify={setNotify}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\pages\\Views\\index.jsx",["359"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Input from 'custom-fields/Input';\r\nimport teamApi from 'api/Team';\r\nimport { useParams } from 'react-router-dom';\r\nimport {  Grid } from '@material-ui/core';\r\nimport { formatDateTime, formatDate } from 'utils/converter';\r\nimport ButtonIcon from 'custom-fields/ButtonIcon';\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport Notification from 'custom-fields/Notification';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    marginTop: theme.spacing(10),\r\n    padding: theme.spacing(1),\r\n //   width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n  grid: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n  text: {\r\n    marginLeft: 0,\r\n    background: \"red\",\r\n  }\r\n}));\r\n\r\nexport default function ViewTeamPage() {\r\n\r\n  const classes = useStyles();\r\n  const { teamId } = useParams();\r\n  const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' })\r\n  const [teamInfo, setTeamInfo] = useState({});\r\n  const [editLink, setEditLink] = useState(false);\r\n  const [editPoint, setEditPoint] = useState(false);\r\n  const [isFirst, setIsFirst] = useState(true);\r\n  const [link, setLink] = useState(\"\");\r\n  const [point, setPoint] = useState(\"\");\r\n\r\n\r\n  const fetchData = async () => {\r\n      teamApi.view(teamId).then(res=>{\r\n          if(res.errorMessage){\r\n            setNotify({\r\n              isOpen: true,\r\n              message: res.errorMessage,\r\n              type: 'error'\r\n          })\r\n          }else{\r\n            setTeamInfo(res.result);\r\n            setLink(teamInfo.link);\r\n            setPoint(teamInfo.point==null? \"\" : teamInfo.point);\r\n          }            \r\n      });\r\n  };\r\n\r\n  useEffect(() => { fetchData(); }, []);   \r\n  \r\n  const accordionSummary = (title) =>{\r\n    return (\r\n      <AccordionSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel1a-content\"\r\n        id=\"panel1a-header\"\r\n      >\r\n        <Typography className={classes.heading}>{title}</Typography>\r\n      </AccordionSummary>\r\n    )\r\n  }\r\n\r\n\r\n  const checkPoint = (point) =>{\r\n    if(Number(point)){\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  const onSubmitLink = () =>{\r\n\r\n    if(editLink){\r\n      teamApi.submitLink(teamId, {\r\n        id: teamId,\r\n        link: link\r\n      }).then(res=>{\r\n        if(res.success){\r\n            setNotify({\r\n                isOpen: true,\r\n                message: \"Submit Successfully\",\r\n                type: \"success\"\r\n            });\r\n            // setLink(link); ?? refesh?\r\n            \r\n        }else{\r\n            setNotify({\r\n                isOpen: true,\r\n                message: \"Sorry, Submit Unsuccessfully\",\r\n                type: \"error\"\r\n            });\r\n        }\r\n      });\r\n      setEditLink(!editLink);\r\n    }else{\r\n      setEditLink(!editLink);\r\n    }\r\n    setIsFirst(false);\r\n  }\r\n\r\n  const onSubmitPoint = () =>{\r\n\r\n    if(editPoint){\r\n      teamApi.submitPoint(teamId, {\r\n        id: teamId,\r\n        point: Number(point)\r\n      }).then(res=>{\r\n        if(res.success){\r\n            setNotify({\r\n                isOpen: true,\r\n                message: \"Submit Successfully\",\r\n                type: \"success\"\r\n            });\r\n            // setLink(link); ?? refesh?\r\n            \r\n        }else{\r\n            setNotify({\r\n                isOpen: true,\r\n                message: \"Sorry, Submit Unsuccessfully\",\r\n                type: \"error\"\r\n            });\r\n        }\r\n      });\r\n      console.log(\"callapi\")\r\n      setEditPoint(!editPoint);\r\n    }else{\r\n      console.log(\"a\")\r\n      setEditPoint(!editPoint);\r\n    }\r\n    setIsFirst(false);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container className={classes.grid}>\r\n        <Grid item xs={12} sm={4}>\r\n          <h1>{teamInfo.name || \"Team Info\"}</h1>\r\n\r\n          <Accordion>\r\n            {accordionSummary(\"Basic\")}\r\n            <AccordionDetails>\r\n              <Typography component={'span'} variant={'body2'} align={\"left\"}>\r\n                \r\n                <li key={teamInfo.id}>{`ID : #${teamInfo.id || \"\"}`}</li>\r\n                <li key={teamInfo.name}>{`Name : ${teamInfo.name || \"\"}`}</li>\r\n                <li key={teamInfo.topicName}>{`Topic : ${teamInfo.topicName || \"\"}`}</li>\r\n                <li key={teamInfo.status}>{`Status : ${teamInfo.status || \"\"}`}</li>\r\n\r\n              </Typography>\r\n            </AccordionDetails>\r\n          </Accordion>\r\n\r\n          <Accordion>\r\n            {accordionSummary(\"Submit\")}\r\n            <AccordionDetails>\r\n                <Input\r\n                    name=\"link\"\r\n                    label=\"Submit link project\"\r\n                    fullWidth\r\n                    value={isFirst ? teamInfo.link || \"\" : link || \"\"}\r\n                    onChange={e => setLink(e.target.value)}\r\n                    disabled={editLink ? false : true}\r\n                />\r\n                <br/>                \r\n                {\r\n                  <ButtonIcon \r\n                    icon={editLink ? <SaveIcon /> : <EditOutlinedIcon/>} \r\n                    onClick= {onSubmitLink} />\r\n                  \r\n                }\r\n            </AccordionDetails>\r\n          </Accordion>\r\n\r\n          <Accordion>\r\n            {accordionSummary(\"Point\")}\r\n            <AccordionDetails>\r\n                <Input\r\n                    name=\"point\"\r\n                    label=\"Submit point for team\"\r\n                    fullWidth\r\n                    value={isFirst ? teamInfo.point || \"\" : point || \"\"}\r\n                    onChange={e => setPoint(e.target.value)}\r\n                    disabled={editPoint ? false : true}\r\n                    error={point.length > 0 \r\n                          ? checkPoint(point) ? \"\" : \"Invalid format number\"\r\n                          :\"\"\r\n                        }\r\n                />\r\n                <br/>                \r\n                {\r\n                  <ButtonIcon \r\n                    icon={editPoint ? <SaveIcon /> : <EditOutlinedIcon/>} \r\n                    onClick= {onSubmitPoint} \r\n                    disabled={point.length > 0 \r\n                      ? checkPoint(point) ? false : true\r\n                      :false}/>\r\n                  \r\n                }\r\n            </AccordionDetails>\r\n          </Accordion>\r\n\r\n          <Accordion>\r\n            {accordionSummary(\"Deadlines\")}\r\n            <AccordionDetails>\r\n              <Typography component={'div'} variant={'body2'} align={\"left\"}>\r\n                  {teamInfo.deadlines\r\n                    ? teamInfo.deadlines.map(item => {\r\n                        return <li key={item.count}>{`${item.count} | ${item.content} | ${formatDateTime(item.startDeadline)} to ${formatDateTime(item.endDeadline)}`}</li>\r\n                      })\r\n                    : \"No deadlines yet.\" // !=[]\r\n                  }\r\n              </Typography>\r\n            </AccordionDetails>\r\n          </Accordion>\r\n\r\n          <Accordion>\r\n            {accordionSummary(\"Member\")}\r\n            <AccordionDetails>\r\n              <Typography component={'div'} variant={'body2'} align={\"left\"}>\r\n                  {teamInfo.students\r\n                    ? teamInfo.students.map(item => {\r\n                        return <li key={item.count}>{`${item.count} | ${item.studentName} | ${formatDate(item.timeJoin)}`}</li>\r\n                      })\r\n                    : \"No member yet.\" // !=[]\r\n                  }\r\n              </Typography>\r\n            </AccordionDetails>\r\n          </Accordion>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Notification\r\n        notify={notify}\r\n        setNotify={setNotify}\r\n    />\r\n      \r\n    </div>\r\n  );\r\n}\r\n","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Team\\pages\\Table\\index.jsx",["360"],"import React, { useEffect, useState } from 'react'\r\nimport { TableBody, TableRow, TableCell, InputAdornment, Toolbar, FormLabel } from '@material-ui/core';\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport { Search } from '@material-ui/icons';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport useTableCustom from 'custom-fields/Use/useTableCustom';\r\nimport Input from 'custom-fields/Input';\r\nimport ButtonIcon from 'custom-fields/ButtonIcon';\r\nimport ConfirmDialog from 'custom-fields/ConfirmDialog';\r\nimport Notification from 'custom-fields/Notification';\r\nimport { useTableStyles } from 'styles/Table';\r\nimport teamApi from 'api/Team';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst headCells = [\r\n    { id: 'id', label: 'ID' },\r\n    { id: 'name', label: 'Name' },\r\n    { id: 'facultyName', label: 'Faculty' },\r\n    { id: 'topicName', label: 'Topic ' },\r\n    { id: 'studentTotal', label: 'Total' },\r\n    { id: 'status', label: 'Status' },\r\n    { id: 'action', label: 'Action' },\r\n]\r\n\r\nexport default function TablePage(props) {\r\n\r\n    const classes = useTableStyles();\r\n    const {history} = props;\r\n    const { topicId } = useParams();\r\n    const [records, setRecords] = useState([]);\r\n    const [filterFn, setFilterFn] = useState({ fn: items => { return items; } });\r\n    const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' })\r\n    const [confirmDialog, setConfirmDialog] = useState({ isOpen: false, title: '', subTitle: '' })\r\n\r\n    //console.log(history.location.pathname); <=> useRouteMatch()???\r\n\r\n    const fetchData = async () => {\r\n\r\n        if(topicId){\r\n            teamApi.searchByTopicId(topicId).then(res=>{\r\n                res.errorMessage\r\n                ? setNotify({\r\n                    isOpen: true,\r\n                    message: res.errorMessage,\r\n                    type: 'error'\r\n                })\r\n                : setRecords(res.result);\r\n\r\n            })\r\n        }else{\r\n            teamApi.search().then(res=>{\r\n                res.errorMessage\r\n                ? setNotify({\r\n                    isOpen: true,\r\n                    message: res.errorMessage,\r\n                    type: 'error'\r\n                })\r\n                : setRecords(res.result);\r\n\r\n            })\r\n        }\r\n    };\r\n\r\n    useEffect(() => { fetchData(); }, []);\r\n\r\n    const handleSearch = e => {\r\n        let target = e.target;\r\n\r\n        setFilterFn({\r\n            fn: items => {\r\n                if (target.value === \"\")\r\n                    return items;\r\n                else\r\n                    //console.log(items);\r\n                    return items.filter(\r\n                        x => x.name.toLowerCase().includes(target.value.toLowerCase())\r\n                    );\r\n            }\r\n        })\r\n    };\r\n\r\n    const onDelete = id => {\r\n        setConfirmDialog({\r\n            ...confirmDialog,\r\n            isOpen: false\r\n        })\r\n        \r\n        teamApi.delete(id).then(res=>{\r\n            res.success\r\n            ? setNotify({\r\n                 isOpen: true,\r\n                 message: 'Deleted Successfully',\r\n                 type: 'error'\r\n             })\r\n            : setNotify({\r\n                 isOpen: true,\r\n                 message: 'Sory, Deleted Unsuccessfully',\r\n                 type: 'error'\r\n             })\r\n        })\r\n    }\r\n\r\n    const onRefresh = () => {\r\n        console.log(\"Refresh!\")\r\n        fetchData();\r\n    }\r\n\r\n    const {\r\n        TblContainer,\r\n        TblHead,\r\n        TblPagination,\r\n        recordsAfterPagingAndSorting\r\n    } = useTableCustom(records, headCells, filterFn);\r\n\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <FormLabel>\r\n                <h1 className={classes.title}>Team List</h1>\r\n            </FormLabel>\r\n            \r\n            <Toolbar>\r\n                <Input\r\n                    label=\"Search For Name\"\r\n                    className={classes.searchInput}\r\n                    InputProps={{\r\n                        startAdornment: (<InputAdornment position=\"start\">\r\n                            <Search />\r\n                        </InputAdornment>)\r\n                    }}\r\n                    onChange={handleSearch}\r\n                />\r\n                <ButtonIcon\r\n                    icon={<CachedIcon />}   \r\n                    onClick= {onRefresh} \r\n                />\r\n            </Toolbar>\r\n\r\n             <TblContainer>\r\n                    <TblHead />\r\n                    <TableBody>\r\n                        {\r\n                            recordsAfterPagingAndSorting().map(item =>\r\n                                (<TableRow key={item.id}>\r\n                                    <TableCell>{item.id}</TableCell>\r\n                                    <TableCell>{item.name}</TableCell>\r\n                                    <TableCell>{item.facultyName}</TableCell>\r\n                                    <TableCell>{item.topicName}</TableCell>\r\n                                    <TableCell>{item.studentTotal}</TableCell>\r\n                                    <TableCell>{item.status}</TableCell>\r\n                             \r\n                                    <TableCell>\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<EditOutlinedIcon fontSize=\"small\" />}   \r\n                                            onClick= {() => history.push(`${history.location.pathname}/${item.id}`)} \r\n                                        />\r\n\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<DeleteIcon fontSize=\"small\" />}    \r\n                                            onClick={() => {\r\n                                                setConfirmDialog({\r\n                                                    isOpen: true,\r\n                                                    title: 'Are you sure to delete this Team?',\r\n                                                    subTitle: \"You can't undo this operation\",\r\n                                                    onConfirm: () => { onDelete(item.id) }\r\n                                                },)\r\n                                        }}>\r\n                                        </ButtonIcon>\r\n\r\n                                        <ButtonIcon\r\n                                            size=\"small\"\r\n                                            icon={<VisibilityIcon fontSize=\"small\" />}   \r\n                                            onClick= {() => history.push(`${history.location.pathname}/${item.id}/view`)} \r\n                                        />\r\n                                        \r\n                                    </TableCell>\r\n                                </TableRow>)\r\n                            )\r\n                        }\r\n                    </TableBody>\r\n                </TblContainer>\r\n                <TblPagination />\r\n\r\n            \r\n                <Notification\r\n                    notify={notify}\r\n                    setNotify={setNotify}\r\n                />\r\n                <ConfirmDialog\r\n                    confirmDialog={confirmDialog}\r\n                    setConfirmDialog={setConfirmDialog}\r\n                />\r\n                \r\n        </div>\r\n    );\r\n}","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\components\\SideBar\\components\\AnalysisSide.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Chart\\Analysis\\index.jsx",["361"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid, Paper } from \"@material-ui/core\";\r\nimport { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport analysisApi from \"api/Analysis\";\r\nimport { getAnalysisGenderObject, getAnalysisActiveObject } from \"utils/getObject\";\r\nimport Notification from \"custom-fields/Notification\";\r\nimport { COLOR_PRIMARY, SET_BACKGROUND_COLOR_PRIMARY, SET_COLOR_PRIMARY } from \"styles/Color\";\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport WorkIcon from '@material-ui/icons/Work';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(15)\r\n    },\r\n    rootPieCharts: {\r\n        padding: theme.spacing(1),\r\n        width: \"100%\", \r\n        height: 240 \r\n    },\r\n    text: {\r\n        color: COLOR_PRIMARY,\r\n    }\r\n\r\n}));\r\n\r\nexport default function AnalysisPage() {\r\n    const classes = useStyles();\r\n\r\n    const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#AF19FF'];\r\n    const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' })\r\n    // const [analysis, setAnalysis] = useState({});\r\n    const [students, setStudents] = useState({});\r\n    const [teachers, setTeachers] = useState({});\r\n    const [teams, setTeams] = useState({});\r\n    const [topics, setTopics] = useState({});\r\n\r\n    const fetchData = async () => {\r\n        analysisApi.search().then(res=>{\r\n            if(res.errorMessage){\r\n                setNotify({\r\n                    isOpen: true,\r\n                    message: res.errorMessage,\r\n                    type: 'error'\r\n                })\r\n            }else{\r\n                // setAnalysis(res.result); \r\n                setStudents(res.result.students);   \r\n                setTeachers(res.result.teachers);\r\n                setTeams(res.result.teams);\r\n                setTopics(res.result.topics);\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => { fetchData(); }, []);\r\n\r\n    const CustomTooltip = ({ active, payload, label }) => {\r\n        if (active) {\r\n            console.log(payload)\r\n            return (\r\n                <div className=\"custom-tooltip\" style={{ backgroundColor: '#ffff', padding: '5px', border: '1px solid #cccc' }}>\r\n                    <label>{`${payload[0].name} : ${payload[0].payload.total} : ${payload[0].value}%`}</label>\r\n                    \r\n                </div>\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n\r\n    const CustomPieCharts = (pieData, showActive=false, showGender=false) =>{\r\n        return (\r\n            <div className={classes.rootPieCharts}>\r\n            <ResponsiveContainer>\r\n              <PieChart width={240} height={200}>\r\n                  <Pie \r\n                    data={pieData} \r\n                    color=\"#000000\" \r\n                    dataKey=\"value\" \r\n                    nameKey=\"name\" \r\n                    outerRadius={80} \r\n                    innerRadius={showGender ? 0 : 50}\r\n                    fill=\"#8884d8\" \r\n                    startAngle={showActive ? (pieData[0].value*3.6) : 360}\r\n                    endAngle={0}\r\n                    >\r\n                      {\r\n                          pieData.map((entry, index) => \r\n                            <Cell \r\n                                key={`cell-${index}`} \r\n                                fill={COLORS[index % COLORS.length]} \r\n                            />\r\n                        )\r\n                      }\r\n                  </Pie>\r\n                  <Tooltip content={<CustomTooltip />} />\r\n                  <Legend />\r\n              </PieChart>\r\n            </ResponsiveContainer>\r\n            </div>\r\n        )\r\n    }\r\n    const headerCharts = (title, data, icon) => {\r\n        return(\r\n            <h1 className={classes.text}>\r\n                {title} <br/>\r\n                {data.total} \r\n                {icon}\r\n            </h1>\r\n        );\r\n    }\r\n    \r\n    return(\r\n    <div className={classes.root}>\r\n    <h1>Analysis</h1>\r\n      <Grid container spacing={3}>\r\n\r\n        <Grid item xs={12} >\r\n            <Paper>\r\n\r\n            </Paper>\r\n        </Grid>\r\n    \r\n        <Grid item xs={12} sm={6}>\r\n            {headerCharts(\"Student\", students, <PersonIcon fontSize=\"small\" style={SET_COLOR_PRIMARY}/>)}\r\n            {CustomPieCharts(getAnalysisActiveObject(students), true, false)}\r\n            {CustomPieCharts(getAnalysisGenderObject(students), false, true)}\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6}>\r\n            {headerCharts(\"Teacher\", teachers, <PersonIcon fontSize=\"small\" style={SET_COLOR_PRIMARY}/>)}\r\n            {CustomPieCharts(getAnalysisActiveObject(teachers), true, false)}\r\n            {CustomPieCharts(getAnalysisGenderObject(teachers), false, true)}\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6}>\r\n            {headerCharts(\"Team\", teams, <PeopleIcon fontSize=\"small\" style={SET_COLOR_PRIMARY}/>)}\r\n            {CustomPieCharts(getAnalysisActiveObject(teams), true, false)}\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6}>\r\n            {headerCharts(\"Topic\", topics, <WorkIcon fontSize=\"small\" style={SET_COLOR_PRIMARY}/>)}\r\n            {CustomPieCharts(getAnalysisActiveObject(teachers), true, false)}\r\n        </Grid>\r\n\r\n        </Grid>\r\n\r\n      <Notification\r\n        notify={notify}\r\n        setNotify={setNotify}\r\n    />\r\n    </div>\r\n    );\r\n}","F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\features\\Chart\\Analysis\\components\\index.jsx",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\Analysis\\index.js",[],"F:\\MTS\\MTS-V2\\MTS-ReactJs\\mts-v2\\src\\api\\Login\\index.js",[],{"ruleId":"362","replacedBy":"363"},{"ruleId":"364","replacedBy":"365"},{"ruleId":"366","severity":1,"message":"367","line":22,"column":11,"nodeType":"368","messageId":"369","endLine":22,"endColumn":29},{"ruleId":"366","severity":1,"message":"370","line":23,"column":12,"nodeType":"368","messageId":"369","endLine":23,"endColumn":19},{"ruleId":"366","severity":1,"message":"371","line":46,"column":9,"nodeType":"368","messageId":"369","endLine":46,"endColumn":18},{"ruleId":"366","severity":1,"message":"372","line":51,"column":9,"nodeType":"368","messageId":"369","endLine":51,"endColumn":17},{"ruleId":"366","severity":1,"message":"373","line":40,"column":9,"nodeType":"368","messageId":"369","endLine":40,"endColumn":19},{"ruleId":"366","severity":1,"message":"374","line":43,"column":9,"nodeType":"368","messageId":"369","endLine":43,"endColumn":30},{"ruleId":"366","severity":1,"message":"375","line":51,"column":9,"nodeType":"368","messageId":"369","endLine":51,"endColumn":24},{"ruleId":"376","severity":1,"message":"377","line":47,"column":39,"nodeType":"378","endLine":47,"endColumn":41,"suggestions":"379"},{"ruleId":"376","severity":1,"message":"377","line":73,"column":39,"nodeType":"378","endLine":73,"endColumn":41,"suggestions":"380"},{"ruleId":"366","severity":1,"message":"381","line":34,"column":9,"nodeType":"368","messageId":"369","endLine":34,"endColumn":20},{"ruleId":"366","severity":1,"message":"371","line":43,"column":9,"nodeType":"368","messageId":"369","endLine":43,"endColumn":18},{"ruleId":"366","severity":1,"message":"382","line":8,"column":10,"nodeType":"368","messageId":"369","endLine":8,"endColumn":20},{"ruleId":"366","severity":1,"message":"383","line":22,"column":12,"nodeType":"368","messageId":"369","endLine":22,"endColumn":18},{"ruleId":"376","severity":1,"message":"377","line":37,"column":39,"nodeType":"378","endLine":37,"endColumn":41,"suggestions":"384"},{"ruleId":"366","severity":1,"message":"370","line":33,"column":12,"nodeType":"368","messageId":"369","endLine":33,"endColumn":19},{"ruleId":"366","severity":1,"message":"385","line":35,"column":12,"nodeType":"368","messageId":"369","endLine":35,"endColumn":22},{"ruleId":"366","severity":1,"message":"386","line":35,"column":24,"nodeType":"368","messageId":"369","endLine":35,"endColumn":37},{"ruleId":"366","severity":1,"message":"382","line":8,"column":10,"nodeType":"368","messageId":"369","endLine":8,"endColumn":20},{"ruleId":"366","severity":1,"message":"382","line":8,"column":10,"nodeType":"368","messageId":"369","endLine":8,"endColumn":20},{"ruleId":"366","severity":1,"message":"382","line":8,"column":10,"nodeType":"368","messageId":"369","endLine":8,"endColumn":20},{"ruleId":"366","severity":1,"message":"382","line":8,"column":10,"nodeType":"368","messageId":"369","endLine":8,"endColumn":20},{"ruleId":"376","severity":1,"message":"387","line":77,"column":7,"nodeType":"378","endLine":77,"endColumn":9,"suggestions":"388"},{"ruleId":"389","severity":1,"message":"390","line":55,"column":13,"nodeType":"391","messageId":"392","endLine":55,"endColumn":37,"fix":"393"},{"ruleId":"389","severity":1,"message":"394","line":56,"column":13,"nodeType":"391","messageId":"392","endLine":56,"endColumn":32,"fix":"395"},{"ruleId":"376","severity":1,"message":"377","line":68,"column":37,"nodeType":"378","endLine":68,"endColumn":39,"suggestions":"396"},{"ruleId":"376","severity":1,"message":"377","line":66,"column":39,"nodeType":"378","endLine":66,"endColumn":41,"suggestions":"397"},{"ruleId":"366","severity":1,"message":"398","line":8,"column":25,"nodeType":"368","messageId":"369","endLine":8,"endColumn":53},"no-native-reassign",["399"],"no-negated-in-lhs",["400"],"no-unused-vars","'classesSelectTopic' is assigned a value but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","'setValues' is assigned a value but never used.","'notFound' is assigned a value but never used.","'isMenuOpen' is assigned a value but never used.","'handleProfileMenuOpen' is assigned a value but never used.","'handleMenuClose' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["401"],["402"],"'handleClick' is assigned a value but never used.","'makeStyles' is defined but never used.","'notify' is assigned a value but never used.",["403"],"'saveChange' is assigned a value but never used.","'setSaveChange' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'id', 'initialFValuesDefault', 'isAddMode', and 'type'. Either include them or remove the dependency array. If 'setValues' needs the current value of 'initialFValuesDefault', you can also switch to useReducer instead of useState and read 'initialFValuesDefault' in the reducer.",["404"],"no-useless-computed-key","Unnecessarily computed property [\"topicName\"] found.","Property","unnecessarilyComputedProperty",{"range":"405","text":"406"},"Unnecessarily computed property [\"topicId\"] found.",{"range":"407","text":"408"},["409"],["410"],"'SET_BACKGROUND_COLOR_PRIMARY' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"411","fix":"412"},{"desc":"411","fix":"413"},{"desc":"411","fix":"414"},{"desc":"415","fix":"416"},[1987,2000],"\"topicName\"",[2026,2037],"\"topicId\"",{"desc":"411","fix":"417"},{"desc":"411","fix":"418"},"Update the dependencies array to be: [fetchData]",{"range":"419","text":"420"},{"range":"421","text":"420"},{"range":"422","text":"420"},"Update the dependencies array to be: [id, initialFValuesDefault, isAddMode, type]",{"range":"423","text":"424"},{"range":"425","text":"420"},{"range":"426","text":"420"},[1763,1765],"[fetchData]",[2698,2700],[1530,1532],[3107,3109],"[id, initialFValuesDefault, isAddMode, type]",[2248,2250],[2452,2454]]